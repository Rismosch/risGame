#![allow(
non_camel_case_types,
dead_code,
non_upper_case_globals,
non_snake_case,
clashing_extern_declarations
)]

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
pub const IMGUI_VERSION: &[u8; 11] = b"1.91.9 WIP\0";
pub const IMGUI_VERSION_NUM: u32 = 19184;
pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC23_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const IMGUI_PAYLOAD_TYPE_COLOR_3F: &[u8; 7] = b"_COL3F\0";
pub const IMGUI_PAYLOAD_TYPE_COLOR_4F: &[u8; 7] = b"_COL4F\0";
pub const IM_UNICODE_CODEPOINT_INVALID: u32 = 65533;
pub const IM_UNICODE_CODEPOINT_MAX: u32 = 65535;
pub const IM_COL32_R_SHIFT: u32 = 0;
pub const IM_COL32_G_SHIFT: u32 = 8;
pub const IM_COL32_B_SHIFT: u32 = 16;
pub const IM_COL32_A_SHIFT: u32 = 24;
pub const IM_COL32_A_MASK: u32 = 4278190080;
pub const IM_DRAWLIST_TEX_LINES_WIDTH_MAX: u32 = 32;
pub const _STDIO_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const FP_LLOGB0: i64 = -9223372036854775808;
pub const FP_LLOGBNAN: i64 = -9223372036854775808;
pub const FP_INT_UPWARD: u32 = 0;
pub const FP_INT_DOWNWARD: u32 = 1;
pub const FP_INT_TOWARDZERO: u32 = 2;
pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
pub const FP_INT_TONEAREST: u32 = 4;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_Ef: f64 = 2.718281828459045;
pub const M_LOG2Ef: f64 = 1.4426950408889634;
pub const M_LOG10Ef: f64 = 0.4342944819032518;
pub const M_LN2f: f64 = 0.6931471805599453;
pub const M_LN10f: f64 = 2.302585092994046;
pub const M_PIf: f64 = 3.141592653589793;
pub const M_PI_2f: f64 = 1.5707963267948966;
pub const M_PI_4f: f64 = 0.7853981633974483;
pub const M_1_PIf: f64 = 0.3183098861837907;
pub const M_2_PIf: f64 = 0.6366197723675814;
pub const M_2_SQRTPIf: f64 = 1.1283791670955126;
pub const M_SQRT2f: f64 = 1.4142135623730951;
pub const M_SQRT1_2f: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const BOOL_MAX: u32 = 1;
pub const BOOL_WIDTH: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_FD_SETSIZE: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_QLIMIT: u32 = 1;
pub const _POSIX_HIWAT: u32 = 512;
pub const _POSIX_UIO_MAXIOV: u32 = 16;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _XOPEN_LIM_H: u32 = 1;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const IOV_MAX: u32 = 1024;
pub const NL_ARGMAX: u32 = 4096;
pub const NL_LANGMAX: u32 = 2048;
pub const NZERO: u32 = 20;
pub const WORD_BIT: u32 = 32;
pub const LONG_BIT: u32 = 64;
pub const __SAVE_GPRBX: &[u8; 30] = b"mov {%%rbx, %%rax |rax, rbx};\0";
pub const __RESTORE_GPRBX: &[u8; 30] = b"mov {%%rax, %%rbx |rbx, rax};\0";
pub const __TMPGPR: &[u8; 4] = b"rax\0";
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const _MM_FROUND_TO_NEAREST_INT: u32 = 0;
pub const _MM_FROUND_TO_NEG_INF: u32 = 1;
pub const _MM_FROUND_TO_POS_INF: u32 = 2;
pub const _MM_FROUND_TO_ZERO: u32 = 3;
pub const _MM_FROUND_CUR_DIRECTION: u32 = 4;
pub const _MM_FROUND_RAISE_EXC: u32 = 0;
pub const _MM_FROUND_NO_EXC: u32 = 8;
pub const _MM_FROUND_NINT: u32 = 0;
pub const _MM_FROUND_FLOOR: u32 = 1;
pub const _MM_FROUND_CEIL: u32 = 2;
pub const _MM_FROUND_TRUNC: u32 = 3;
pub const _MM_FROUND_RINT: u32 = 4;
pub const _MM_FROUND_NEARBYINT: u32 = 12;
pub const _SIDD_UBYTE_OPS: u32 = 0;
pub const _SIDD_UWORD_OPS: u32 = 1;
pub const _SIDD_SBYTE_OPS: u32 = 2;
pub const _SIDD_SWORD_OPS: u32 = 3;
pub const _SIDD_CMP_EQUAL_ANY: u32 = 0;
pub const _SIDD_CMP_RANGES: u32 = 4;
pub const _SIDD_CMP_EQUAL_EACH: u32 = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: u32 = 12;
pub const _SIDD_POSITIVE_POLARITY: u32 = 0;
pub const _SIDD_NEGATIVE_POLARITY: u32 = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: u32 = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: u32 = 48;
pub const _SIDD_LEAST_SIGNIFICANT: u32 = 0;
pub const _SIDD_MOST_SIGNIFICANT: u32 = 64;
pub const _SIDD_BIT_MASK: u32 = 0;
pub const _SIDD_UNIT_MASK: u32 = 64;
pub const _CMP_EQ_OQ: u32 = 0;
pub const _CMP_LT_OS: u32 = 1;
pub const _CMP_LE_OS: u32 = 2;
pub const _CMP_UNORD_Q: u32 = 3;
pub const _CMP_NEQ_UQ: u32 = 4;
pub const _CMP_NLT_US: u32 = 5;
pub const _CMP_NLE_US: u32 = 6;
pub const _CMP_ORD_Q: u32 = 7;
pub const _CMP_EQ_UQ: u32 = 8;
pub const _CMP_NGE_US: u32 = 9;
pub const _CMP_NGT_US: u32 = 10;
pub const _CMP_FALSE_OQ: u32 = 11;
pub const _CMP_NEQ_OQ: u32 = 12;
pub const _CMP_GE_OS: u32 = 13;
pub const _CMP_GT_OS: u32 = 14;
pub const _CMP_TRUE_UQ: u32 = 15;
pub const _CMP_EQ_OS: u32 = 16;
pub const _CMP_LT_OQ: u32 = 17;
pub const _CMP_LE_OQ: u32 = 18;
pub const _CMP_UNORD_S: u32 = 19;
pub const _CMP_NEQ_US: u32 = 20;
pub const _CMP_NLT_UQ: u32 = 21;
pub const _CMP_NLE_UQ: u32 = 22;
pub const _CMP_ORD_S: u32 = 23;
pub const _CMP_EQ_US: u32 = 24;
pub const _CMP_NGE_UQ: u32 = 25;
pub const _CMP_NGT_UQ: u32 = 26;
pub const _CMP_FALSE_OS: u32 = 27;
pub const _CMP_NEQ_OS: u32 = 28;
pub const _CMP_GE_OQ: u32 = 29;
pub const _CMP_GT_OQ: u32 = 30;
pub const _CMP_TRUE_US: u32 = 31;
pub const _XBEGIN_STARTED: i32 = -1;
pub const _XABORT_EXPLICIT: u32 = 1;
pub const _XABORT_RETRY: u32 = 2;
pub const _XABORT_CONFLICT: u32 = 4;
pub const _XABORT_CAPACITY: u32 = 8;
pub const _XABORT_DEBUG: u32 = 16;
pub const _XABORT_NESTED: u32 = 32;
pub const __PCONFIG_KEY_PROGRAM: u32 = 1;
pub const IMGUI_PAYLOAD_TYPE_WINDOW: &[u8; 10] = b"_IMWINDOW\0";
pub const IM_PI: f64 = 3.141592653589793;
pub const IM_NEWLINE: &[u8; 2] = b"\n\0";
pub const IM_TABSIZE: u32 = 4;
pub const IM_PRId64: &[u8; 4] = b"lld\0";
pub const IM_PRIu64: &[u8; 4] = b"llu\0";
pub const IM_PRIX64: &[u8; 4] = b"llX\0";
pub const IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN: u32 = 4;
pub const IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX: u32 = 512;
pub const IM_DRAWLIST_ARCFAST_TABLE_SIZE: u32 = 48;
pub const IM_DRAWLIST_ARCFAST_SAMPLE_MAX: u32 = 48;
pub const IMSTB_TEXTEDIT_GETWIDTH_NEWLINE: f64 = -1.0;
pub const IMSTB_TEXTEDIT_UNDOSTATECOUNT: u32 = 99;
pub const IMSTB_TEXTEDIT_UNDOCHARCOUNT: u32 = 999;
pub const ImGuiKey_LegacyNativeKey_BEGIN: u32 = 0;
pub const ImGuiKey_LegacyNativeKey_END: u32 = 512;
pub const DOCKING_HOST_DRAW_CHANNEL_BG: u32 = 0;
pub const DOCKING_HOST_DRAW_CHANNEL_FG: u32 = 1;
pub const IMGUI_TABLE_MAX_COLUMNS: u32 = 512;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strpbrk(
        __s: *mut ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrordesc_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrorname_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiChildFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiKeyChord = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiMultiSelectFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = ImU64;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar = ImWchar16;
pub type ImGuiSelectionUserData = ImS64;
pub type ImGuiInputTextCallback = ::std::option::Option<
    extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    extern "C" fn(
        sz: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2"][::std::mem::size_of::<ImVec2>() - 8usize];
    ["Alignment of ImVec2"][::std::mem::align_of::<ImVec2>() - 4usize];
    ["Offset of field: ImVec2::x"][::std::mem::offset_of!(ImVec2, x) - 0usize];
    ["Offset of field: ImVec2::y"][::std::mem::offset_of!(ImVec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec4"][::std::mem::size_of::<ImVec4>() - 16usize];
    ["Alignment of ImVec4"][::std::mem::align_of::<ImVec4>() - 4usize];
    ["Offset of field: ImVec4::x"][::std::mem::offset_of!(ImVec4, x) - 0usize];
    ["Offset of field: ImVec4::y"][::std::mem::offset_of!(ImVec4, y) - 4usize];
    ["Offset of field: ImVec4::z"][::std::mem::offset_of!(ImVec4, z) - 8usize];
    ["Offset of field: ImVec4::w"][::std::mem::offset_of!(ImVec4, w) - 12usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CreateContextEP11ImFontAtlas"]
    pub fn ImGui_CreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14DestroyContextEP12ImGuiContext"]
    pub fn ImGui_DestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetCurrentContextEv"]
    pub fn ImGui_GetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetCurrentContextEP12ImGuiContext"]
    pub fn ImGui_SetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIOEv"]
    pub fn ImGui_GetIO() -> *mut ImGuiIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetPlatformIOEv"]
    pub fn ImGui_GetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8GetStyleEv"]
    pub fn ImGui_GetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8NewFrameEv"]
    pub fn ImGui_NewFrame();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndFrameEv"]
    pub fn ImGui_EndFrame();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6RenderEv"]
    pub fn ImGui_Render();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetDrawDataEv"]
    pub fn ImGui_GetDrawData() -> *mut ImDrawData;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14ShowDemoWindowEPb"]
    pub fn ImGui_ShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17ShowMetricsWindowEPb"]
    pub fn ImGui_ShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18ShowDebugLogWindowEPb"]
    pub fn ImGui_ShowDebugLogWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21ShowIDStackToolWindowEPb"]
    pub fn ImGui_ShowIDStackToolWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15ShowAboutWindowEPb"]
    pub fn ImGui_ShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15ShowStyleEditorEP10ImGuiStyle"]
    pub fn ImGui_ShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17ShowStyleSelectorEPKc"]
    pub fn ImGui_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16ShowFontSelectorEPKc"]
    pub fn ImGui_ShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ShowUserGuideEv"]
    pub fn ImGui_ShowUserGuide();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetVersionEv"]
    pub fn ImGui_GetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15StyleColorsDarkEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16StyleColorsLightEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18StyleColorsClassicEP10ImGuiStyle"]
    pub fn ImGui_StyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5BeginEPKcPbi"]
    pub fn ImGui_Begin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui3EndEv"]
    pub fn ImGui_End();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginChildEPKcRK6ImVec2ii"]
    pub fn ImGui_BeginChild(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginChildEjRK6ImVec2ii"]
    pub fn ImGui_BeginChild1(
        id: ImGuiID,
        size: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndChildEv"]
    pub fn ImGui_EndChild();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsWindowAppearingEv"]
    pub fn ImGui_IsWindowAppearing() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsWindowCollapsedEv"]
    pub fn ImGui_IsWindowCollapsed() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsWindowFocusedEi"]
    pub fn ImGui_IsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsWindowHoveredEi"]
    pub fn ImGui_IsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetWindowDrawListEv"]
    pub fn ImGui_GetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetWindowDpiScaleEv"]
    pub fn ImGui_GetWindowDpiScale() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetWindowPosEv"]
    pub fn ImGui_GetWindowPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetWindowSizeEv"]
    pub fn ImGui_GetWindowSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetWindowWidthEv"]
    pub fn ImGui_GetWindowWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetWindowHeightEv"]
    pub fn ImGui_GetWindowHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetWindowViewportEv"]
    pub fn ImGui_GetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_"]
    pub fn ImGui_SetNextWindowPos(pos: *const ImVec2, cond: ImGuiCond, pivot: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetNextWindowSizeERK6ImVec2i"]
    pub fn ImGui_SetNextWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv"]
    pub fn ImGui_SetNextWindowSizeConstraints(
        size_min: *const ImVec2,
        size_max: *const ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2"]
    pub fn ImGui_SetNextWindowContentSize(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22SetNextWindowCollapsedEbi"]
    pub fn ImGui_SetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetNextWindowFocusEv"]
    pub fn ImGui_SetNextWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetNextWindowScrollERK6ImVec2"]
    pub fn ImGui_SetNextWindowScroll(scroll: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetNextWindowBgAlphaEf"]
    pub fn ImGui_SetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21SetNextWindowViewportEj"]
    pub fn ImGui_SetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetWindowPosERK6ImVec2i"]
    pub fn ImGui_SetWindowPos(pos: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowSizeERK6ImVec2i"]
    pub fn ImGui_SetWindowSize(size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowCollapsedEbi"]
    pub fn ImGui_SetWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetWindowFocusEv"]
    pub fn ImGui_SetWindowFocus();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowFontScaleEf"]
    pub fn ImGui_SetWindowFontScale(scale: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i"]
    pub fn ImGui_SetWindowPos1(
        name: *const ::std::os::raw::c_char,
        pos: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i"]
    pub fn ImGui_SetWindowSize1(
        name: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowCollapsedEPKcbi"]
    pub fn ImGui_SetWindowCollapsed1(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetWindowFocusEPKc"]
    pub fn ImGui_SetWindowFocus1(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetScrollXEv"]
    pub fn ImGui_GetScrollX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetScrollYEv"]
    pub fn ImGui_GetScrollY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollXEf"]
    pub fn ImGui_SetScrollX(scroll_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollYEf"]
    pub fn ImGui_SetScrollY(scroll_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetScrollMaxXEv"]
    pub fn ImGui_GetScrollMaxX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetScrollMaxYEv"]
    pub fn ImGui_GetScrollMaxY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetScrollHereXEf"]
    pub fn ImGui_SetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetScrollHereYEf"]
    pub fn ImGui_SetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetScrollFromPosXEff"]
    pub fn ImGui_SetScrollFromPosX(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetScrollFromPosYEff"]
    pub fn ImGui_SetScrollFromPosY(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8PushFontEP6ImFont"]
    pub fn ImGui_PushFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7PopFontEv"]
    pub fn ImGui_PopFont();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushStyleColorEij"]
    pub fn ImGui_PushStyleColor(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushStyleColorEiRK6ImVec4"]
    pub fn ImGui_PushStyleColor1(idx: ImGuiCol, col: *const ImVec4);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PopStyleColorEi"]
    pub fn ImGui_PopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushStyleVarEif"]
    pub fn ImGui_PushStyleVar(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushStyleVarEiRK6ImVec2"]
    pub fn ImGui_PushStyleVar1(idx: ImGuiStyleVar, val: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PushStyleVarXEif"]
    pub fn ImGui_PushStyleVarX(idx: ImGuiStyleVar, val_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PushStyleVarYEif"]
    pub fn ImGui_PushStyleVarY(idx: ImGuiStyleVar, val_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11PopStyleVarEi"]
    pub fn ImGui_PopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushItemFlagEib"]
    pub fn ImGui_PushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11PopItemFlagEv"]
    pub fn ImGui_PopItemFlag();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PushItemWidthEf"]
    pub fn ImGui_PushItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PopItemWidthEv"]
    pub fn ImGui_PopItemWidth();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetNextItemWidthEf"]
    pub fn ImGui_SetNextItemWidth(item_width: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CalcItemWidthEv"]
    pub fn ImGui_CalcItemWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15PushTextWrapPosEf"]
    pub fn ImGui_PushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PopTextWrapPosEv"]
    pub fn ImGui_PopTextWrapPos();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7GetFontEv"]
    pub fn ImGui_GetFont() -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetFontSizeEv"]
    pub fn ImGui_GetFontSize() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetFontTexUvWhitePixelEv"]
    pub fn ImGui_GetFontTexUvWhitePixel() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32Eif"]
    pub fn ImGui_GetColorU32(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32ERK6ImVec4"]
    pub fn ImGui_GetColorU321(col: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetColorU32Ejf"]
    pub fn ImGui_GetColorU322(col: ImU32, alpha_mul: f32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetStyleColorVec4Ei"]
    pub fn ImGui_GetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18GetCursorScreenPosEv"]
    pub fn ImGui_GetCursorScreenPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetCursorScreenPosERK6ImVec2"]
    pub fn ImGui_SetCursorScreenPos(pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetContentRegionAvailEv"]
    pub fn ImGui_GetContentRegionAvail() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetCursorPosEv"]
    pub fn ImGui_GetCursorPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetCursorPosXEv"]
    pub fn ImGui_GetCursorPosX() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetCursorPosYEv"]
    pub fn ImGui_GetCursorPosY() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetCursorPosERK6ImVec2"]
    pub fn ImGui_SetCursorPos(local_pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetCursorPosXEf"]
    pub fn ImGui_SetCursorPosX(local_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetCursorPosYEf"]
    pub fn ImGui_SetCursorPosY(local_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetCursorStartPosEv"]
    pub fn ImGui_GetCursorStartPos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9SeparatorEv"]
    pub fn ImGui_Separator();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8SameLineEff"]
    pub fn ImGui_SameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7NewLineEv"]
    pub fn ImGui_NewLine();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7SpacingEv"]
    pub fn ImGui_Spacing();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5DummyERK6ImVec2"]
    pub fn ImGui_Dummy(size: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6IndentEf"]
    pub fn ImGui_Indent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8UnindentEf"]
    pub fn ImGui_Unindent(indent_w: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginGroupEv"]
    pub fn ImGui_BeginGroup();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndGroupEv"]
    pub fn ImGui_EndGroup();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23AlignTextToFramePaddingEv"]
    pub fn ImGui_AlignTextToFramePadding();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetTextLineHeightEv"]
    pub fn ImGui_GetTextLineHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28GetTextLineHeightWithSpacingEv"]
    pub fn ImGui_GetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetFrameHeightEv"]
    pub fn ImGui_GetFrameHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetFrameHeightWithSpacingEv"]
    pub fn ImGui_GetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKc"]
    pub fn ImGui_PushID(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKcS1_"]
    pub fn ImGui_PushID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEPKv"]
    pub fn ImGui_PushID2(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PushIDEi"]
    pub fn ImGui_PushID3(int_id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5PopIDEv"]
    pub fn ImGui_PopID();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKc"]
    pub fn ImGui_GetID(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKcS1_"]
    pub fn ImGui_GetID1(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEPKv"]
    pub fn ImGui_GetID2(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIDEi"]
    pub fn ImGui_GetID3(int_id: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TextUnformattedEPKcS1_"]
    pub fn ImGui_TextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui4TextEPKcz"]
    pub fn ImGui_Text(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5TextVEPKcP13__va_list_tag"]
    pub fn ImGui_TextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TextColoredERK6ImVec4PKcz"]
    pub fn ImGui_TextColored(col: *const ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextColoredVERK6ImVec4PKcP13__va_list_tag"]
    pub fn ImGui_TextColoredV(
        col: *const ImVec4,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextDisabledEPKcz"]
    pub fn ImGui_TextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TextDisabledVEPKcP13__va_list_tag"]
    pub fn ImGui_TextDisabledV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TextWrappedEPKcz"]
    pub fn ImGui_TextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TextWrappedVEPKcP13__va_list_tag"]
    pub fn ImGui_TextWrappedV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LabelTextEPKcS1_z"]
    pub fn ImGui_LabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10LabelTextVEPKcS1_P13__va_list_tag"]
    pub fn ImGui_LabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BulletTextEPKcz"]
    pub fn ImGui_BulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11BulletTextVEPKcP13__va_list_tag"]
    pub fn ImGui_BulletTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SeparatorTextEPKc"]
    pub fn ImGui_SeparatorText(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6ButtonEPKcRK6ImVec2"]
    pub fn ImGui_Button(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SmallButtonEPKc"]
    pub fn ImGui_SmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15InvisibleButtonEPKcRK6ImVec2i"]
    pub fn ImGui_InvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ArrowButtonEPKc8ImGuiDir"]
    pub fn ImGui_ArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8CheckboxEPKcPb"]
    pub fn ImGui_Checkbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CheckboxFlagsEPKcPii"]
    pub fn ImGui_CheckboxFlags(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CheckboxFlagsEPKcPjj"]
    pub fn ImGui_CheckboxFlags1(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RadioButtonEPKcb"]
    pub fn ImGui_RadioButton(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RadioButtonEPKcPii"]
    pub fn ImGui_RadioButton1(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ProgressBarEfRK6ImVec2PKc"]
    pub fn ImGui_ProgressBar(
        fraction: f32,
        size_arg: *const ImVec2,
        overlay: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6BulletEv"]
    pub fn ImGui_Bullet();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TextLinkEPKc"]
    pub fn ImGui_TextLink(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TextLinkOpenURLEPKcS1_"]
    pub fn ImGui_TextLinkOpenURL(
        label: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ImageEyRK6ImVec2S2_S2_RK6ImVec4S5_"]
    pub fn ImGui_Image(
        user_texture_id: ImTextureID,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        tint_col: *const ImVec4,
        border_col: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ImageButtonEPKcyRK6ImVec2S4_S4_RK6ImVec4S7_"]
    pub fn ImGui_ImageButton(
        str_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginComboEPKcS1_i"]
    pub fn ImGui_BeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndComboEv"]
    pub fn ImGui_EndCombo();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiPKS1_ii"]
    pub fn ImGui_Combo(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiS1_i"]
    pub fn ImGui_Combo1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiPFS1_PviES3_ii"]
    pub fn ImGui_Combo2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9DragFloatEPKcPffffS1_i"]
    pub fn ImGui_DragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat2EPKcPffffS1_i"]
    pub fn ImGui_DragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat3EPKcPffffS1_i"]
    pub fn ImGui_DragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragFloat4EPKcPffffS1_i"]
    pub fn ImGui_DragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_i"]
    pub fn ImGui_DragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7DragIntEPKcPifiiS1_i"]
    pub fn ImGui_DragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt2EPKcPifiiS1_i"]
    pub fn ImGui_DragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt3EPKcPifiiS1_i"]
    pub fn ImGui_DragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DragInt4EPKcPifiiS1_i"]
    pub fn ImGui_DragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_i"]
    pub fn ImGui_DragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_i"]
    pub fn ImGui_DragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_i"]
    pub fn ImGui_DragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SliderFloatEPKcPfffS1_i"]
    pub fn ImGui_SliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat2EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat3EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderFloat4EPKcPfffS1_i"]
    pub fn ImGui_SliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SliderAngleEPKcPfffS1_i"]
    pub fn ImGui_SliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9SliderIntEPKcPiiiS1_i"]
    pub fn ImGui_SliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt2EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt3EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SliderInt4EPKcPiiiS1_i"]
    pub fn ImGui_SliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_i"]
    pub fn ImGui_SliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_i"]
    pub fn ImGui_SliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_i"]
    pub fn ImGui_VSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_i"]
    pub fn ImGui_VSliderInt(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_i"]
    pub fn ImGui_VSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: *const ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputTextEPKcPcmiPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18InputTextMultilineEPKcPcmRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        size: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17InputTextWithHintEPKcS1_PcmiPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10InputFloatEPKcPfffS1_i"]
    pub fn ImGui_InputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat2EPKcPfS1_i"]
    pub fn ImGui_InputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat3EPKcPfS1_i"]
    pub fn ImGui_InputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputFloat4EPKcPfS1_i"]
    pub fn ImGui_InputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8InputIntEPKcPiiii"]
    pub fn ImGui_InputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt2EPKcPii"]
    pub fn ImGui_InputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt3EPKcPii"]
    pub fn ImGui_InputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9InputInt4EPKcPii"]
    pub fn ImGui_InputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputDoubleEPKcPdddS1_i"]
    pub fn ImGui_InputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i"]
    pub fn ImGui_InputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i"]
    pub fn ImGui_InputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10ColorEdit3EPKcPfi"]
    pub fn ImGui_ColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10ColorEdit4EPKcPfi"]
    pub fn ImGui_ColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ColorPicker3EPKcPfi"]
    pub fn ImGui_ColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ColorPicker4EPKcPfiPKf"]
    pub fn ImGui_ColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ColorButtonEPKcRK6ImVec4iRK6ImVec2"]
    pub fn ImGui_ColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: *const ImVec4,
        flags: ImGuiColorEditFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetColorEditOptionsEi"]
    pub fn ImGui_SetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKc"]
    pub fn ImGui_TreeNode(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKcS1_z"]
    pub fn ImGui_TreeNode1(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreeNodeEPKvPKcz"]
    pub fn ImGui_TreeNode2(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9TreeNodeVEPKcS1_P13__va_list_tag"]
    pub fn ImGui_TreeNodeV(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9TreeNodeVEPKvPKcP13__va_list_tag"]
    pub fn ImGui_TreeNodeV1(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKci"]
    pub fn ImGui_TreeNodeEx(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKciS1_z"]
    pub fn ImGui_TreeNodeEx1(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10TreeNodeExEPKviPKcz"]
    pub fn ImGui_TreeNodeEx2(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TreeNodeExVEPKciS1_P13__va_list_tag"]
    pub fn ImGui_TreeNodeExV(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TreeNodeExVEPKviPKcP13__va_list_tag"]
    pub fn ImGui_TreeNodeExV1(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreePushEPKc"]
    pub fn ImGui_TreePush(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8TreePushEPKv"]
    pub fn ImGui_TreePush1(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7TreePopEv"]
    pub fn ImGui_TreePop();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetTreeNodeToLabelSpacingEv"]
    pub fn ImGui_GetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CollapsingHeaderEPKci"]
    pub fn ImGui_CollapsingHeader(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CollapsingHeaderEPKcPbi"]
    pub fn ImGui_CollapsingHeader1(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetNextItemOpenEbi"]
    pub fn ImGui_SetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetNextItemStorageIDEj"]
    pub fn ImGui_SetNextItemStorageID(storage_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SelectableEPKcbiRK6ImVec2"]
    pub fn ImGui_Selectable(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SelectableEPKcPbiRK6ImVec2"]
    pub fn ImGui_Selectable1(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16BeginMultiSelectEiii"]
    pub fn ImGui_BeginMultiSelect(
        flags: ImGuiMultiSelectFlags,
        selection_size: ::std::os::raw::c_int,
        items_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiMultiSelectIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14EndMultiSelectEv"]
    pub fn ImGui_EndMultiSelect() -> *mut ImGuiMultiSelectIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28SetNextItemSelectionUserDataEx"]
    pub fn ImGui_SetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22IsItemToggledSelectionEv"]
    pub fn ImGui_IsItemToggledSelection() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginListBoxEPKcRK6ImVec2"]
    pub fn ImGui_BeginListBox(label: *const ::std::os::raw::c_char, size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndListBoxEv"]
    pub fn ImGui_EndListBox();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ListBoxEPKcPiPKS1_ii"]
    pub fn ImGui_ListBox(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ListBoxEPKcPiPFS1_PviES3_ii"]
    pub fn ImGui_ListBox1(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        getter: ::std::option::Option<
            extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i"]
    pub fn ImGui_PlotLines(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn ImGui_PlotLines1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i"]
    pub fn ImGui_PlotHistogram(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2"]
    pub fn ImGui_PlotHistogram1(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcb"]
    pub fn ImGui_Value(prefix: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKci"]
    pub fn ImGui_Value1(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcj"]
    pub fn ImGui_Value2(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ValueEPKcfS1_"]
    pub fn ImGui_Value3(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginMenuBarEv"]
    pub fn ImGui_BeginMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndMenuBarEv"]
    pub fn ImGui_EndMenuBar();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16BeginMainMenuBarEv"]
    pub fn ImGui_BeginMainMenuBar() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14EndMainMenuBarEv"]
    pub fn ImGui_EndMainMenuBar();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9BeginMenuEPKcb"]
    pub fn ImGui_BeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7EndMenuEv"]
    pub fn ImGui_EndMenu();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MenuItemEPKcS1_bb"]
    pub fn ImGui_MenuItem(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MenuItemEPKcS1_Pbb"]
    pub fn ImGui_MenuItem1(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginTooltipEv"]
    pub fn ImGui_BeginTooltip() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndTooltipEv"]
    pub fn ImGui_EndTooltip();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetTooltipEPKcz"]
    pub fn ImGui_SetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SetTooltipVEPKcP13__va_list_tag"]
    pub fn ImGui_SetTooltipV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16BeginItemTooltipEv"]
    pub fn ImGui_BeginItemTooltip() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetItemTooltipEPKcz"]
    pub fn ImGui_SetItemTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetItemTooltipVEPKcP13__va_list_tag"]
    pub fn ImGui_SetItemTooltipV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginPopupEPKci"]
    pub fn ImGui_BeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15BeginPopupModalEPKcPbi"]
    pub fn ImGui_BeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndPopupEv"]
    pub fn ImGui_EndPopup();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9OpenPopupEPKci"]
    pub fn ImGui_OpenPopup(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9OpenPopupEji"]
    pub fn ImGui_OpenPopup1(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20OpenPopupOnItemClickEPKci"]
    pub fn ImGui_OpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17CloseCurrentPopupEv"]
    pub fn ImGui_CloseCurrentPopup();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21BeginPopupContextItemEPKci"]
    pub fn ImGui_BeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23BeginPopupContextWindowEPKci"]
    pub fn ImGui_BeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21BeginPopupContextVoidEPKci"]
    pub fn ImGui_BeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsPopupOpenEPKci"]
    pub fn ImGui_IsPopupOpen(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10BeginTableEPKciiRK6ImVec2f"]
    pub fn ImGui_BeginTable(
        str_id: *const ::std::os::raw::c_char,
        columns: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8EndTableEv"]
    pub fn ImGui_EndTable();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TableNextRowEif"]
    pub fn ImGui_TableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TableNextColumnEv"]
    pub fn ImGui_TableNextColumn() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableSetColumnIndexEi"]
    pub fn ImGui_TableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TableSetupColumnEPKcifj"]
    pub fn ImGui_TableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableSetupScrollFreezeEii"]
    pub fn ImGui_TableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TableHeaderEPKc"]
    pub fn ImGui_TableHeader(label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TableHeadersRowEv"]
    pub fn ImGui_TableHeadersRow();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TableAngledHeadersRowEv"]
    pub fn ImGui_TableAngledHeadersRow();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TableGetSortSpecsEv"]
    pub fn ImGui_TableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableGetColumnCountEv"]
    pub fn ImGui_TableGetColumnCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableGetColumnIndexEv"]
    pub fn ImGui_TableGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TableGetRowIndexEv"]
    pub fn ImGui_TableGetRowIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableGetColumnNameEi"]
    pub fn ImGui_TableGetColumnName(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableGetColumnFlagsEi"]
    pub fn ImGui_TableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TableSetColumnEnabledEib"]
    pub fn ImGui_TableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TableGetHoveredColumnEv"]
    pub fn ImGui_TableGetHoveredColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TableSetBgColorEiji"]
    pub fn ImGui_TableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ColumnsEiPKcb"]
    pub fn ImGui_Columns(
        count: ::std::os::raw::c_int,
        id: *const ::std::os::raw::c_char,
        borders: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10NextColumnEv"]
    pub fn ImGui_NextColumn();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetColumnIndexEv"]
    pub fn ImGui_GetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetColumnWidthEi"]
    pub fn ImGui_GetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetColumnWidthEif"]
    pub fn ImGui_SetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetColumnOffsetEi"]
    pub fn ImGui_GetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetColumnOffsetEif"]
    pub fn ImGui_SetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetColumnsCountEv"]
    pub fn ImGui_GetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11BeginTabBarEPKci"]
    pub fn ImGui_BeginTabBar(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9EndTabBarEv"]
    pub fn ImGui_EndTabBar();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginTabItemEPKcPbi"]
    pub fn ImGui_BeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndTabItemEv"]
    pub fn ImGui_EndTabItem();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TabItemButtonEPKci"]
    pub fn ImGui_TabItemButton(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetTabItemClosedEPKc"]
    pub fn ImGui_SetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9DockSpaceEjRK6ImVec2iPK16ImGuiWindowClass"]
    pub fn ImGui_DockSpace(
        dockspace_id: ImGuiID,
        size: *const ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockSpaceOverViewportEjPK13ImGuiViewportiPK16ImGuiWindowClass"]
    pub fn ImGui_DockSpaceOverViewport(
        dockspace_id: ImGuiID,
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetNextWindowDockIDEji"]
    pub fn ImGui_SetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetNextWindowClassEPK16ImGuiWindowClass"]
    pub fn ImGui_SetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetWindowDockIDEv"]
    pub fn ImGui_GetWindowDockID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsWindowDockedEv"]
    pub fn ImGui_IsWindowDocked() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8LogToTTYEi"]
    pub fn ImGui_LogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LogToFileEiPKc"]
    pub fn ImGui_LogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14LogToClipboardEi"]
    pub fn ImGui_LogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9LogFinishEv"]
    pub fn ImGui_LogFinish();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10LogButtonsEv"]
    pub fn ImGui_LogButtons();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7LogTextEPKcz"]
    pub fn ImGui_LogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8LogTextVEPKcP13__va_list_tag"]
    pub fn ImGui_LogTextV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19BeginDragDropSourceEi"]
    pub fn ImGui_BeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetDragDropPayloadEPKcPKvmi"]
    pub fn ImGui_SetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17EndDragDropSourceEv"]
    pub fn ImGui_EndDragDropSource();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19BeginDragDropTargetEv"]
    pub fn ImGui_BeginDragDropTarget() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21AcceptDragDropPayloadEPKci"]
    pub fn ImGui_AcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17EndDragDropTargetEv"]
    pub fn ImGui_EndDragDropTarget();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18GetDragDropPayloadEv"]
    pub fn ImGui_GetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13BeginDisabledEb"]
    pub fn ImGui_BeginDisabled(disabled: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11EndDisabledEv"]
    pub fn ImGui_EndDisabled();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12PushClipRectERK6ImVec2S2_b"]
    pub fn ImGui_PushClipRect(
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11PopClipRectEv"]
    pub fn ImGui_PopClipRect();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetItemDefaultFocusEv"]
    pub fn ImGui_SetItemDefaultFocus();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetKeyboardFocusHereEi"]
    pub fn ImGui_SetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetNavCursorVisibleEb"]
    pub fn ImGui_SetNavCursorVisible(visible: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23SetNextItemAllowOverlapEv"]
    pub fn ImGui_SetNextItemAllowOverlap();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemHoveredEi"]
    pub fn ImGui_IsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsItemActiveEv"]
    pub fn ImGui_IsItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemFocusedEv"]
    pub fn ImGui_IsItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemClickedEi"]
    pub fn ImGui_IsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsItemVisibleEv"]
    pub fn ImGui_IsItemVisible() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsItemEditedEv"]
    pub fn ImGui_IsItemEdited() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsItemActivatedEv"]
    pub fn ImGui_IsItemActivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsItemDeactivatedEv"]
    pub fn ImGui_IsItemDeactivated() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26IsItemDeactivatedAfterEditEv"]
    pub fn ImGui_IsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsItemToggledOpenEv"]
    pub fn ImGui_IsItemToggledOpen() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16IsAnyItemHoveredEv"]
    pub fn ImGui_IsAnyItemHovered() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsAnyItemActiveEv"]
    pub fn ImGui_IsAnyItemActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16IsAnyItemFocusedEv"]
    pub fn ImGui_IsAnyItemFocused() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9GetItemIDEv"]
    pub fn ImGui_GetItemID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetItemRectMinEv"]
    pub fn ImGui_GetItemRectMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetItemRectMaxEv"]
    pub fn ImGui_GetItemRectMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetItemRectSizeEv"]
    pub fn ImGui_GetItemRectSize() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetMainViewportEv"]
    pub fn ImGui_GetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport"]
    pub fn ImGui_GetBackgroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport"]
    pub fn ImGui_GetForegroundDrawList(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsRectVisibleERK6ImVec2"]
    pub fn ImGui_IsRectVisible(size: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsRectVisibleERK6ImVec2S2_"]
    pub fn ImGui_IsRectVisible1(rect_min: *const ImVec2, rect_max: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7GetTimeEv"]
    pub fn ImGui_GetTime() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetFrameCountEv"]
    pub fn ImGui_GetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetDrawListSharedDataEv"]
    pub fn ImGui_GetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetStyleColorNameEi"]
    pub fn ImGui_GetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetStateStorageEP12ImGuiStorage"]
    pub fn ImGui_SetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetStateStorageEv"]
    pub fn ImGui_GetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12CalcTextSizeEPKcS1_bf"]
    pub fn ImGui_CalcTextSize(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ColorConvertU32ToFloat4Ej"]
    pub fn ImGui_ColorConvertU32ToFloat4(in_: ImU32) -> ImVec4;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4"]
    pub fn ImGui_ColorConvertFloat4ToU32(in_: *const ImVec4) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_"]
    pub fn ImGui_ColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_"]
    pub fn ImGui_ColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9IsKeyDownE8ImGuiKey"]
    pub fn ImGui_IsKeyDown(key: ImGuiKey) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsKeyPressedE8ImGuiKeyb"]
    pub fn ImGui_IsKeyPressed(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsKeyReleasedE8ImGuiKey"]
    pub fn ImGui_IsKeyReleased(key: ImGuiKey) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsKeyChordPressedEi"]
    pub fn ImGui_IsKeyChordPressed(key_chord: ImGuiKeyChord) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff"]
    pub fn ImGui_GetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetKeyNameE8ImGuiKey"]
    pub fn ImGui_GetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb"]
    pub fn ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ShortcutEii"]
    pub fn ImGui_Shortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetNextItemShortcutEii"]
    pub fn ImGui_SetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetItemKeyOwnerE8ImGuiKey"]
    pub fn ImGui_SetItemKeyOwner(key: ImGuiKey);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsMouseDownEi"]
    pub fn ImGui_IsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsMouseClickedEib"]
    pub fn ImGui_IsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMouseReleasedEi"]
    pub fn ImGui_IsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20IsMouseDoubleClickedEi"]
    pub fn ImGui_IsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24IsMouseReleasedWithDelayEif"]
    pub fn ImGui_IsMouseReleasedWithDelay(button: ImGuiMouseButton, delay: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20GetMouseClickedCountEi"]
    pub fn ImGui_GetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b"]
    pub fn ImGui_IsMouseHoveringRect(
        r_min: *const ImVec2,
        r_max: *const ImVec2,
        clip: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMousePosValidEPK6ImVec2"]
    pub fn ImGui_IsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsAnyMouseDownEv"]
    pub fn ImGui_IsAnyMouseDown() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetMousePosEv"]
    pub fn ImGui_GetMousePos() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv"]
    pub fn ImGui_GetMousePosOnOpeningCurrentPopup() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMouseDraggingEif"]
    pub fn ImGui_IsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetMouseDragDeltaEif"]
    pub fn ImGui_GetMouseDragDelta(button: ImGuiMouseButton, lock_threshold: f32) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19ResetMouseDragDeltaEi"]
    pub fn ImGui_ResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14GetMouseCursorEv"]
    pub fn ImGui_GetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetMouseCursorEi"]
    pub fn ImGui_SetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28SetNextFrameWantCaptureMouseEb"]
    pub fn ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16GetClipboardTextEv"]
    pub fn ImGui_GetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetClipboardTextEPKc"]
    pub fn ImGui_SetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23LoadIniSettingsFromDiskEPKc"]
    pub fn ImGui_LoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm"]
    pub fn ImGui_LoadIniSettingsFromMemory(
        ini_data: *const ::std::os::raw::c_char,
        ini_size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21SaveIniSettingsToDiskEPKc"]
    pub fn ImGui_SaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23SaveIniSettingsToMemoryEPm"]
    pub fn ImGui_SaveIniSettingsToMemory(out_ini_size: *mut usize)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DebugTextEncodingEPKc"]
    pub fn ImGui_DebugTextEncoding(text: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DebugFlashStyleColorEi"]
    pub fn ImGui_DebugFlashStyleColor(idx: ImGuiCol);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DebugStartItemPickerEv"]
    pub fn ImGui_DebugStartItemPicker();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm"]
    pub fn ImGui_DebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8DebugLogEPKcz"]
    pub fn ImGui_DebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9DebugLogVEPKcP13__va_list_tag"]
    pub fn ImGui_DebugLogV(fmt: *const ::std::os::raw::c_char, args: *mut __va_list_tag);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_"]
    pub fn ImGui_SetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_"]
    pub fn ImGui_GetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8MemAllocEm"]
    pub fn ImGui_MemAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7MemFreeEPv"]
    pub fn ImGui_MemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21UpdatePlatformWindowsEv"]
    pub fn ImGui_UpdatePlatformWindows();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28RenderPlatformWindowsDefaultEPvS0_"]
    pub fn ImGui_RenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22DestroyPlatformWindowsEv"]
    pub fn ImGui_DestroyPlatformWindows();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16FindViewportByIDEj"]
    pub fn ImGui_FindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28FindViewportByPlatformHandleEPv"]
    pub fn ImGui_FindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19GetContentRegionMaxEv"]
    pub fn ImGui_GetContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetWindowContentRegionMinEv"]
    pub fn ImGui_GetWindowContentRegionMin() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetWindowContentRegionMaxEv"]
    pub fn ImGui_GetWindowContentRegionMax() -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii"]
    pub fn ImGui_Combo3(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii"]
    pub fn ImGui_ListBox2(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        old_callback: ::std::option::Option<
            extern "C" fn(
                user_data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        user_data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19SetItemAllowOverlapEv"]
    pub fn ImGui_SetItemAllowOverlap();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui5GetIOEP12ImGuiContext"]
    pub fn ImGui_GetIO1(ctx: *mut ImGuiContext) -> *mut ImGuiIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetPlatformIOEP12ImGuiContext"]
    pub fn ImGui_GetPlatformIO1(ctx: *mut ImGuiContext) -> *mut ImGuiPlatformIO;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14FindWindowByIDEj"]
    pub fn ImGui_FindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16FindWindowByNameEPKc"]
    pub fn ImGui_FindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_"]
    pub fn ImGui_UpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23UpdateWindowSkipRefreshEP11ImGuiWindow"]
    pub fn ImGui_UpdateWindowSkipRefresh(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow"]
    pub fn ImGui_CalcWindowNextAutoFitSize(window: *mut ImGuiWindow) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_bb"]
    pub fn ImGui_IsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
        popup_hierarchy: bool,
        dock_hierarchy: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_"]
    pub fn ImGui_IsWindowWithinBeginStackOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_"]
    pub fn ImGui_IsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow"]
    pub fn ImGui_IsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i"]
    pub fn ImGui_SetWindowPos2(window: *mut ImGuiWindow, pos: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i"]
    pub fn ImGui_SetWindowSize2(window: *mut ImGuiWindow, size: *const ImVec2, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi"]
    pub fn ImGui_SetWindowCollapsed2(window: *mut ImGuiWindow, collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_"]
    pub fn ImGui_SetWindowHitTestHole(
        window: *mut ImGuiWindow,
        pos: *const ImVec2,
        size: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui42SetWindowHiddenAndSkipItemsForCurrentFrameEP11ImGuiWindow"]
    pub fn ImGui_SetWindowHiddenAndSkipItemsForCurrentFrame(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11FocusWindowEP11ImGuiWindowi"]
    pub fn ImGui_FocusWindow(window: *mut ImGuiWindow, flags: ImGuiFocusRequestFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_P13ImGuiViewporti"]
    pub fn ImGui_FocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
        filter_viewport: *mut ImGuiViewport,
        flags: ImGuiFocusRequestFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow"]
    pub fn ImGui_BringWindowToFocusFront(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow"]
    pub fn ImGui_BringWindowToDisplayFront(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow"]
    pub fn ImGui_BringWindowToDisplayBack(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_"]
    pub fn ImGui_BringWindowToDisplayBehind(
        window: *mut ImGuiWindow,
        above_window: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow"]
    pub fn ImGui_FindWindowDisplayIndex(window: *mut ImGuiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow"]
    pub fn ImGui_FindBottomMostVisibleWindowWithinBeginStack(
        window: *mut ImGuiWindow,
    ) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26SetNextWindowRefreshPolicyEi"]
    pub fn ImGui_SetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SetCurrentFontEP6ImFont"]
    pub fn ImGui_SetCurrentFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16PushPasswordFontEv"]
    pub fn ImGui_PushPasswordFont();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23AddDrawListToDrawDataExEP10ImDrawDataP8ImVectorIP10ImDrawListES4_"]
    pub fn ImGui_AddDrawListToDrawDataEx(
        draw_data: *mut ImDrawData,
        out_list: *mut ImVector<*mut ImDrawList>,
        draw_list: *mut ImDrawList,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10InitializeEv"]
    pub fn ImGui_Initialize();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ShutdownEv"]
    pub fn ImGui_Shutdown();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17UpdateInputEventsEb"]
    pub fn ImGui_UpdateInputEvents(trickle_fast_inputs: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv"]
    pub fn ImGui_UpdateHoveredWindowAndCaptureFlags();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19FindHoveredWindowExERK6ImVec2bPP11ImGuiWindowS5_"]
    pub fn ImGui_FindHoveredWindowEx(
        pos: *const ImVec2,
        find_first_and_in_any_viewport: bool,
        out_hovered_window: *mut *mut ImGuiWindow,
        out_hovered_window_under_moving_window: *mut *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow"]
    pub fn ImGui_StartMouseMovingWindow(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28StartMouseMovingWindowOrNodeEP11ImGuiWindowP13ImGuiDockNodeb"]
    pub fn ImGui_StartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv"]
    pub fn ImGui_UpdateMouseMovingWindowNewFrame();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv"]
    pub fn ImGui_UpdateMouseMovingWindowEndFrame();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook"]
    pub fn ImGui_AddContextHook(
        context: *mut ImGuiContext,
        hook: *const ImGuiContextHook,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17RemoveContextHookEP12ImGuiContextj"]
    pub fn ImGui_RemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType"]
    pub fn ImGui_CallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26TranslateWindowsInViewportEP14ImGuiViewportPRK6ImVec2S4_S4_S4_"]
    pub fn ImGui_TranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: *const ImVec2,
        new_pos: *const ImVec2,
        old_size: *const ImVec2,
        new_size: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22ScaleWindowsInViewportEP14ImGuiViewportPf"]
    pub fn ImGui_ScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DestroyPlatformWindowEP14ImGuiViewportP"]
    pub fn ImGui_DestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP"]
    pub fn ImGui_SetWindowViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetCurrentViewportEP11ImGuiWindowP14ImGuiViewportP"]
    pub fn ImGui_SetCurrentViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26GetViewportPlatformMonitorEP13ImGuiViewport"]
    pub fn ImGui_GetViewportPlatformMonitor(
        viewport: *mut ImGuiViewport,
    ) -> *const ImGuiPlatformMonitor;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui42FindHoveredViewportFromPlatformWindowStackERK6ImVec2"]
    pub fn ImGui_FindHoveredViewportFromPlatformWindowStack(
        mouse_platform_pos: *const ImVec2,
    ) -> *mut ImGuiViewportP;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20MarkIniSettingsDirtyEv"]
    pub fn ImGui_MarkIniSettingsDirty();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow"]
    pub fn ImGui_MarkIniSettingsDirty1(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16ClearIniSettingsEv"]
    pub fn ImGui_ClearIniSettings();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler"]
    pub fn ImGui_AddSettingsHandler(handler: *const ImGuiSettingsHandler);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21RemoveSettingsHandlerEPKc"]
    pub fn ImGui_RemoveSettingsHandler(type_name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19FindSettingsHandlerEPKc"]
    pub fn ImGui_FindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23CreateNewWindowSettingsEPKc"]
    pub fn ImGui_CreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22FindWindowSettingsByIDEj"]
    pub fn ImGui_FindWindowSettingsByID(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26FindWindowSettingsByWindowEP11ImGuiWindow"]
    pub fn ImGui_FindWindowSettingsByWindow(window: *mut ImGuiWindow) -> *mut ImGuiWindowSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19ClearWindowSettingsEPKc"]
    pub fn ImGui_ClearWindowSettings(name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi"]
    pub fn ImGui_LocalizeRegisterEntries(
        entries: *const ImGuiLocEntry,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollXEP11ImGuiWindowf"]
    pub fn ImGui_SetScrollX1(window: *mut ImGuiWindow, scroll_x: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetScrollYEP11ImGuiWindowf"]
    pub fn ImGui_SetScrollY1(window: *mut ImGuiWindow, scroll_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff"]
    pub fn ImGui_SetScrollFromPosX1(window: *mut ImGuiWindow, local_x: f32, center_x_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff"]
    pub fn ImGui_SetScrollFromPosY1(window: *mut ImGuiWindow, local_y: f32, center_y_ratio: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ScrollToItemEi"]
    pub fn ImGui_ScrollToItem(flags: ImGuiScrollFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti"]
    pub fn ImGui_ScrollToRect(
        window: *mut ImGuiWindow,
        rect: *const ImRect,
        flags: ImGuiScrollFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti"]
    pub fn ImGui_ScrollToRectEx(
        window: *mut ImGuiWindow,
        rect: *const ImRect,
        flags: ImGuiScrollFlags,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SetActiveIDEjP11ImGuiWindow"]
    pub fn ImGui_SetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10SetFocusIDEjP11ImGuiWindow"]
    pub fn ImGui_SetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ClearActiveIDEv"]
    pub fn ImGui_ClearActiveID();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetHoveredIDEv"]
    pub fn ImGui_GetHoveredID() -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetHoveredIDEj"]
    pub fn ImGui_SetHoveredID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11KeepAliveIDEj"]
    pub fn ImGui_KeepAliveID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14MarkItemEditedEj"]
    pub fn ImGui_MarkItemEdited(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushOverrideIDEj"]
    pub fn ImGui_PushOverrideID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetIDWithSeedEPKcS1_j"]
    pub fn ImGui_GetIDWithSeed(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13GetIDWithSeedEij"]
    pub fn ImGui_GetIDWithSeed1(n: ::std::os::raw::c_int, seed: ImGuiID) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ItemSizeERK6ImVec2f"]
    pub fn ImGui_ItemSize(size: *const ImVec2, text_baseline_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui7ItemAddERK6ImRectjPS1_i"]
    pub fn ImGui_ItemAdd(
        bb: *const ImRect,
        id: ImGuiID,
        nav_bb: *const ImRect,
        extra_flags: ImGuiItemFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ItemHoverableERK6ImRectji"]
    pub fn ImGui_ItemHoverable(bb: *const ImRect, id: ImGuiID, item_flags: ImGuiItemFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24IsWindowContentHoverableEP11ImGuiWindowi"]
    pub fn ImGui_IsWindowContentHoverable(
        window: *mut ImGuiWindow,
        flags: ImGuiHoveredFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsClippedExERK6ImRectj"]
    pub fn ImGui_IsClippedEx(bb: *const ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetLastItemDataEjiiRK6ImRect"]
    pub fn ImGui_SetLastItemData(
        item_id: ImGuiID,
        item_flags: ImGuiItemFlags,
        status_flags: ImGuiItemStatusFlags,
        item_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12CalcItemSizeE6ImVec2ff"]
    pub fn ImGui_CalcItemSize(size: ImVec2, default_w: f32, default_h: f32) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f"]
    pub fn ImGui_CalcWrapWidthForPos(pos: *const ImVec2, wrap_pos_x: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20PushMultiItemsWidthsEif"]
    pub fn ImGui_PushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ShrinkWidthsEP20ImGuiShrinkWidthItemif"]
    pub fn ImGui_ShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetStyleVarInfoEi"]
    pub fn ImGui_GetStyleVarInfo(idx: ImGuiStyleVar) -> *const ImGuiDataVarInfo;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui29BeginDisabledOverrideReenableEv"]
    pub fn ImGui_BeginDisabledOverrideReenable();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27EndDisabledOverrideReenableEv"]
    pub fn ImGui_EndDisabledOverrideReenable();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8LogBeginEii"]
    pub fn ImGui_LogBegin(flags: ImGuiLogFlags, auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11LogToBufferEi"]
    pub fn ImGui_LogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_"]
    pub fn ImGui_LogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24LogSetNextTextDecorationEPKcS1_"]
    pub fn ImGui_LogSetNextTextDecoration(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginChildExEPKcjRK6ImVec2ii"]
    pub fn ImGui_BeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: *const ImVec2,
        child_flags: ImGuiChildFlags,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginPopupExEji"]
    pub fn ImGui_BeginPopupEx(id: ImGuiID, extra_window_flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11OpenPopupExEji"]
    pub fn ImGui_OpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17ClosePopupToLevelEib"]
    pub fn ImGui_ClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb"]
    pub fn ImGui_ClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ClosePopupsExceptModalsEv"]
    pub fn ImGui_ClosePopupsExceptModals();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsPopupOpenEji"]
    pub fn ImGui_IsPopupOpen1(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow"]
    pub fn ImGui_GetPopupAllowedExtentRect(window: *mut ImGuiWindow) -> ImRect;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20GetTopMostPopupModalEv"]
    pub fn ImGui_GetTopMostPopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30GetTopMostAndVisiblePopupModalEv"]
    pub fn ImGui_GetTopMostAndVisiblePopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17FindBlockingModalEP11ImGuiWindow"]
    pub fn ImGui_FindBlockingModal(window: *mut ImGuiWindow) -> *mut ImGuiWindow;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow"]
    pub fn ImGui_FindBestWindowPosForPopup(window: *mut ImGuiWindow) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_P8ImGuiDirRK6ImRectS7_24ImGuiPopupPositionPolicy"]
    pub fn ImGui_FindBestWindowPosForPopupEx(
        ref_pos: *const ImVec2,
        size: *const ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: *const ImRect,
        r_avoid: *const ImRect,
        policy: ImGuiPopupPositionPolicy,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14BeginTooltipExEii"]
    pub fn ImGui_BeginTooltipEx(
        tooltip_flags: ImGuiTooltipFlags,
        extra_window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18BeginTooltipHiddenEv"]
    pub fn ImGui_BeginTooltipHidden() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20BeginViewportSideBarEPKcP13ImGuiViewport8ImGuiDirfi"]
    pub fn ImGui_BeginViewportSideBar(
        name: *const ::std::os::raw::c_char,
        viewport: *mut ImGuiViewport,
        dir: ImGuiDir,
        size: f32,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11BeginMenuExEPKcS1_b"]
    pub fn ImGui_BeginMenuEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10MenuItemExEPKcS1_S1_bb"]
    pub fn ImGui_MenuItemEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15BeginComboPopupEjRK6ImRecti"]
    pub fn ImGui_BeginComboPopup(
        popup_id: ImGuiID,
        bb: *const ImRect,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17BeginComboPreviewEv"]
    pub fn ImGui_BeginComboPreview() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15EndComboPreviewEv"]
    pub fn ImGui_EndComboPreview();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13NavInitWindowEP11ImGuiWindowb"]
    pub fn ImGui_NavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25NavInitRequestApplyResultEv"]
    pub fn ImGui_NavInitRequestApplyResult();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28NavMoveRequestButNoResultYetEv"]
    pub fn ImGui_NavMoveRequestButNoResultYet() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20NavMoveRequestSubmitE8ImGuiDirS0_ii"]
    pub fn ImGui_NavMoveRequestSubmit(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21NavMoveRequestForwardE8ImGuiDirS0_ii"]
    pub fn ImGui_NavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData"]
    pub fn ImGui_NavMoveRequestResolveWithLastItem(result: *mut ImGuiNavItemData);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui37NavMoveRequestResolveWithPastTreeNodeEP16ImGuiNavItemDataP22ImGuiTreeNodeStackData"]
    pub fn ImGui_NavMoveRequestResolveWithPastTreeNode(
        result: *mut ImGuiNavItemData,
        tree_node_data: *mut ImGuiTreeNodeStackData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20NavMoveRequestCancelEv"]
    pub fn ImGui_NavMoveRequestCancel();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25NavMoveRequestApplyResultEv"]
    pub fn ImGui_NavMoveRequestApplyResult();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi"]
    pub fn ImGui_NavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21NavHighlightActivatedEj"]
    pub fn ImGui_NavHighlightActivated(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27NavClearPreferredPosForAxisE9ImGuiAxis"]
    pub fn ImGui_NavClearPreferredPosForAxis(axis: ImGuiAxis);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28SetNavCursorVisibleAfterMoveEv"]
    pub fn ImGui_SetNavCursorVisibleAfterMove();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui39NavUpdateCurrentWindowIsScrollPushableXEv"]
    pub fn ImGui_NavUpdateCurrentWindowIsScrollPushableX();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12SetNavWindowEP11ImGuiWindow"]
    pub fn ImGui_SetNavWindow(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect"]
    pub fn ImGui_SetNavID(
        id: ImGuiID,
        nav_layer: ImGuiNavLayer,
        focus_scope_id: ImGuiID,
        rect_rel: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SetNavFocusScopeEj"]
    pub fn ImGui_SetNavFocusScope(focus_scope_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9FocusItemEv"]
    pub fn ImGui_FocusItem();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16ActivateItemByIDEj"]
    pub fn ImGui_ActivateItemByID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13FixupKeyChordEi"]
    pub fn ImGui_FixupKeyChord(key_chord: ImGuiKeyChord) -> ImGuiKeyChord;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10GetKeyDataEP12ImGuiContext8ImGuiKey"]
    pub fn ImGui_GetKeyData(ctx: *mut ImGuiContext, key: ImGuiKey) -> *mut ImGuiKeyData;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15GetKeyChordNameEi"]
    pub fn ImGui_GetKeyChordName(key_chord: ImGuiKeyChord) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24IsMouseDragPastThresholdEif"]
    pub fn ImGui_IsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17GetKeyMagnitude2dE8ImGuiKeyS0_S0_S0_"]
    pub fn ImGui_GetKeyMagnitude2d(
        key_left: ImGuiKey,
        key_right: ImGuiKey,
        key_up: ImGuiKey,
        key_down: ImGuiKey,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis"]
    pub fn ImGui_GetNavTweakPressedAmount(axis: ImGuiAxis) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25CalcTypematicRepeatAmountEffff"]
    pub fn ImGui_CalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetTypematicRepeatRateEiPfS0_"]
    pub fn ImGui_GetTypematicRepeatRate(
        flags: ImGuiInputFlags,
        repeat_delay: *mut f32,
        repeat_rate: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TeleportMousePosERK6ImVec2"]
    pub fn ImGui_TeleportMousePos(pos: *const ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv"]
    pub fn ImGui_SetActiveIdUsingAllKeyboardKeys();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11GetKeyOwnerE8ImGuiKey"]
    pub fn ImGui_GetKeyOwner(key: ImGuiKey) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji"]
    pub fn ImGui_SetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23SetKeyOwnersForKeyChordEiji"]
    pub fn ImGui_SetKeyOwnersForKeyChord(
        key: ImGuiKeyChord,
        owner_id: ImGuiID,
        flags: ImGuiInputFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi"]
    pub fn ImGui_SetItemKeyOwner1(key: ImGuiKey, flags: ImGuiInputFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj"]
    pub fn ImGui_TestKeyOwner(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9IsKeyDownE8ImGuiKeyj"]
    pub fn ImGui_IsKeyDown1(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12IsKeyPressedE8ImGuiKeyij"]
    pub fn ImGui_IsKeyPressed1(key: ImGuiKey, flags: ImGuiInputFlags, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj"]
    pub fn ImGui_IsKeyReleased1(key: ImGuiKey, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17IsKeyChordPressedEiij"]
    pub fn ImGui_IsKeyChordPressed1(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11IsMouseDownEij"]
    pub fn ImGui_IsMouseDown1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14IsMouseClickedEiij"]
    pub fn ImGui_IsMouseClicked1(
        button: ImGuiMouseButton,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15IsMouseReleasedEij"]
    pub fn ImGui_IsMouseReleased1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20IsMouseDoubleClickedEij"]
    pub fn ImGui_IsMouseDoubleClicked1(button: ImGuiMouseButton, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ShortcutEiij"]
    pub fn ImGui_Shortcut1(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18SetShortcutRoutingEiij"]
    pub fn ImGui_SetShortcutRouting(
        key_chord: ImGuiKeyChord,
        flags: ImGuiInputFlags,
        owner_id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TestShortcutRoutingEij"]
    pub fn ImGui_TestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetShortcutRoutingDataEi"]
    pub fn ImGui_GetShortcutRoutingData(key_chord: ImGuiKeyChord) -> *mut ImGuiKeyRoutingData;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockContextInitializeEP12ImGuiContext"]
    pub fn ImGui_DockContextInitialize(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19DockContextShutdownEP12ImGuiContext"]
    pub fn ImGui_DockContextShutdown(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockContextClearNodesEP12ImGuiContextjb"]
    pub fn ImGui_DockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23DockContextRebuildNodesEP12ImGuiContext"]
    pub fn ImGui_DockContextRebuildNodes(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui34DockContextNewFrameUpdateUndockingEP12ImGuiContext"]
    pub fn ImGui_DockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui32DockContextNewFrameUpdateDockingEP12ImGuiContext"]
    pub fn ImGui_DockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19DockContextEndFrameEP12ImGuiContext"]
    pub fn ImGui_DockContextEndFrame(ctx: *mut ImGuiContext);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DockContextGenNodeIDEP12ImGuiContext"]
    pub fn ImGui_DockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DockContextQueueDockEP12ImGuiContextP11ImGuiWindowP13ImGuiDockNodeS3_8ImGuiDirfb"]
    pub fn ImGui_DockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28DockContextQueueUndockWindowEP12ImGuiContextP11ImGuiWindow"]
    pub fn ImGui_DockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26DockContextQueueUndockNodeEP12ImGuiContextP13ImGuiDockNode"]
    pub fn ImGui_DockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30DockContextProcessUndockWindowEP12ImGuiContextP11ImGuiWindowb"]
    pub fn ImGui_DockContextProcessUndockWindow(
        ctx: *mut ImGuiContext,
        window: *mut ImGuiWindow,
        clear_persistent_docking_ref: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28DockContextProcessUndockNodeEP12ImGuiContextP13ImGuiDockNode"]
    pub fn ImGui_DockContextProcessUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui32DockContextCalcDropPosForDockingEP11ImGuiWindowP13ImGuiDockNodeS1_S3_8ImGuiDirbP6ImVec2"]
    pub fn ImGui_DockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload_window: *mut ImGuiWindow,
        payload_node: *mut ImGuiDockNode,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23DockContextFindNodeByIDEP12ImGuiContextj"]
    pub fn ImGui_DockContextFindNodeByID(ctx: *mut ImGuiContext, id: ImGuiID)
        -> *mut ImGuiDockNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui33DockNodeWindowMenuHandler_DefaultEP12ImGuiContextP13ImGuiDockNodeP11ImGuiTabBar"]
    pub fn ImGui_DockNodeWindowMenuHandler_Default(
        ctx: *mut ImGuiContext,
        node: *mut ImGuiDockNode,
        tab_bar: *mut ImGuiTabBar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24DockNodeBeginAmendTabBarEP13ImGuiDockNode"]
    pub fn ImGui_DockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22DockNodeEndAmendTabBarEv"]
    pub fn ImGui_DockNodeEndAmendTabBar();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28GetWindowAlwaysWantOwnTabBarEP11ImGuiWindow"]
    pub fn ImGui_GetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11BeginDockedEP11ImGuiWindowPb"]
    pub fn ImGui_BeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27BeginDockableDragDropSourceEP11ImGuiWindow"]
    pub fn ImGui_BeginDockableDragDropSource(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27BeginDockableDragDropTargetEP11ImGuiWindow"]
    pub fn ImGui_BeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13SetWindowDockEP11ImGuiWindowji"]
    pub fn ImGui_SetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockBuilderDockWindowEPKcj"]
    pub fn ImGui_DockBuilderDockWindow(
        window_name: *const ::std::os::raw::c_char,
        node_id: ImGuiID,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18DockBuilderGetNodeEj"]
    pub fn ImGui_DockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18DockBuilderAddNodeEji"]
    pub fn ImGui_DockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockBuilderRemoveNodeEj"]
    pub fn ImGui_DockBuilderRemoveNode(node_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui34DockBuilderRemoveNodeDockedWindowsEjb"]
    pub fn ImGui_DockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31DockBuilderRemoveNodeChildNodesEj"]
    pub fn ImGui_DockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DockBuilderSetNodePosEj6ImVec2"]
    pub fn ImGui_DockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22DockBuilderSetNodeSizeEj6ImVec2"]
    pub fn ImGui_DockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DockBuilderSplitNodeEj8ImGuiDirfPjS1_"]
    pub fn ImGui_DockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24DockBuilderCopyDockSpaceEjjP8ImVectorIPKcE"]
    pub fn ImGui_DockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector<*const ::std::os::raw::c_char>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19DockBuilderCopyNodeEjjP8ImVectorIjE"]
    pub fn ImGui_DockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector<ImGuiID>,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui29DockBuilderCopyWindowSettingsEPKcS1_"]
    pub fn ImGui_DockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DockBuilderFinishEj"]
    pub fn ImGui_DockBuilderFinish(node_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14PushFocusScopeEj"]
    pub fn ImGui_PushFocusScope(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13PopFocusScopeEv"]
    pub fn ImGui_PopFocusScope();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16IsDragDropActiveEv"]
    pub fn ImGui_IsDragDropActive() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj"]
    pub fn ImGui_BeginDragDropTargetCustom(bb: *const ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ClearDragDropEv"]
    pub fn ImGui_ClearDragDrop();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv"]
    pub fn ImGui_IsDragDropPayloadBeingAccepted() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24RenderDragDropTargetRectERK6ImRectS2_"]
    pub fn ImGui_RenderDragDropTargetRect(bb: *const ImRect, item_clip_rect: *const ImRect);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetTypingSelectRequestEi"]
    pub fn ImGui_GetTypingSelectRequest(
        flags: ImGuiTypingSelectFlags,
    ) -> *mut ImGuiTypingSelectRequest;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TypingSelectFindMatchEP24ImGuiTypingSelectRequestiPFPKcPviES4_i"]
    pub fn ImGui_TypingSelectFindMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui35TypingSelectFindNextSingleCharMatchEP24ImGuiTypingSelectRequestiPFPKcPviES4_i"]
    pub fn ImGui_TypingSelectFindNextSingleCharMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
        nav_item_idx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui32TypingSelectFindBestLeadingMatchEP24ImGuiTypingSelectRequestiPFPKcPviES4_"]
    pub fn ImGui_TypingSelectFindBestLeadingMatch(
        req: *mut ImGuiTypingSelectRequest,
        items_count: ::std::os::raw::c_int,
        get_item_name_func: ::std::option::Option<
            extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> *const ::std::os::raw::c_char,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14BeginBoxSelectERK6ImRectP11ImGuiWindowji"]
    pub fn ImGui_BeginBoxSelect(
        scope_rect: *const ImRect,
        window: *mut ImGuiWindow,
        box_select_id: ImGuiID,
        ms_flags: ImGuiMultiSelectFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12EndBoxSelectERK6ImRecti"]
    pub fn ImGui_EndBoxSelect(scope_rect: *const ImRect, ms_flags: ImGuiMultiSelectFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21MultiSelectItemHeaderEjPbPi"]
    pub fn ImGui_MultiSelectItemHeader(
        id: ImGuiID,
        p_selected: *mut bool,
        p_button_flags: *mut ImGuiButtonFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21MultiSelectItemFooterEjPbS0_"]
    pub fn ImGui_MultiSelectItemFooter(id: ImGuiID, p_selected: *mut bool, p_pressed: *mut bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20MultiSelectAddSetAllEP24ImGuiMultiSelectTempDatab"]
    pub fn ImGui_MultiSelectAddSetAll(ms: *mut ImGuiMultiSelectTempData, selected: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22MultiSelectAddSetRangeEP24ImGuiMultiSelectTempDatabixx"]
    pub fn ImGui_MultiSelectAddSetRange(
        ms: *mut ImGuiMultiSelectTempData,
        selected: bool,
        range_dir: ::std::os::raw::c_int,
        first_item: ImGuiSelectionUserData,
        last_item: ImGuiSelectionUserData,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui33SetWindowClipRectBeforeSetChannelEP11ImGuiWindowRK6ImRect"]
    pub fn ImGui_SetWindowClipRectBeforeSetChannel(
        window: *mut ImGuiWindow,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginColumnsEPKcii"]
    pub fn ImGui_BeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10EndColumnsEv"]
    pub fn ImGui_EndColumns();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18PushColumnClipRectEi"]
    pub fn ImGui_PushColumnClipRect(column_index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21PushColumnsBackgroundEv"]
    pub fn ImGui_PushColumnsBackground();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20PopColumnsBackgroundEv"]
    pub fn ImGui_PopColumnsBackground();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12GetColumnsIDEPKci"]
    pub fn ImGui_GetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19FindOrCreateColumnsEP11ImGuiWindowj"]
    pub fn ImGui_FindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID)
        -> *mut ImGuiOldColumns;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23GetColumnOffsetFromNormEPK15ImGuiOldColumnsf"]
    pub fn ImGui_GetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23GetColumnNormFromOffsetEPK15ImGuiOldColumnsf"]
    pub fn ImGui_GetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20TableOpenContextMenuEi"]
    pub fn ImGui_TableOpenContextMenu(column_n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableSetColumnWidthEif"]
    pub fn ImGui_TableSetColumnWidth(column_n: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27TableSetColumnSortDirectionEi18ImGuiSortDirectionb"]
    pub fn ImGui_TableSetColumnSortDirection(
        column_n: ::std::os::raw::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableGetHoveredRowEv"]
    pub fn ImGui_TableGetHoveredRow() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23TableGetHeaderRowHeightEv"]
    pub fn ImGui_TableGetHeaderRowHeight() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui33TableGetHeaderAngledMaxLabelWidthEv"]
    pub fn ImGui_TableGetHeaderAngledMaxLabelWidth() -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26TablePushBackgroundChannelEv"]
    pub fn ImGui_TablePushBackgroundChannel();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25TablePopBackgroundChannelEv"]
    pub fn ImGui_TablePopBackgroundChannel();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23TableAngledHeadersRowExEjffPK20ImGuiTableHeaderDatai"]
    pub fn ImGui_TableAngledHeadersRowEx(
        row_id: ImGuiID,
        angle: f32,
        max_label_width: f32,
        data: *const ImGuiTableHeaderData,
        data_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TableFindByIDEj"]
    pub fn ImGui_TableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12BeginTableExEPKcjiiRK6ImVec2f"]
    pub fn ImGui_BeginTableEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: *const ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20TableBeginInitMemoryEP10ImGuiTablei"]
    pub fn ImGui_TableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23TableBeginApplyRequestsEP10ImGuiTable"]
    pub fn ImGui_TableBeginApplyRequests(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableSetupDrawChannelsEP10ImGuiTable"]
    pub fn ImGui_TableSetupDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TableUpdateLayoutEP10ImGuiTable"]
    pub fn ImGui_TableUpdateLayout(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableUpdateBordersEP10ImGuiTable"]
    pub fn ImGui_TableUpdateBorders(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui33TableUpdateColumnsWeightFromWidthEP10ImGuiTable"]
    pub fn ImGui_TableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TableDrawBordersEP10ImGuiTable"]
    pub fn ImGui_TableDrawBorders(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27TableDrawDefaultContextMenuEP10ImGuiTablei"]
    pub fn ImGui_TableDrawDefaultContextMenu(
        table: *mut ImGuiTable,
        flags_for_section_to_display: ImGuiTableFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26TableBeginContextMenuPopupEP10ImGuiTable"]
    pub fn ImGui_TableBeginContextMenuPopup(table: *mut ImGuiTable) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableMergeDrawChannelsEP10ImGuiTable"]
    pub fn ImGui_TableMergeDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableSortSpecsSanitizeEP10ImGuiTable"]
    pub fn ImGui_TableSortSpecsSanitize(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableSortSpecsBuildEP10ImGuiTable"]
    pub fn ImGui_TableSortSpecsBuild(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31TableGetColumnNextSortDirectionEP16ImGuiTableColumn"]
    pub fn ImGui_TableGetColumnNextSortDirection(
        column: *mut ImGuiTableColumn,
    ) -> ImGuiSortDirection;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui27TableFixColumnSortDirectionEP10ImGuiTableP16ImGuiTableColumn"]
    pub fn ImGui_TableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23TableGetColumnWidthAutoEP10ImGuiTableP16ImGuiTableColumn"]
    pub fn ImGui_TableGetColumnWidthAuto(
        table: *mut ImGuiTable,
        column: *mut ImGuiTableColumn,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TableBeginRowEP10ImGuiTable"]
    pub fn ImGui_TableBeginRow(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TableEndRowEP10ImGuiTable"]
    pub fn ImGui_TableEndRow(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14TableBeginCellEP10ImGuiTablei"]
    pub fn ImGui_TableBeginCell(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TableEndCellEP10ImGuiTable"]
    pub fn ImGui_TableEndCell(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableGetCellBgRectEPK10ImGuiTablei"]
    pub fn ImGui_TableGetCellBgRect(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> ImRect;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableGetColumnNameEPK10ImGuiTablei"]
    pub fn ImGui_TableGetColumnName1(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableGetColumnResizeIDEP10ImGuiTableii"]
    pub fn ImGui_TableGetColumnResizeID(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23TableCalcMaxColumnWidthEPK10ImGuiTablei"]
    pub fn ImGui_TableCalcMaxColumnWidth(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui29TableSetColumnWidthAutoSingleEP10ImGuiTablei"]
    pub fn ImGui_TableSetColumnWidthAutoSingle(
        table: *mut ImGuiTable,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26TableSetColumnWidthAutoAllEP10ImGuiTable"]
    pub fn ImGui_TableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11TableRemoveEP10ImGuiTable"]
    pub fn ImGui_TableRemove(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30TableGcCompactTransientBuffersEP10ImGuiTable"]
    pub fn ImGui_TableGcCompactTransientBuffers(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30TableGcCompactTransientBuffersEP18ImGuiTableTempData"]
    pub fn ImGui_TableGcCompactTransientBuffers1(table: *mut ImGuiTableTempData);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TableGcCompactSettingsEv"]
    pub fn ImGui_TableGcCompactSettings();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TableLoadSettingsEP10ImGuiTable"]
    pub fn ImGui_TableLoadSettings(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TableSaveSettingsEP10ImGuiTable"]
    pub fn ImGui_TableSaveSettings(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TableResetSettingsEP10ImGuiTable"]
    pub fn ImGui_TableResetSettings(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TableGetBoundSettingsEP10ImGuiTable"]
    pub fn ImGui_TableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31TableSettingsAddSettingsHandlerEv"]
    pub fn ImGui_TableSettingsAddSettingsHandler();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TableSettingsCreateEji"]
    pub fn ImGui_TableSettingsCreate(
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21TableSettingsFindByIDEj"]
    pub fn ImGui_TableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13BeginTabBarExEP11ImGuiTabBarRK6ImRecti"]
    pub fn ImGui_BeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: *const ImRect,
        flags: ImGuiTabBarFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TabBarFindTabByIDEP11ImGuiTabBarj"]
    pub fn ImGui_TabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID)
        -> *mut ImGuiTabItem;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20TabBarFindTabByOrderEP11ImGuiTabBari"]
    pub fn ImGui_TabBarFindTabByOrder(
        tab_bar: *mut ImGuiTabBar,
        order: ::std::os::raw::c_int,
    ) -> *mut ImGuiTabItem;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui48TabBarFindMostRecentlySelectedTabForActiveWindowEP11ImGuiTabBar"]
    pub fn ImGui_TabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19TabBarGetCurrentTabEP11ImGuiTabBar"]
    pub fn ImGui_TabBarGetCurrentTab(tab_bar: *mut ImGuiTabBar) -> *mut ImGuiTabItem;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TabBarGetTabNameEP11ImGuiTabBarP12ImGuiTabItem"]
    pub fn ImGui_TabBarGetTabName(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12TabBarAddTabEP11ImGuiTabBariP11ImGuiWindow"]
    pub fn ImGui_TabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TabBarRemoveTabEP11ImGuiTabBarj"]
    pub fn ImGui_TabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14TabBarCloseTabEP11ImGuiTabBarP12ImGuiTabItem"]
    pub fn ImGui_TabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TabBarQueueFocusEP11ImGuiTabBarP12ImGuiTabItem"]
    pub fn ImGui_TabBarQueueFocus(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TabBarQueueFocusEP11ImGuiTabBarPKc"]
    pub fn ImGui_TabBarQueueFocus1(
        tab_bar: *mut ImGuiTabBar,
        tab_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TabBarQueueReorderEP11ImGuiTabBarP12ImGuiTabItemi"]
    pub fn ImGui_TabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30TabBarQueueReorderFromMousePosEP11ImGuiTabBarP12ImGuiTabItem6ImVec2"]
    pub fn ImGui_TabBarQueueReorderFromMousePos(
        tab_bar: *mut ImGuiTabBar,
        tab: *mut ImGuiTabItem,
        mouse_pos: ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20TabBarProcessReorderEP11ImGuiTabBar"]
    pub fn ImGui_TabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9TabItemExEP11ImGuiTabBarPKcPbiP11ImGuiWindow"]
    pub fn ImGui_TabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14TabItemSpacingEPKcif"]
    pub fn ImGui_TabItemSpacing(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTabItemFlags,
        width: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TabItemCalcSizeEPKcb"]
    pub fn ImGui_TabItemCalcSize(
        label: *const ::std::os::raw::c_char,
        has_close_button_or_unsaved_marker: bool,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TabItemCalcSizeEP11ImGuiWindow"]
    pub fn ImGui_TabItemCalcSize1(window: *mut ImGuiWindow) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17TabItemBackgroundEP10ImDrawListRK6ImRectij"]
    pub fn ImGui_TabItemBackground(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26TabItemLabelAndCloseButtonEP10ImDrawListRK6ImRecti6ImVec2PKcjjbPbS8_"]
    pub fn ImGui_TabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: *const ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui10RenderTextE6ImVec2PKcS2_b"]
    pub fn ImGui_RenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f"]
    pub fn ImGui_RenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect"]
    pub fn ImGui_RenderTextClipped(
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect"]
    pub fn ImGui_RenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: *const ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_"]
    pub fn ImGui_RenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: *const ImVec2,
        pos_max: *const ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RenderFrameE6ImVec2S0_jbf"]
    pub fn ImGui_RenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        borders: bool,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f"]
    pub fn ImGui_RenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui36RenderColorRectWithAlphaCheckerboardEP10ImDrawList6ImVec2S2_jfS2_fi"]
    pub fn ImGui_RenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15RenderNavCursorERK6ImRectji"]
    pub fn ImGui_RenderNavCursor(bb: *const ImRect, id: ImGuiID, flags: ImGuiNavRenderCursorFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19FindRenderedTextEndEPKcS1_"]
    pub fn ImGui_FindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj"]
    pub fn ImGui_RenderMouseCursor(
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11RenderArrowEP10ImDrawList6ImVec2j8ImGuiDirf"]
    pub fn ImGui_RenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12RenderBulletEP10ImDrawList6ImVec2j"]
    pub fn ImGui_RenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15RenderCheckMarkEP10ImDrawList6ImVec2jf"]
    pub fn ImGui_RenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21RenderArrowPointingAtEP10ImDrawList6ImVec2S2_8ImGuiDirj"]
    pub fn ImGui_RenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19RenderArrowDockMenuEP10ImDrawList6ImVec2fj"]
    pub fn ImGui_RenderArrowDockMenu(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        sz: f32,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22RenderRectFilledRangeHEP10ImDrawListRK6ImRectjfff"]
    pub fn ImGui_RenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: *const ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24RenderRectFilledWithHoleEP10ImDrawListRK6ImRectS4_jf"]
    pub fn ImGui_RenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: *const ImRect,
        inner: *const ImRect,
        col: ImU32,
        rounding: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30CalcRoundingFlagsForRectInRectERK6ImRectS2_f"]
    pub fn ImGui_CalcRoundingFlagsForRectInRect(
        r_in: *const ImRect,
        r_outer: *const ImRect,
        threshold: f32,
    ) -> ImDrawFlags;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6TextExEPKcS1_i"]
    pub fn ImGui_TextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ButtonExEPKcRK6ImVec2i"]
    pub fn ImGui_ButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: *const ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ArrowButtonExEPKc8ImGuiDir6ImVec2i"]
    pub fn ImGui_ArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ImageButtonExEjyRK6ImVec2S2_S2_RK6ImVec4S5_i"]
    pub fn ImGui_ImageButtonEx(
        id: ImGuiID,
        user_texture_id: ImTextureID,
        image_size: *const ImVec2,
        uv0: *const ImVec2,
        uv1: *const ImVec2,
        bg_col: *const ImVec4,
        tint_col: *const ImVec4,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11SeparatorExEif"]
    pub fn ImGui_SeparatorEx(flags: ImGuiSeparatorFlags, thickness: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15SeparatorTextExEjPKcS1_f"]
    pub fn ImGui_SeparatorTextEx(
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
        extra_width: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CheckboxFlagsEPKcPxx"]
    pub fn ImGui_CheckboxFlags2(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImS64,
        flags_value: ImS64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13CheckboxFlagsEPKcPyy"]
    pub fn ImGui_CheckboxFlags3(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImU64,
        flags_value: ImU64,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11CloseButtonEjRK6ImVec2"]
    pub fn ImGui_CloseButton(id: ImGuiID, pos: *const ImVec2) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14CollapseButtonEjRK6ImVec2P13ImGuiDockNode"]
    pub fn ImGui_CollapseButton(
        id: ImGuiID,
        pos: *const ImVec2,
        dock_node: *mut ImGuiDockNode,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui9ScrollbarE9ImGuiAxis"]
    pub fn ImGui_Scrollbar(axis: ImGuiAxis);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11ScrollbarExERK6ImRectj9ImGuiAxisPxxxi"]
    pub fn ImGui_ScrollbarEx(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut ImS64,
        avail_v: ImS64,
        contents_v: ImS64,
        draw_rounding_flags: ImDrawFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22GetWindowScrollbarRectEP11ImGuiWindow9ImGuiAxis"]
    pub fn ImGui_GetWindowScrollbarRect(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImRect;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20GetWindowScrollbarIDEP11ImGuiWindow9ImGuiAxis"]
    pub fn ImGui_GetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi"]
    pub fn ImGui_GetWindowResizeCornerID(
        window: *mut ImGuiWindow,
        n: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindow8ImGuiDir"]
    pub fn ImGui_GetWindowResizeBorderID(window: *mut ImGuiWindow, dir: ImGuiDir) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i"]
    pub fn ImGui_ButtonBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12DragBehaviorEjiPvfPKvS2_PKci"]
    pub fn ImGui_DragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14SliderBehaviorERK6ImRectjiPvPKvS5_PKciPS0_"]
    pub fn ImGui_SliderBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16SplitterBehaviorERK6ImRectj9ImGuiAxisPfS4_ffffj"]
    pub fn ImGui_SplitterBehavior(
        bb: *const ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
        bg_col: ImU32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16TreeNodeBehaviorEjiPKcS1_"]
    pub fn ImGui_TreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18TreePushOverrideIDEj"]
    pub fn ImGui_TreePushOverrideID(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TreeNodeGetOpenEj"]
    pub fn ImGui_TreeNodeGetOpen(storage_id: ImGuiID) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TreeNodeSetOpenEjb"]
    pub fn ImGui_TreeNodeSetOpen(storage_id: ImGuiID, open: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22TreeNodeUpdateNextOpenEji"]
    pub fn ImGui_TreeNodeUpdateNextOpen(storage_id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DataTypeGetInfoEi"]
    pub fn ImGui_DataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DataTypeFormatStringEPciiPKvPKc"]
    pub fn ImGui_DataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DataTypeApplyOpEiiPvPKvS2_"]
    pub fn ImGui_DataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21DataTypeApplyFromTextEPKciPvS1_S2_"]
    pub fn ImGui_DataTypeApplyFromText(
        buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_data_when_empty: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DataTypeCompareEiPKvS1_"]
    pub fn ImGui_DataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13DataTypeClampEiPvPKvS2_"]
    pub fn ImGui_DataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14DataTypeIsZeroEiPKv"]
    pub fn ImGui_DataTypeIsZero(
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui11InputTextExEPKcS1_PciRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv"]
    pub fn ImGui_InputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: *const ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23InputTextDeactivateHookEj"]
    pub fn ImGui_InputTextDeactivateHook(id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13TempInputTextERK6ImRectjPKcPcii"]
    pub fn ImGui_TempInputText(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15TempInputScalarERK6ImRectjPKciPvS4_PKvS7_"]
    pub fn ImGui_TempInputScalar(
        bb: *const ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17SetNextItemRefValEiPv"]
    pub fn ImGui_SetNextItemRefVal(data_type: ImGuiDataType, p_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui12ColorTooltipEPKcPKfi"]
    pub fn ImGui_ColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui21ColorEditOptionsPopupEPKfi"]
    pub fn ImGui_ColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ColorPickerOptionsPopupEPKfi"]
    pub fn ImGui_ColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui6PlotExE13ImGuiPlotTypePKcPFfPviES3_iiS2_ffRK6ImVec2"]
    pub fn ImGui_PlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        size_arg: *const ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui38ShadeVertsLinearColorGradientKeepAlphaEP10ImDrawListii6ImVec2S2_jj"]
    pub fn ImGui_ShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18ShadeVertsLinearUVEP10ImDrawListiiRK6ImVec2S4_S4_S4_b"]
    pub fn ImGui_ShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        clamp: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22ShadeVertsTransformPosEP10ImDrawListiiRK6ImVec2ffS4_"]
    pub fn ImGui_ShadeVertsTransformPos(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        pivot_in: *const ImVec2,
        cos_a: f32,
        sin_a: f32,
        pivot_out: *const ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui29GcCompactTransientMiscBuffersEv"]
    pub fn ImGui_GcCompactTransientMiscBuffers();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow"]
    pub fn ImGui_GcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow"]
    pub fn ImGui_GcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui8ErrorLogEPKc"]
    pub fn ImGui_ErrorLog(msg: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23ErrorRecoveryStoreStateEP23ImGuiErrorRecoveryState"]
    pub fn ImGui_ErrorRecoveryStoreState(state_out: *mut ImGuiErrorRecoveryState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui30ErrorRecoveryTryToRecoverStateEPK23ImGuiErrorRecoveryState"]
    pub fn ImGui_ErrorRecoveryTryToRecoverState(state_in: *const ImGuiErrorRecoveryState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui36ErrorRecoveryTryToRecoverWindowStateEPK23ImGuiErrorRecoveryState"]
    pub fn ImGui_ErrorRecoveryTryToRecoverWindowState(state_in: *const ImGuiErrorRecoveryState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv"]
    pub fn ImGui_ErrorCheckUsingSetCursorPosToExtendParentBoundaries();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui38ErrorCheckEndFrameFinalizeErrorTooltipEv"]
    pub fn ImGui_ErrorCheckEndFrameFinalizeErrorTooltip();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17BeginErrorTooltipEv"]
    pub fn ImGui_BeginErrorTooltip() -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15EndErrorTooltipEv"]
    pub fn ImGui_EndErrorTooltip();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14DebugAllocHookEP19ImGuiDebugAllocInfoiPvm"]
    pub fn ImGui_DebugAllocHook(
        info: *mut ImGuiDebugAllocInfo,
        frame_count: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18DebugDrawCursorPosEj"]
    pub fn ImGui_DebugDrawCursorPos(col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DebugDrawLineExtentsEj"]
    pub fn ImGui_DebugDrawLineExtents(col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DebugDrawItemRectEj"]
    pub fn ImGui_DebugDrawItemRect(col: ImU32);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui34DebugTextUnformattedWithLocateItemEPKcS1_"]
    pub fn ImGui_DebugTextUnformattedWithLocateItem(
        line_begin: *const ::std::os::raw::c_char,
        line_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DebugLocateItemEj"]
    pub fn ImGui_DebugLocateItem(target_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22DebugLocateItemOnHoverEj"]
    pub fn ImGui_DebugLocateItemOnHover(target_id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui34DebugLocateItemResolveWithLastItemEv"]
    pub fn ImGui_DebugLocateItemResolveWithLastItem();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui19DebugBreakClearDataEv"]
    pub fn ImGui_DebugBreakClearData();
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16DebugBreakButtonEPKcS1_"]
    pub fn ImGui_DebugBreakButton(
        label: *const ::std::os::raw::c_char,
        description_of_location: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23DebugBreakButtonTooltipEbPKc"]
    pub fn ImGui_DebugBreakButtonTooltip(
        keyboard_only: bool,
        description_of_location: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas"]
    pub fn ImGui_ShowFontAtlas(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DebugHookIdInfoEjiPKvS1_"]
    pub fn ImGui_DebugHookIdInfo(
        id: ImGuiID,
        data_type: ImGuiDataType,
        data_id: *const ::std::os::raw::c_void,
        data_id_end: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns"]
    pub fn ImGui_DebugNodeColumns(columns: *mut ImGuiOldColumns);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DebugNodeDockNodeEP13ImGuiDockNodePKc"]
    pub fn ImGui_DebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowP14ImGuiViewportPPK10ImDrawListPKc"]
    pub fn ImGui_DebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb"]
    pub fn ImGui_DebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui13DebugNodeFontEP6ImFont"]
    pub fn ImGui_DebugNodeFont(font: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph"]
    pub fn ImGui_DebugNodeFontGlyph(font: *mut ImFont, glyph: *const ImFontGlyph);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc"]
    pub fn ImGui_DebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc"]
    pub fn ImGui_DebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui14DebugNodeTableEP10ImGuiTable"]
    pub fn ImGui_DebugNodeTable(table: *mut ImGuiTable);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui22DebugNodeTableSettingsEP18ImGuiTableSettings"]
    pub fn ImGui_DebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23DebugNodeInputTextStateEP19ImGuiInputTextState"]
    pub fn ImGui_DebugNodeInputTextState(state: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26DebugNodeTypingSelectStateEP22ImGuiTypingSelectState"]
    pub fn ImGui_DebugNodeTypingSelectState(state: *mut ImGuiTypingSelectState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui25DebugNodeMultiSelectStateEP21ImGuiMultiSelectState"]
    pub fn ImGui_DebugNodeMultiSelectState(state: *mut ImGuiMultiSelectState);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc"]
    pub fn ImGui_DebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings"]
    pub fn ImGui_DebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc"]
    pub fn ImGui_DebugNodeWindowsList(
        windows: *mut ImVector<*mut ImGuiWindow>,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_"]
    pub fn ImGui_DebugNodeWindowsListByBeginStackParent(
        windows: *mut *mut ImGuiWindow,
        windows_size: ::std::os::raw::c_int,
        parent_in_begin_stack: *mut ImGuiWindow,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP"]
    pub fn ImGui_DebugNodeViewport(viewport: *mut ImGuiViewportP);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui24DebugNodePlatformMonitorEP20ImGuiPlatformMonitorPKci"]
    pub fn ImGui_DebugNodePlatformMonitor(
        monitor: *mut ImGuiPlatformMonitor,
        label: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui26DebugRenderKeyboardPreviewEP10ImDrawList"]
    pub fn ImGui_DebugRenderKeyboardPreview(draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect"]
    pub fn ImGui_DebugRenderViewportThumbnail(
        draw_list: *mut ImDrawList,
        viewport: *mut ImGuiViewportP,
        bb: *const ImRect,
    );
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 131072;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 196608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 197120;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 536870912;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 1073741824;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiChildFlags__ImGuiChildFlags_None: ImGuiChildFlags_ = 0;
pub const ImGuiChildFlags__ImGuiChildFlags_Borders: ImGuiChildFlags_ = 1;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysUseWindowPadding: ImGuiChildFlags_ = 2;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeX: ImGuiChildFlags_ = 4;
pub const ImGuiChildFlags__ImGuiChildFlags_ResizeY: ImGuiChildFlags_ = 8;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeX: ImGuiChildFlags_ = 16;
pub const ImGuiChildFlags__ImGuiChildFlags_AutoResizeY: ImGuiChildFlags_ = 32;
pub const ImGuiChildFlags__ImGuiChildFlags_AlwaysAutoResize: ImGuiChildFlags_ = 64;
pub const ImGuiChildFlags__ImGuiChildFlags_FrameStyle: ImGuiChildFlags_ = 128;
pub const ImGuiChildFlags__ImGuiChildFlags_NavFlattened: ImGuiChildFlags_ = 256;
pub const ImGuiChildFlags__ImGuiChildFlags_Border: ImGuiChildFlags_ = 1;
pub type ImGuiChildFlags_ = ::std::os::raw::c_uint;
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_AutoClosePopups: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_AllowDuplicateId: ImGuiItemFlags_ = 32;
pub type ImGuiItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EscapeClearsAll: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ParseEmptyRefVal: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_DisplayEmptyRefVal: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ElideLeft: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ =
    262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ =
    2097152;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 4194304;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 8388608;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanLabelWidth: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAllColumns: ImGuiTreeNodeFlags_ = 16384;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_LabelSpanAllColumns: ImGuiTreeNodeFlags_ = 32768;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 131072;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanTextWidth: ImGuiTreeNodeFlags_ = 8192;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoReopen: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 1024;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 2048;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 3072;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_NoAutoClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowOverlap: ImGuiSelectableFlags_ = 16;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Highlight: ImGuiSelectableFlags_ = 32;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_WidthFitPreview: ImGuiComboFlags_ = 128;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_DrawSelectedOverline: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 256;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 384;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 128;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoAssumedClosure: ImGuiTabItemFlags_ = 256;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByItem: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlappedByWindow: ImGuiHoveredFlags_ =
    512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 2048;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 928;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ForTooltip: ImGuiHoveredFlags_ = 4096;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_Stationary: ImGuiHoveredFlags_ = 8192;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNone: ImGuiHoveredFlags_ = 16384;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayShort: ImGuiHoveredFlags_ = 32768;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DelayNormal: ImGuiHoveredFlags_ = 65536;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoSharedDelay: ImGuiHoveredFlags_ = 131072;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingOverCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoUndocking: ImGuiDockNodeFlags_ = 128;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadAutoExpire: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossContext: ImGuiDragDropFlags_ = 64;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_PayloadNoCrossProcess: ImGuiDragDropFlags_ = 128;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_uint;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_Bool: ImGuiDataType_ = 10;
pub const ImGuiDataType__ImGuiDataType_String: ImGuiDataType_ = 11;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 12;
pub type ImGuiDataType_ = ::std::os::raw::c_uint;
pub const ImGuiDir_ImGuiDir_None: ImGuiDir = -1;
pub const ImGuiDir_ImGuiDir_Left: ImGuiDir = 0;
pub const ImGuiDir_ImGuiDir_Right: ImGuiDir = 1;
pub const ImGuiDir_ImGuiDir_Up: ImGuiDir = 2;
pub const ImGuiDir_ImGuiDir_Down: ImGuiDir = 3;
pub const ImGuiDir_ImGuiDir_COUNT: ImGuiDir = 4;
pub type ImGuiDir = ::std::os::raw::c_int;
pub const ImGuiSortDirection_ImGuiSortDirection_None: ImGuiSortDirection = 0;
pub const ImGuiSortDirection_ImGuiSortDirection_Ascending: ImGuiSortDirection = 1;
pub const ImGuiSortDirection_ImGuiSortDirection_Descending: ImGuiSortDirection = 2;
pub type ImGuiSortDirection = ImU8;
pub const ImGuiKey_ImGuiKey_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiKey_NamedKey_BEGIN: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_Tab: ImGuiKey = 512;
pub const ImGuiKey_ImGuiKey_LeftArrow: ImGuiKey = 513;
pub const ImGuiKey_ImGuiKey_RightArrow: ImGuiKey = 514;
pub const ImGuiKey_ImGuiKey_UpArrow: ImGuiKey = 515;
pub const ImGuiKey_ImGuiKey_DownArrow: ImGuiKey = 516;
pub const ImGuiKey_ImGuiKey_PageUp: ImGuiKey = 517;
pub const ImGuiKey_ImGuiKey_PageDown: ImGuiKey = 518;
pub const ImGuiKey_ImGuiKey_Home: ImGuiKey = 519;
pub const ImGuiKey_ImGuiKey_End: ImGuiKey = 520;
pub const ImGuiKey_ImGuiKey_Insert: ImGuiKey = 521;
pub const ImGuiKey_ImGuiKey_Delete: ImGuiKey = 522;
pub const ImGuiKey_ImGuiKey_Backspace: ImGuiKey = 523;
pub const ImGuiKey_ImGuiKey_Space: ImGuiKey = 524;
pub const ImGuiKey_ImGuiKey_Enter: ImGuiKey = 525;
pub const ImGuiKey_ImGuiKey_Escape: ImGuiKey = 526;
pub const ImGuiKey_ImGuiKey_LeftCtrl: ImGuiKey = 527;
pub const ImGuiKey_ImGuiKey_LeftShift: ImGuiKey = 528;
pub const ImGuiKey_ImGuiKey_LeftAlt: ImGuiKey = 529;
pub const ImGuiKey_ImGuiKey_LeftSuper: ImGuiKey = 530;
pub const ImGuiKey_ImGuiKey_RightCtrl: ImGuiKey = 531;
pub const ImGuiKey_ImGuiKey_RightShift: ImGuiKey = 532;
pub const ImGuiKey_ImGuiKey_RightAlt: ImGuiKey = 533;
pub const ImGuiKey_ImGuiKey_RightSuper: ImGuiKey = 534;
pub const ImGuiKey_ImGuiKey_Menu: ImGuiKey = 535;
pub const ImGuiKey_ImGuiKey_0: ImGuiKey = 536;
pub const ImGuiKey_ImGuiKey_1: ImGuiKey = 537;
pub const ImGuiKey_ImGuiKey_2: ImGuiKey = 538;
pub const ImGuiKey_ImGuiKey_3: ImGuiKey = 539;
pub const ImGuiKey_ImGuiKey_4: ImGuiKey = 540;
pub const ImGuiKey_ImGuiKey_5: ImGuiKey = 541;
pub const ImGuiKey_ImGuiKey_6: ImGuiKey = 542;
pub const ImGuiKey_ImGuiKey_7: ImGuiKey = 543;
pub const ImGuiKey_ImGuiKey_8: ImGuiKey = 544;
pub const ImGuiKey_ImGuiKey_9: ImGuiKey = 545;
pub const ImGuiKey_ImGuiKey_A: ImGuiKey = 546;
pub const ImGuiKey_ImGuiKey_B: ImGuiKey = 547;
pub const ImGuiKey_ImGuiKey_C: ImGuiKey = 548;
pub const ImGuiKey_ImGuiKey_D: ImGuiKey = 549;
pub const ImGuiKey_ImGuiKey_E: ImGuiKey = 550;
pub const ImGuiKey_ImGuiKey_F: ImGuiKey = 551;
pub const ImGuiKey_ImGuiKey_G: ImGuiKey = 552;
pub const ImGuiKey_ImGuiKey_H: ImGuiKey = 553;
pub const ImGuiKey_ImGuiKey_I: ImGuiKey = 554;
pub const ImGuiKey_ImGuiKey_J: ImGuiKey = 555;
pub const ImGuiKey_ImGuiKey_K: ImGuiKey = 556;
pub const ImGuiKey_ImGuiKey_L: ImGuiKey = 557;
pub const ImGuiKey_ImGuiKey_M: ImGuiKey = 558;
pub const ImGuiKey_ImGuiKey_N: ImGuiKey = 559;
pub const ImGuiKey_ImGuiKey_O: ImGuiKey = 560;
pub const ImGuiKey_ImGuiKey_P: ImGuiKey = 561;
pub const ImGuiKey_ImGuiKey_Q: ImGuiKey = 562;
pub const ImGuiKey_ImGuiKey_R: ImGuiKey = 563;
pub const ImGuiKey_ImGuiKey_S: ImGuiKey = 564;
pub const ImGuiKey_ImGuiKey_T: ImGuiKey = 565;
pub const ImGuiKey_ImGuiKey_U: ImGuiKey = 566;
pub const ImGuiKey_ImGuiKey_V: ImGuiKey = 567;
pub const ImGuiKey_ImGuiKey_W: ImGuiKey = 568;
pub const ImGuiKey_ImGuiKey_X: ImGuiKey = 569;
pub const ImGuiKey_ImGuiKey_Y: ImGuiKey = 570;
pub const ImGuiKey_ImGuiKey_Z: ImGuiKey = 571;
pub const ImGuiKey_ImGuiKey_F1: ImGuiKey = 572;
pub const ImGuiKey_ImGuiKey_F2: ImGuiKey = 573;
pub const ImGuiKey_ImGuiKey_F3: ImGuiKey = 574;
pub const ImGuiKey_ImGuiKey_F4: ImGuiKey = 575;
pub const ImGuiKey_ImGuiKey_F5: ImGuiKey = 576;
pub const ImGuiKey_ImGuiKey_F6: ImGuiKey = 577;
pub const ImGuiKey_ImGuiKey_F7: ImGuiKey = 578;
pub const ImGuiKey_ImGuiKey_F8: ImGuiKey = 579;
pub const ImGuiKey_ImGuiKey_F9: ImGuiKey = 580;
pub const ImGuiKey_ImGuiKey_F10: ImGuiKey = 581;
pub const ImGuiKey_ImGuiKey_F11: ImGuiKey = 582;
pub const ImGuiKey_ImGuiKey_F12: ImGuiKey = 583;
pub const ImGuiKey_ImGuiKey_F13: ImGuiKey = 584;
pub const ImGuiKey_ImGuiKey_F14: ImGuiKey = 585;
pub const ImGuiKey_ImGuiKey_F15: ImGuiKey = 586;
pub const ImGuiKey_ImGuiKey_F16: ImGuiKey = 587;
pub const ImGuiKey_ImGuiKey_F17: ImGuiKey = 588;
pub const ImGuiKey_ImGuiKey_F18: ImGuiKey = 589;
pub const ImGuiKey_ImGuiKey_F19: ImGuiKey = 590;
pub const ImGuiKey_ImGuiKey_F20: ImGuiKey = 591;
pub const ImGuiKey_ImGuiKey_F21: ImGuiKey = 592;
pub const ImGuiKey_ImGuiKey_F22: ImGuiKey = 593;
pub const ImGuiKey_ImGuiKey_F23: ImGuiKey = 594;
pub const ImGuiKey_ImGuiKey_F24: ImGuiKey = 595;
pub const ImGuiKey_ImGuiKey_Apostrophe: ImGuiKey = 596;
pub const ImGuiKey_ImGuiKey_Comma: ImGuiKey = 597;
pub const ImGuiKey_ImGuiKey_Minus: ImGuiKey = 598;
pub const ImGuiKey_ImGuiKey_Period: ImGuiKey = 599;
pub const ImGuiKey_ImGuiKey_Slash: ImGuiKey = 600;
pub const ImGuiKey_ImGuiKey_Semicolon: ImGuiKey = 601;
pub const ImGuiKey_ImGuiKey_Equal: ImGuiKey = 602;
pub const ImGuiKey_ImGuiKey_LeftBracket: ImGuiKey = 603;
pub const ImGuiKey_ImGuiKey_Backslash: ImGuiKey = 604;
pub const ImGuiKey_ImGuiKey_RightBracket: ImGuiKey = 605;
pub const ImGuiKey_ImGuiKey_GraveAccent: ImGuiKey = 606;
pub const ImGuiKey_ImGuiKey_CapsLock: ImGuiKey = 607;
pub const ImGuiKey_ImGuiKey_ScrollLock: ImGuiKey = 608;
pub const ImGuiKey_ImGuiKey_NumLock: ImGuiKey = 609;
pub const ImGuiKey_ImGuiKey_PrintScreen: ImGuiKey = 610;
pub const ImGuiKey_ImGuiKey_Pause: ImGuiKey = 611;
pub const ImGuiKey_ImGuiKey_Keypad0: ImGuiKey = 612;
pub const ImGuiKey_ImGuiKey_Keypad1: ImGuiKey = 613;
pub const ImGuiKey_ImGuiKey_Keypad2: ImGuiKey = 614;
pub const ImGuiKey_ImGuiKey_Keypad3: ImGuiKey = 615;
pub const ImGuiKey_ImGuiKey_Keypad4: ImGuiKey = 616;
pub const ImGuiKey_ImGuiKey_Keypad5: ImGuiKey = 617;
pub const ImGuiKey_ImGuiKey_Keypad6: ImGuiKey = 618;
pub const ImGuiKey_ImGuiKey_Keypad7: ImGuiKey = 619;
pub const ImGuiKey_ImGuiKey_Keypad8: ImGuiKey = 620;
pub const ImGuiKey_ImGuiKey_Keypad9: ImGuiKey = 621;
pub const ImGuiKey_ImGuiKey_KeypadDecimal: ImGuiKey = 622;
pub const ImGuiKey_ImGuiKey_KeypadDivide: ImGuiKey = 623;
pub const ImGuiKey_ImGuiKey_KeypadMultiply: ImGuiKey = 624;
pub const ImGuiKey_ImGuiKey_KeypadSubtract: ImGuiKey = 625;
pub const ImGuiKey_ImGuiKey_KeypadAdd: ImGuiKey = 626;
pub const ImGuiKey_ImGuiKey_KeypadEnter: ImGuiKey = 627;
pub const ImGuiKey_ImGuiKey_KeypadEqual: ImGuiKey = 628;
pub const ImGuiKey_ImGuiKey_AppBack: ImGuiKey = 629;
pub const ImGuiKey_ImGuiKey_AppForward: ImGuiKey = 630;
pub const ImGuiKey_ImGuiKey_GamepadStart: ImGuiKey = 631;
pub const ImGuiKey_ImGuiKey_GamepadBack: ImGuiKey = 632;
pub const ImGuiKey_ImGuiKey_GamepadFaceLeft: ImGuiKey = 633;
pub const ImGuiKey_ImGuiKey_GamepadFaceRight: ImGuiKey = 634;
pub const ImGuiKey_ImGuiKey_GamepadFaceUp: ImGuiKey = 635;
pub const ImGuiKey_ImGuiKey_GamepadFaceDown: ImGuiKey = 636;
pub const ImGuiKey_ImGuiKey_GamepadDpadLeft: ImGuiKey = 637;
pub const ImGuiKey_ImGuiKey_GamepadDpadRight: ImGuiKey = 638;
pub const ImGuiKey_ImGuiKey_GamepadDpadUp: ImGuiKey = 639;
pub const ImGuiKey_ImGuiKey_GamepadDpadDown: ImGuiKey = 640;
pub const ImGuiKey_ImGuiKey_GamepadL1: ImGuiKey = 641;
pub const ImGuiKey_ImGuiKey_GamepadR1: ImGuiKey = 642;
pub const ImGuiKey_ImGuiKey_GamepadL2: ImGuiKey = 643;
pub const ImGuiKey_ImGuiKey_GamepadR2: ImGuiKey = 644;
pub const ImGuiKey_ImGuiKey_GamepadL3: ImGuiKey = 645;
pub const ImGuiKey_ImGuiKey_GamepadR3: ImGuiKey = 646;
pub const ImGuiKey_ImGuiKey_GamepadLStickLeft: ImGuiKey = 647;
pub const ImGuiKey_ImGuiKey_GamepadLStickRight: ImGuiKey = 648;
pub const ImGuiKey_ImGuiKey_GamepadLStickUp: ImGuiKey = 649;
pub const ImGuiKey_ImGuiKey_GamepadLStickDown: ImGuiKey = 650;
pub const ImGuiKey_ImGuiKey_GamepadRStickLeft: ImGuiKey = 651;
pub const ImGuiKey_ImGuiKey_GamepadRStickRight: ImGuiKey = 652;
pub const ImGuiKey_ImGuiKey_GamepadRStickUp: ImGuiKey = 653;
pub const ImGuiKey_ImGuiKey_GamepadRStickDown: ImGuiKey = 654;
pub const ImGuiKey_ImGuiKey_MouseLeft: ImGuiKey = 655;
pub const ImGuiKey_ImGuiKey_MouseRight: ImGuiKey = 656;
pub const ImGuiKey_ImGuiKey_MouseMiddle: ImGuiKey = 657;
pub const ImGuiKey_ImGuiKey_MouseX1: ImGuiKey = 658;
pub const ImGuiKey_ImGuiKey_MouseX2: ImGuiKey = 659;
pub const ImGuiKey_ImGuiKey_MouseWheelX: ImGuiKey = 660;
pub const ImGuiKey_ImGuiKey_MouseWheelY: ImGuiKey = 661;
pub const ImGuiKey_ImGuiKey_ReservedForModCtrl: ImGuiKey = 662;
pub const ImGuiKey_ImGuiKey_ReservedForModShift: ImGuiKey = 663;
pub const ImGuiKey_ImGuiKey_ReservedForModAlt: ImGuiKey = 664;
pub const ImGuiKey_ImGuiKey_ReservedForModSuper: ImGuiKey = 665;
pub const ImGuiKey_ImGuiKey_NamedKey_END: ImGuiKey = 666;
pub const ImGuiKey_ImGuiMod_None: ImGuiKey = 0;
pub const ImGuiKey_ImGuiMod_Ctrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiMod_Shift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiMod_Alt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiMod_Super: ImGuiKey = 32768;
pub const ImGuiKey_ImGuiMod_Mask_: ImGuiKey = 61440;
pub const ImGuiKey_ImGuiKey_NamedKey_COUNT: ImGuiKey = 154;
pub const ImGuiKey_ImGuiKey_COUNT: ImGuiKey = 666;
pub const ImGuiKey_ImGuiMod_Shortcut: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModCtrl: ImGuiKey = 4096;
pub const ImGuiKey_ImGuiKey_ModShift: ImGuiKey = 8192;
pub const ImGuiKey_ImGuiKey_ModAlt: ImGuiKey = 16384;
pub const ImGuiKey_ImGuiKey_ModSuper: ImGuiKey = 32768;
pub type ImGuiKey = ::std::os::raw::c_int;
pub const ImGuiInputFlags__ImGuiInputFlags_None: ImGuiInputFlags_ = 0;
pub const ImGuiInputFlags__ImGuiInputFlags_Repeat: ImGuiInputFlags_ = 1;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteActive: ImGuiInputFlags_ = 1024;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFocused: ImGuiInputFlags_ = 2048;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteGlobal: ImGuiInputFlags_ = 4096;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteAlways: ImGuiInputFlags_ = 8192;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverFocused: ImGuiInputFlags_ = 16384;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteOverActive: ImGuiInputFlags_ = 32768;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteUnlessBgFocused: ImGuiInputFlags_ = 65536;
pub const ImGuiInputFlags__ImGuiInputFlags_RouteFromRootWindow: ImGuiInputFlags_ = 131072;
pub const ImGuiInputFlags__ImGuiInputFlags_Tooltip: ImGuiInputFlags_ = 262144;
pub type ImGuiInputFlags_ = ::std::os::raw::c_uint;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoKeyboard: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 128;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_uint;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_uint;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabSelected: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabSelectedOverline: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabDimmed: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_TabDimmedSelected: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_TabDimmedSelectedOverline: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_TextLink: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_NavCursor: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 55;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 56;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 57;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 58;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 54;
pub type ImGuiCol_ = ::std::os::raw::c_uint;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBorderSize: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarBorderSize: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_TabBarOverlineSize: ImGuiStyleVar_ = 25;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersAngle: ImGuiStyleVar_ = 26;
pub const ImGuiStyleVar__ImGuiStyleVar_TableAngledHeadersTextAlign: ImGuiStyleVar_ = 27;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 28;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 29;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextBorderSize: ImGuiStyleVar_ = 30;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextAlign: ImGuiStyleVar_ = 31;
pub const ImGuiStyleVar__ImGuiStyleVar_SeparatorTextPadding: ImGuiStyleVar_ = 32;
pub const ImGuiStyleVar__ImGuiStyleVar_DockingSeparatorSize: ImGuiStyleVar_ = 33;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 34;
pub type ImGuiStyleVar_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_EnableNav: ImGuiButtonFlags_ = 8;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_uint;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaOpaque: ImGuiColorEditFlags_ = 2048;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaNoBg: ImGuiColorEditFlags_ = 4096;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 8192;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaMask_: ImGuiColorEditFlags_ = 14338;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 0;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_WrapAround: ImGuiSliderFlags_ = 256;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampOnInput: ImGuiSliderFlags_ = 512;
pub const ImGuiSliderFlags__ImGuiSliderFlags_ClampZeroRange: ImGuiSliderFlags_ = 1024;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoSpeedTweaks: ImGuiSliderFlags_ = 2048;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 1536;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_uint;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_uint;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiMouseSource_ImGuiMouseSource_Mouse: ImGuiMouseSource = 0;
pub const ImGuiMouseSource_ImGuiMouseSource_TouchScreen: ImGuiMouseSource = 1;
pub const ImGuiMouseSource_ImGuiMouseSource_Pen: ImGuiMouseSource = 2;
pub const ImGuiMouseSource_ImGuiMouseSource_COUNT: ImGuiMouseSource = 3;
pub type ImGuiMouseSource = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_uint;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_HighlightHoveredColumn: ImGuiTableFlags_ = 268435456;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_AngledHeader: ImGuiTableColumnFlags_ =
    262144;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableSortSpecs"][::std::mem::size_of::<ImGuiTableSortSpecs>() - 16usize];
    ["Alignment of ImGuiTableSortSpecs"][::std::mem::align_of::<ImGuiTableSortSpecs>() - 8usize];
    ["Offset of field: ImGuiTableSortSpecs::Specs"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, Specs) - 0usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsCount"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsCount) - 8usize];
    ["Offset of field: ImGuiTableSortSpecs::SpecsDirty"]
        [::std::mem::offset_of!(ImGuiTableSortSpecs, SpecsDirty) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub SortDirection: ImGuiSortDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumnSortSpecs"]
        [::std::mem::size_of::<ImGuiTableColumnSortSpecs>() - 12usize];
    ["Alignment of ImGuiTableColumnSortSpecs"]
        [::std::mem::align_of::<ImGuiTableColumnSortSpecs>() - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnUserID"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnUserID) - 0usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::ColumnIndex"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, ColumnIndex) - 4usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, SortOrder) - 6usize];
    ["Offset of field: ImGuiTableColumnSortSpecs::SortDirection"]
        [::std::mem::offset_of!(ImGuiTableColumnSortSpecs, SortDirection) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImNewWrapper {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImNewWrapper"][::std::mem::size_of::<ImNewWrapper>() - 1usize];
    ["Alignment of ImNewWrapper"][::std::mem::align_of::<ImNewWrapper>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImVector<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut T,
}
pub type ImVector_value_type<T> = T;
pub type ImVector_iterator<T> = *mut ImVector_value_type<T>;
pub type ImVector_const_iterator<T> = *const ImVector_value_type<T>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowBorderHoverPadding: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabCloseButtonMinWidthSelected: f32,
    pub TabCloseButtonMinWidthUnselected: f32,
    pub TabBarBorderSize: f32,
    pub TabBarOverlineSize: f32,
    pub TableAngledHeadersAngle: f32,
    pub TableAngledHeadersTextAlign: ImVec2,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub SeparatorTextBorderSize: f32,
    pub SeparatorTextAlign: ImVec2,
    pub SeparatorTextPadding: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub DockingSeparatorSize: f32,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 58usize],
    pub HoverStationaryDelay: f32,
    pub HoverDelayShort: f32,
    pub HoverDelayNormal: f32,
    pub HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
    pub HoverFlagsForTooltipNav: ImGuiHoveredFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyle"][::std::mem::size_of::<ImGuiStyle>() - 1200usize];
    ["Alignment of ImGuiStyle"][::std::mem::align_of::<ImGuiStyle>() - 4usize];
    ["Offset of field: ImGuiStyle::Alpha"][::std::mem::offset_of!(ImGuiStyle, Alpha) - 0usize];
    ["Offset of field: ImGuiStyle::DisabledAlpha"]
        [::std::mem::offset_of!(ImGuiStyle, DisabledAlpha) - 4usize];
    ["Offset of field: ImGuiStyle::WindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowPadding) - 8usize];
    ["Offset of field: ImGuiStyle::WindowRounding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowRounding) - 16usize];
    ["Offset of field: ImGuiStyle::WindowBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowBorderSize) - 20usize];
    ["Offset of field: ImGuiStyle::WindowBorderHoverPadding"]
        [::std::mem::offset_of!(ImGuiStyle, WindowBorderHoverPadding) - 24usize];
    ["Offset of field: ImGuiStyle::WindowMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMinSize) - 28usize];
    ["Offset of field: ImGuiStyle::WindowTitleAlign"]
        [::std::mem::offset_of!(ImGuiStyle, WindowTitleAlign) - 36usize];
    ["Offset of field: ImGuiStyle::WindowMenuButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, WindowMenuButtonPosition) - 44usize];
    ["Offset of field: ImGuiStyle::ChildRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ChildRounding) - 48usize];
    ["Offset of field: ImGuiStyle::ChildBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, ChildBorderSize) - 52usize];
    ["Offset of field: ImGuiStyle::PopupRounding"]
        [::std::mem::offset_of!(ImGuiStyle, PopupRounding) - 56usize];
    ["Offset of field: ImGuiStyle::PopupBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, PopupBorderSize) - 60usize];
    ["Offset of field: ImGuiStyle::FramePadding"]
        [::std::mem::offset_of!(ImGuiStyle, FramePadding) - 64usize];
    ["Offset of field: ImGuiStyle::FrameRounding"]
        [::std::mem::offset_of!(ImGuiStyle, FrameRounding) - 72usize];
    ["Offset of field: ImGuiStyle::FrameBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, FrameBorderSize) - 76usize];
    ["Offset of field: ImGuiStyle::ItemSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemSpacing) - 80usize];
    ["Offset of field: ImGuiStyle::ItemInnerSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ItemInnerSpacing) - 88usize];
    ["Offset of field: ImGuiStyle::CellPadding"]
        [::std::mem::offset_of!(ImGuiStyle, CellPadding) - 96usize];
    ["Offset of field: ImGuiStyle::TouchExtraPadding"]
        [::std::mem::offset_of!(ImGuiStyle, TouchExtraPadding) - 104usize];
    ["Offset of field: ImGuiStyle::IndentSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, IndentSpacing) - 112usize];
    ["Offset of field: ImGuiStyle::ColumnsMinSpacing"]
        [::std::mem::offset_of!(ImGuiStyle, ColumnsMinSpacing) - 116usize];
    ["Offset of field: ImGuiStyle::ScrollbarSize"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarSize) - 120usize];
    ["Offset of field: ImGuiStyle::ScrollbarRounding"]
        [::std::mem::offset_of!(ImGuiStyle, ScrollbarRounding) - 124usize];
    ["Offset of field: ImGuiStyle::GrabMinSize"]
        [::std::mem::offset_of!(ImGuiStyle, GrabMinSize) - 128usize];
    ["Offset of field: ImGuiStyle::GrabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, GrabRounding) - 132usize];
    ["Offset of field: ImGuiStyle::LogSliderDeadzone"]
        [::std::mem::offset_of!(ImGuiStyle, LogSliderDeadzone) - 136usize];
    ["Offset of field: ImGuiStyle::TabRounding"]
        [::std::mem::offset_of!(ImGuiStyle, TabRounding) - 140usize];
    ["Offset of field: ImGuiStyle::TabBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBorderSize) - 144usize];
    ["Offset of field: ImGuiStyle::TabCloseButtonMinWidthSelected"]
        [::std::mem::offset_of!(ImGuiStyle, TabCloseButtonMinWidthSelected) - 148usize];
    ["Offset of field: ImGuiStyle::TabCloseButtonMinWidthUnselected"]
        [::std::mem::offset_of!(ImGuiStyle, TabCloseButtonMinWidthUnselected) - 152usize];
    ["Offset of field: ImGuiStyle::TabBarBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBarBorderSize) - 156usize];
    ["Offset of field: ImGuiStyle::TabBarOverlineSize"]
        [::std::mem::offset_of!(ImGuiStyle, TabBarOverlineSize) - 160usize];
    ["Offset of field: ImGuiStyle::TableAngledHeadersAngle"]
        [::std::mem::offset_of!(ImGuiStyle, TableAngledHeadersAngle) - 164usize];
    ["Offset of field: ImGuiStyle::TableAngledHeadersTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, TableAngledHeadersTextAlign) - 168usize];
    ["Offset of field: ImGuiStyle::ColorButtonPosition"]
        [::std::mem::offset_of!(ImGuiStyle, ColorButtonPosition) - 176usize];
    ["Offset of field: ImGuiStyle::ButtonTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, ButtonTextAlign) - 180usize];
    ["Offset of field: ImGuiStyle::SelectableTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SelectableTextAlign) - 188usize];
    ["Offset of field: ImGuiStyle::SeparatorTextBorderSize"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextBorderSize) - 196usize];
    ["Offset of field: ImGuiStyle::SeparatorTextAlign"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextAlign) - 200usize];
    ["Offset of field: ImGuiStyle::SeparatorTextPadding"]
        [::std::mem::offset_of!(ImGuiStyle, SeparatorTextPadding) - 208usize];
    ["Offset of field: ImGuiStyle::DisplayWindowPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplayWindowPadding) - 216usize];
    ["Offset of field: ImGuiStyle::DisplaySafeAreaPadding"]
        [::std::mem::offset_of!(ImGuiStyle, DisplaySafeAreaPadding) - 224usize];
    ["Offset of field: ImGuiStyle::DockingSeparatorSize"]
        [::std::mem::offset_of!(ImGuiStyle, DockingSeparatorSize) - 232usize];
    ["Offset of field: ImGuiStyle::MouseCursorScale"]
        [::std::mem::offset_of!(ImGuiStyle, MouseCursorScale) - 236usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLines"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLines) - 240usize];
    ["Offset of field: ImGuiStyle::AntiAliasedLinesUseTex"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedLinesUseTex) - 241usize];
    ["Offset of field: ImGuiStyle::AntiAliasedFill"]
        [::std::mem::offset_of!(ImGuiStyle, AntiAliasedFill) - 242usize];
    ["Offset of field: ImGuiStyle::CurveTessellationTol"]
        [::std::mem::offset_of!(ImGuiStyle, CurveTessellationTol) - 244usize];
    ["Offset of field: ImGuiStyle::CircleTessellationMaxError"]
        [::std::mem::offset_of!(ImGuiStyle, CircleTessellationMaxError) - 248usize];
    ["Offset of field: ImGuiStyle::Colors"][::std::mem::offset_of!(ImGuiStyle, Colors) - 252usize];
    ["Offset of field: ImGuiStyle::HoverStationaryDelay"]
        [::std::mem::offset_of!(ImGuiStyle, HoverStationaryDelay) - 1180usize];
    ["Offset of field: ImGuiStyle::HoverDelayShort"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayShort) - 1184usize];
    ["Offset of field: ImGuiStyle::HoverDelayNormal"]
        [::std::mem::offset_of!(ImGuiStyle, HoverDelayNormal) - 1188usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipMouse"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipMouse) - 1192usize];
    ["Offset of field: ImGuiStyle::HoverFlagsForTooltipNav"]
        [::std::mem::offset_of!(ImGuiStyle, HoverFlagsForTooltipNav) - 1196usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN10ImGuiStyle13ScaleAllSizesEf"]
    pub fn ImGuiStyle_ScaleAllSizes(this: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImGuiStyleC1Ev"]
    pub fn ImGuiStyle_ImGuiStyle(this: *mut ImGuiStyle);
}
impl ImGuiStyle {
    #[inline]
    pub unsafe fn ScaleAllSizes(&mut self, scale_factor: f32) {
        ImGuiStyle_ScaleAllSizes(self, scale_factor)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiStyle_ImGuiStyle(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyData"][::std::mem::size_of::<ImGuiKeyData>() - 16usize];
    ["Alignment of ImGuiKeyData"][::std::mem::align_of::<ImGuiKeyData>() - 4usize];
    ["Offset of field: ImGuiKeyData::Down"][::std::mem::offset_of!(ImGuiKeyData, Down) - 0usize];
    ["Offset of field: ImGuiKeyData::DownDuration"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDuration) - 4usize];
    ["Offset of field: ImGuiKeyData::DownDurationPrev"]
        [::std::mem::offset_of!(ImGuiKeyData, DownDurationPrev) - 8usize];
    ["Offset of field: ImGuiKeyData::AnalogValue"]
        [::std::mem::offset_of!(ImGuiKeyData, AnalogValue) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigNavSwapGamepadButtons: bool,
    pub ConfigNavMoveSetMousePos: bool,
    pub ConfigNavCaptureKeyboard: bool,
    pub ConfigNavEscapeClearFocusItem: bool,
    pub ConfigNavEscapeClearFocusWindow: bool,
    pub ConfigNavCursorVisibleAuto: bool,
    pub ConfigNavCursorVisibleAlways: bool,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigInputTextEnterKeepActive: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigWindowsCopyContentsWithCtrlC: bool,
    pub ConfigScrollbarScrollByPage: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub ConfigErrorRecovery: bool,
    pub ConfigErrorRecoveryEnableAssert: bool,
    pub ConfigErrorRecoveryEnableDebugLog: bool,
    pub ConfigErrorRecoveryEnableTooltip: bool,
    pub ConfigDebugIsDebuggerPresent: bool,
    pub ConfigDebugHighlightIdConflicts: bool,
    pub ConfigDebugBeginReturnValueOnce: bool,
    pub ConfigDebugBeginReturnValueLoop: bool,
    pub ConfigDebugIgnoreFocusLoss: bool,
    pub ConfigDebugIniSettings: bool,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub Ctx: *mut ImGuiContext,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseSource: ImGuiMouseSource,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeyMods: ImGuiKeyChord,
    pub KeysData: [ImGuiKeyData; 154usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseReleasedTime: [f64; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseWheelRequestAxisSwap: bool,
    pub MouseCtrlLeftAsRightClick: bool,
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector<ImWchar>,
    pub GetClipboardTextFn: ::std::option::Option<
        extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiIO"][::std::mem::size_of::<ImGuiIO>() - 3072usize];
    ["Alignment of ImGuiIO"][::std::mem::align_of::<ImGuiIO>() - 8usize];
    ["Offset of field: ImGuiIO::ConfigFlags"]
        [::std::mem::offset_of!(ImGuiIO, ConfigFlags) - 0usize];
    ["Offset of field: ImGuiIO::BackendFlags"]
        [::std::mem::offset_of!(ImGuiIO, BackendFlags) - 4usize];
    ["Offset of field: ImGuiIO::DisplaySize"]
        [::std::mem::offset_of!(ImGuiIO, DisplaySize) - 8usize];
    ["Offset of field: ImGuiIO::DeltaTime"][::std::mem::offset_of!(ImGuiIO, DeltaTime) - 16usize];
    ["Offset of field: ImGuiIO::IniSavingRate"]
        [::std::mem::offset_of!(ImGuiIO, IniSavingRate) - 20usize];
    ["Offset of field: ImGuiIO::IniFilename"]
        [::std::mem::offset_of!(ImGuiIO, IniFilename) - 24usize];
    ["Offset of field: ImGuiIO::LogFilename"]
        [::std::mem::offset_of!(ImGuiIO, LogFilename) - 32usize];
    ["Offset of field: ImGuiIO::UserData"][::std::mem::offset_of!(ImGuiIO, UserData) - 40usize];
    ["Offset of field: ImGuiIO::Fonts"][::std::mem::offset_of!(ImGuiIO, Fonts) - 48usize];
    ["Offset of field: ImGuiIO::FontGlobalScale"]
        [::std::mem::offset_of!(ImGuiIO, FontGlobalScale) - 56usize];
    ["Offset of field: ImGuiIO::FontAllowUserScaling"]
        [::std::mem::offset_of!(ImGuiIO, FontAllowUserScaling) - 60usize];
    ["Offset of field: ImGuiIO::FontDefault"]
        [::std::mem::offset_of!(ImGuiIO, FontDefault) - 64usize];
    ["Offset of field: ImGuiIO::DisplayFramebufferScale"]
        [::std::mem::offset_of!(ImGuiIO, DisplayFramebufferScale) - 72usize];
    ["Offset of field: ImGuiIO::ConfigNavSwapGamepadButtons"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavSwapGamepadButtons) - 80usize];
    ["Offset of field: ImGuiIO::ConfigNavMoveSetMousePos"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavMoveSetMousePos) - 81usize];
    ["Offset of field: ImGuiIO::ConfigNavCaptureKeyboard"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCaptureKeyboard) - 82usize];
    ["Offset of field: ImGuiIO::ConfigNavEscapeClearFocusItem"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavEscapeClearFocusItem) - 83usize];
    ["Offset of field: ImGuiIO::ConfigNavEscapeClearFocusWindow"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavEscapeClearFocusWindow) - 84usize];
    ["Offset of field: ImGuiIO::ConfigNavCursorVisibleAuto"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCursorVisibleAuto) - 85usize];
    ["Offset of field: ImGuiIO::ConfigNavCursorVisibleAlways"]
        [::std::mem::offset_of!(ImGuiIO, ConfigNavCursorVisibleAlways) - 86usize];
    ["Offset of field: ImGuiIO::ConfigDockingNoSplit"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingNoSplit) - 87usize];
    ["Offset of field: ImGuiIO::ConfigDockingWithShift"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingWithShift) - 88usize];
    ["Offset of field: ImGuiIO::ConfigDockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingAlwaysTabBar) - 89usize];
    ["Offset of field: ImGuiIO::ConfigDockingTransparentPayload"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDockingTransparentPayload) - 90usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoAutoMerge"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoAutoMerge) - 91usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoTaskBarIcon"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoTaskBarIcon) - 92usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDecoration"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDecoration) - 93usize];
    ["Offset of field: ImGuiIO::ConfigViewportsNoDefaultParent"]
        [::std::mem::offset_of!(ImGuiIO, ConfigViewportsNoDefaultParent) - 94usize];
    ["Offset of field: ImGuiIO::MouseDrawCursor"]
        [::std::mem::offset_of!(ImGuiIO, MouseDrawCursor) - 95usize];
    ["Offset of field: ImGuiIO::ConfigMacOSXBehaviors"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMacOSXBehaviors) - 96usize];
    ["Offset of field: ImGuiIO::ConfigInputTrickleEventQueue"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTrickleEventQueue) - 97usize];
    ["Offset of field: ImGuiIO::ConfigInputTextCursorBlink"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextCursorBlink) - 98usize];
    ["Offset of field: ImGuiIO::ConfigInputTextEnterKeepActive"]
        [::std::mem::offset_of!(ImGuiIO, ConfigInputTextEnterKeepActive) - 99usize];
    ["Offset of field: ImGuiIO::ConfigDragClickToInputText"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDragClickToInputText) - 100usize];
    ["Offset of field: ImGuiIO::ConfigWindowsResizeFromEdges"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsResizeFromEdges) - 101usize];
    ["Offset of field: ImGuiIO::ConfigWindowsMoveFromTitleBarOnly"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsMoveFromTitleBarOnly) - 102usize];
    ["Offset of field: ImGuiIO::ConfigWindowsCopyContentsWithCtrlC"]
        [::std::mem::offset_of!(ImGuiIO, ConfigWindowsCopyContentsWithCtrlC) - 103usize];
    ["Offset of field: ImGuiIO::ConfigScrollbarScrollByPage"]
        [::std::mem::offset_of!(ImGuiIO, ConfigScrollbarScrollByPage) - 104usize];
    ["Offset of field: ImGuiIO::ConfigMemoryCompactTimer"]
        [::std::mem::offset_of!(ImGuiIO, ConfigMemoryCompactTimer) - 108usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickTime) - 112usize];
    ["Offset of field: ImGuiIO::MouseDoubleClickMaxDist"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClickMaxDist) - 116usize];
    ["Offset of field: ImGuiIO::MouseDragThreshold"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragThreshold) - 120usize];
    ["Offset of field: ImGuiIO::KeyRepeatDelay"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatDelay) - 124usize];
    ["Offset of field: ImGuiIO::KeyRepeatRate"]
        [::std::mem::offset_of!(ImGuiIO, KeyRepeatRate) - 128usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecovery"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecovery) - 132usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableAssert"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableAssert) - 133usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableDebugLog"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableDebugLog) - 134usize];
    ["Offset of field: ImGuiIO::ConfigErrorRecoveryEnableTooltip"]
        [::std::mem::offset_of!(ImGuiIO, ConfigErrorRecoveryEnableTooltip) - 135usize];
    ["Offset of field: ImGuiIO::ConfigDebugIsDebuggerPresent"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIsDebuggerPresent) - 136usize];
    ["Offset of field: ImGuiIO::ConfigDebugHighlightIdConflicts"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugHighlightIdConflicts) - 137usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueOnce"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueOnce) - 138usize];
    ["Offset of field: ImGuiIO::ConfigDebugBeginReturnValueLoop"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugBeginReturnValueLoop) - 139usize];
    ["Offset of field: ImGuiIO::ConfigDebugIgnoreFocusLoss"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIgnoreFocusLoss) - 140usize];
    ["Offset of field: ImGuiIO::ConfigDebugIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, ConfigDebugIniSettings) - 141usize];
    ["Offset of field: ImGuiIO::BackendPlatformName"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformName) - 144usize];
    ["Offset of field: ImGuiIO::BackendRendererName"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererName) - 152usize];
    ["Offset of field: ImGuiIO::BackendPlatformUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendPlatformUserData) - 160usize];
    ["Offset of field: ImGuiIO::BackendRendererUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendRendererUserData) - 168usize];
    ["Offset of field: ImGuiIO::BackendLanguageUserData"]
        [::std::mem::offset_of!(ImGuiIO, BackendLanguageUserData) - 176usize];
    ["Offset of field: ImGuiIO::WantCaptureMouse"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouse) - 184usize];
    ["Offset of field: ImGuiIO::WantCaptureKeyboard"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureKeyboard) - 185usize];
    ["Offset of field: ImGuiIO::WantTextInput"]
        [::std::mem::offset_of!(ImGuiIO, WantTextInput) - 186usize];
    ["Offset of field: ImGuiIO::WantSetMousePos"]
        [::std::mem::offset_of!(ImGuiIO, WantSetMousePos) - 187usize];
    ["Offset of field: ImGuiIO::WantSaveIniSettings"]
        [::std::mem::offset_of!(ImGuiIO, WantSaveIniSettings) - 188usize];
    ["Offset of field: ImGuiIO::NavActive"][::std::mem::offset_of!(ImGuiIO, NavActive) - 189usize];
    ["Offset of field: ImGuiIO::NavVisible"]
        [::std::mem::offset_of!(ImGuiIO, NavVisible) - 190usize];
    ["Offset of field: ImGuiIO::Framerate"][::std::mem::offset_of!(ImGuiIO, Framerate) - 192usize];
    ["Offset of field: ImGuiIO::MetricsRenderVertices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderVertices) - 196usize];
    ["Offset of field: ImGuiIO::MetricsRenderIndices"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderIndices) - 200usize];
    ["Offset of field: ImGuiIO::MetricsRenderWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsRenderWindows) - 204usize];
    ["Offset of field: ImGuiIO::MetricsActiveWindows"]
        [::std::mem::offset_of!(ImGuiIO, MetricsActiveWindows) - 208usize];
    ["Offset of field: ImGuiIO::MouseDelta"]
        [::std::mem::offset_of!(ImGuiIO, MouseDelta) - 212usize];
    ["Offset of field: ImGuiIO::Ctx"][::std::mem::offset_of!(ImGuiIO, Ctx) - 224usize];
    ["Offset of field: ImGuiIO::MousePos"][::std::mem::offset_of!(ImGuiIO, MousePos) - 232usize];
    ["Offset of field: ImGuiIO::MouseDown"][::std::mem::offset_of!(ImGuiIO, MouseDown) - 240usize];
    ["Offset of field: ImGuiIO::MouseWheel"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheel) - 248usize];
    ["Offset of field: ImGuiIO::MouseWheelH"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelH) - 252usize];
    ["Offset of field: ImGuiIO::MouseSource"]
        [::std::mem::offset_of!(ImGuiIO, MouseSource) - 256usize];
    ["Offset of field: ImGuiIO::MouseHoveredViewport"]
        [::std::mem::offset_of!(ImGuiIO, MouseHoveredViewport) - 260usize];
    ["Offset of field: ImGuiIO::KeyCtrl"][::std::mem::offset_of!(ImGuiIO, KeyCtrl) - 264usize];
    ["Offset of field: ImGuiIO::KeyShift"][::std::mem::offset_of!(ImGuiIO, KeyShift) - 265usize];
    ["Offset of field: ImGuiIO::KeyAlt"][::std::mem::offset_of!(ImGuiIO, KeyAlt) - 266usize];
    ["Offset of field: ImGuiIO::KeySuper"][::std::mem::offset_of!(ImGuiIO, KeySuper) - 267usize];
    ["Offset of field: ImGuiIO::KeyMods"][::std::mem::offset_of!(ImGuiIO, KeyMods) - 268usize];
    ["Offset of field: ImGuiIO::KeysData"][::std::mem::offset_of!(ImGuiIO, KeysData) - 272usize];
    ["Offset of field: ImGuiIO::WantCaptureMouseUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, WantCaptureMouseUnlessPopupClose) - 2736usize];
    ["Offset of field: ImGuiIO::MousePosPrev"]
        [::std::mem::offset_of!(ImGuiIO, MousePosPrev) - 2740usize];
    ["Offset of field: ImGuiIO::MouseClickedPos"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedPos) - 2748usize];
    ["Offset of field: ImGuiIO::MouseClickedTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedTime) - 2792usize];
    ["Offset of field: ImGuiIO::MouseClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseClicked) - 2832usize];
    ["Offset of field: ImGuiIO::MouseDoubleClicked"]
        [::std::mem::offset_of!(ImGuiIO, MouseDoubleClicked) - 2837usize];
    ["Offset of field: ImGuiIO::MouseClickedCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedCount) - 2842usize];
    ["Offset of field: ImGuiIO::MouseClickedLastCount"]
        [::std::mem::offset_of!(ImGuiIO, MouseClickedLastCount) - 2852usize];
    ["Offset of field: ImGuiIO::MouseReleased"]
        [::std::mem::offset_of!(ImGuiIO, MouseReleased) - 2862usize];
    ["Offset of field: ImGuiIO::MouseReleasedTime"]
        [::std::mem::offset_of!(ImGuiIO, MouseReleasedTime) - 2872usize];
    ["Offset of field: ImGuiIO::MouseDownOwned"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwned) - 2912usize];
    ["Offset of field: ImGuiIO::MouseDownOwnedUnlessPopupClose"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownOwnedUnlessPopupClose) - 2917usize];
    ["Offset of field: ImGuiIO::MouseWheelRequestAxisSwap"]
        [::std::mem::offset_of!(ImGuiIO, MouseWheelRequestAxisSwap) - 2922usize];
    ["Offset of field: ImGuiIO::MouseCtrlLeftAsRightClick"]
        [::std::mem::offset_of!(ImGuiIO, MouseCtrlLeftAsRightClick) - 2923usize];
    ["Offset of field: ImGuiIO::MouseDownDuration"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDuration) - 2924usize];
    ["Offset of field: ImGuiIO::MouseDownDurationPrev"]
        [::std::mem::offset_of!(ImGuiIO, MouseDownDurationPrev) - 2944usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceAbs"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceAbs) - 2964usize];
    ["Offset of field: ImGuiIO::MouseDragMaxDistanceSqr"]
        [::std::mem::offset_of!(ImGuiIO, MouseDragMaxDistanceSqr) - 3004usize];
    ["Offset of field: ImGuiIO::PenPressure"]
        [::std::mem::offset_of!(ImGuiIO, PenPressure) - 3024usize];
    ["Offset of field: ImGuiIO::AppFocusLost"]
        [::std::mem::offset_of!(ImGuiIO, AppFocusLost) - 3028usize];
    ["Offset of field: ImGuiIO::AppAcceptingEvents"]
        [::std::mem::offset_of!(ImGuiIO, AppAcceptingEvents) - 3029usize];
    ["Offset of field: ImGuiIO::InputQueueSurrogate"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueSurrogate) - 3030usize];
    ["Offset of field: ImGuiIO::InputQueueCharacters"]
        [::std::mem::offset_of!(ImGuiIO, InputQueueCharacters) - 3032usize];
    ["Offset of field: ImGuiIO::GetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, GetClipboardTextFn) - 3048usize];
    ["Offset of field: ImGuiIO::SetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiIO, SetClipboardTextFn) - 3056usize];
    ["Offset of field: ImGuiIO::ClipboardUserData"]
        [::std::mem::offset_of!(ImGuiIO, ClipboardUserData) - 3064usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb"]
    pub fn ImGuiIO_AddKeyEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf"]
    pub fn ImGuiIO_AddKeyAnalogEvent(this: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO16AddMousePosEventEff"]
    pub fn ImGuiIO_AddMousePosEvent(this: *mut ImGuiIO, x: f32, y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO19AddMouseButtonEventEib"]
    pub fn ImGuiIO_AddMouseButtonEvent(
        this: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO18AddMouseWheelEventEff"]
    pub fn ImGuiIO_AddMouseWheelEvent(this: *mut ImGuiIO, wheel_x: f32, wheel_y: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO19AddMouseSourceEventE16ImGuiMouseSource"]
    pub fn ImGuiIO_AddMouseSourceEvent(this: *mut ImGuiIO, source: ImGuiMouseSource);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO21AddMouseViewportEventEj"]
    pub fn ImGuiIO_AddMouseViewportEvent(this: *mut ImGuiIO, id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO13AddFocusEventEb"]
    pub fn ImGuiIO_AddFocusEvent(this: *mut ImGuiIO, focused: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO17AddInputCharacterEj"]
    pub fn ImGuiIO_AddInputCharacter(this: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO22AddInputCharacterUTF16Et"]
    pub fn ImGuiIO_AddInputCharacterUTF16(this: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO22AddInputCharactersUTF8EPKc"]
    pub fn ImGuiIO_AddInputCharactersUTF8(this: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii"]
    pub fn ImGuiIO_SetKeyEventNativeData(
        this: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO21SetAppAcceptingEventsEb"]
    pub fn ImGuiIO_SetAppAcceptingEvents(this: *mut ImGuiIO, accepting_events: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO16ClearEventsQueueEv"]
    pub fn ImGuiIO_ClearEventsQueue(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO14ClearInputKeysEv"]
    pub fn ImGuiIO_ClearInputKeys(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO15ClearInputMouseEv"]
    pub fn ImGuiIO_ClearInputMouse(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIO20ClearInputCharactersEv"]
    pub fn ImGuiIO_ClearInputCharacters(this: *mut ImGuiIO);
}
extern "C" {
    #[link_name = "\u{1}_ZN7ImGuiIOC1Ev"]
    pub fn ImGuiIO_ImGuiIO(this: *mut ImGuiIO);
}
impl ImGuiIO {
    #[inline]
    pub unsafe fn AddKeyEvent(&mut self, key: ImGuiKey, down: bool) {
        ImGuiIO_AddKeyEvent(self, key, down)
    }
    #[inline]
    pub unsafe fn AddKeyAnalogEvent(&mut self, key: ImGuiKey, down: bool, v: f32) {
        ImGuiIO_AddKeyAnalogEvent(self, key, down, v)
    }
    #[inline]
    pub unsafe fn AddMousePosEvent(&mut self, x: f32, y: f32) {
        ImGuiIO_AddMousePosEvent(self, x, y)
    }
    #[inline]
    pub unsafe fn AddMouseButtonEvent(&mut self, button: ::std::os::raw::c_int, down: bool) {
        ImGuiIO_AddMouseButtonEvent(self, button, down)
    }
    #[inline]
    pub unsafe fn AddMouseWheelEvent(&mut self, wheel_x: f32, wheel_y: f32) {
        ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)
    }
    #[inline]
    pub unsafe fn AddMouseSourceEvent(&mut self, source: ImGuiMouseSource) {
        ImGuiIO_AddMouseSourceEvent(self, source)
    }
    #[inline]
    pub unsafe fn AddMouseViewportEvent(&mut self, id: ImGuiID) {
        ImGuiIO_AddMouseViewportEvent(self, id)
    }
    #[inline]
    pub unsafe fn AddFocusEvent(&mut self, focused: bool) {
        ImGuiIO_AddFocusEvent(self, focused)
    }
    #[inline]
    pub unsafe fn AddInputCharacter(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiIO_AddInputCharacter(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharacterUTF16(&mut self, c: ImWchar16) {
        ImGuiIO_AddInputCharacterUTF16(self, c)
    }
    #[inline]
    pub unsafe fn AddInputCharactersUTF8(&mut self, str_: *const ::std::os::raw::c_char) {
        ImGuiIO_AddInputCharactersUTF8(self, str_)
    }
    #[inline]
    pub unsafe fn SetKeyEventNativeData(
        &mut self,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    ) {
        ImGuiIO_SetKeyEventNativeData(
            self,
            key,
            native_keycode,
            native_scancode,
            native_legacy_index,
        )
    }
    #[inline]
    pub unsafe fn SetAppAcceptingEvents(&mut self, accepting_events: bool) {
        ImGuiIO_SetAppAcceptingEvents(self, accepting_events)
    }
    #[inline]
    pub unsafe fn ClearEventsQueue(&mut self) {
        ImGuiIO_ClearEventsQueue(self)
    }
    #[inline]
    pub unsafe fn ClearInputKeys(&mut self) {
        ImGuiIO_ClearInputKeys(self)
    }
    #[inline]
    pub unsafe fn ClearInputMouse(&mut self) {
        ImGuiIO_ClearInputMouse(self)
    }
    #[inline]
    pub unsafe fn ClearInputCharacters(&mut self) {
        ImGuiIO_ClearInputCharacters(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiIO_ImGuiIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub Ctx: *mut ImGuiContext,
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextCallbackData"]
        [::std::mem::size_of::<ImGuiInputTextCallbackData>() - 64usize];
    ["Alignment of ImGuiInputTextCallbackData"]
        [::std::mem::align_of::<ImGuiInputTextCallbackData>() - 8usize];
    ["Offset of field: ImGuiInputTextCallbackData::Ctx"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Ctx) - 0usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventFlag"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventFlag) - 8usize];
    ["Offset of field: ImGuiInputTextCallbackData::Flags"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Flags) - 12usize];
    ["Offset of field: ImGuiInputTextCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, UserData) - 16usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventChar"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventChar) - 24usize];
    ["Offset of field: ImGuiInputTextCallbackData::EventKey"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, EventKey) - 28usize];
    ["Offset of field: ImGuiInputTextCallbackData::Buf"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, Buf) - 32usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufTextLen"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufTextLen) - 40usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufSize"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufSize) - 44usize];
    ["Offset of field: ImGuiInputTextCallbackData::BufDirty"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, BufDirty) - 48usize];
    ["Offset of field: ImGuiInputTextCallbackData::CursorPos"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, CursorPos) - 52usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionStart"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionStart) - 56usize];
    ["Offset of field: ImGuiInputTextCallbackData::SelectionEnd"]
        [::std::mem::offset_of!(ImGuiInputTextCallbackData, SelectionEnd) - 60usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiInputTextCallbackData11DeleteCharsEii"]
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiInputTextCallbackData11InsertCharsEiPKcS1_"]
    pub fn ImGuiInputTextCallbackData_InsertChars(
        this: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiInputTextCallbackDataC1Ev"]
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(
        this: *mut ImGuiInputTextCallbackData,
    );
}
impl ImGuiInputTextCallbackData {
    #[inline]
    pub unsafe fn DeleteChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    ) {
        ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)
    }
    #[inline]
    pub unsafe fn InsertChars(
        &mut self,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSizeCallbackData"][::std::mem::size_of::<ImGuiSizeCallbackData>() - 32usize];
    ["Alignment of ImGuiSizeCallbackData"]
        [::std::mem::align_of::<ImGuiSizeCallbackData>() - 8usize];
    ["Offset of field: ImGuiSizeCallbackData::UserData"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, UserData) - 0usize];
    ["Offset of field: ImGuiSizeCallbackData::Pos"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, Pos) - 8usize];
    ["Offset of field: ImGuiSizeCallbackData::CurrentSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, CurrentSize) - 16usize];
    ["Offset of field: ImGuiSizeCallbackData::DesiredSize"]
        [::std::mem::offset_of!(ImGuiSizeCallbackData, DesiredSize) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub FocusRouteParentWindowId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowClass"][::std::mem::size_of::<ImGuiWindowClass>() - 32usize];
    ["Alignment of ImGuiWindowClass"][::std::mem::align_of::<ImGuiWindowClass>() - 4usize];
    ["Offset of field: ImGuiWindowClass::ClassId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ClassId) - 0usize];
    ["Offset of field: ImGuiWindowClass::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiWindowClass, ParentViewportId) - 4usize];
    ["Offset of field: ImGuiWindowClass::FocusRouteParentWindowId"]
        [::std::mem::offset_of!(ImGuiWindowClass, FocusRouteParentWindowId) - 8usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideSet) - 12usize];
    ["Offset of field: ImGuiWindowClass::ViewportFlagsOverrideClear"]
        [::std::mem::offset_of!(ImGuiWindowClass, ViewportFlagsOverrideClear) - 16usize];
    ["Offset of field: ImGuiWindowClass::TabItemFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, TabItemFlagsOverrideSet) - 20usize];
    ["Offset of field: ImGuiWindowClass::DockNodeFlagsOverrideSet"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockNodeFlagsOverrideSet) - 24usize];
    ["Offset of field: ImGuiWindowClass::DockingAlwaysTabBar"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAlwaysTabBar) - 28usize];
    ["Offset of field: ImGuiWindowClass::DockingAllowUnclassed"]
        [::std::mem::offset_of!(ImGuiWindowClass, DockingAllowUnclassed) - 29usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPayload"][::std::mem::size_of::<ImGuiPayload>() - 64usize];
    ["Alignment of ImGuiPayload"][::std::mem::align_of::<ImGuiPayload>() - 8usize];
    ["Offset of field: ImGuiPayload::Data"][::std::mem::offset_of!(ImGuiPayload, Data) - 0usize];
    ["Offset of field: ImGuiPayload::DataSize"]
        [::std::mem::offset_of!(ImGuiPayload, DataSize) - 8usize];
    ["Offset of field: ImGuiPayload::SourceId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceId) - 12usize];
    ["Offset of field: ImGuiPayload::SourceParentId"]
        [::std::mem::offset_of!(ImGuiPayload, SourceParentId) - 16usize];
    ["Offset of field: ImGuiPayload::DataFrameCount"]
        [::std::mem::offset_of!(ImGuiPayload, DataFrameCount) - 20usize];
    ["Offset of field: ImGuiPayload::DataType"]
        [::std::mem::offset_of!(ImGuiPayload, DataType) - 24usize];
    ["Offset of field: ImGuiPayload::Preview"]
        [::std::mem::offset_of!(ImGuiPayload, Preview) - 57usize];
    ["Offset of field: ImGuiPayload::Delivery"]
        [::std::mem::offset_of!(ImGuiPayload, Delivery) - 58usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOnceUponAFrame"][::std::mem::size_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Alignment of ImGuiOnceUponAFrame"][::std::mem::align_of::<ImGuiOnceUponAFrame>() - 4usize];
    ["Offset of field: ImGuiOnceUponAFrame::RefFrame"]
        [::std::mem::offset_of!(ImGuiOnceUponAFrame, RefFrame) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector<ImGuiTextFilter_ImGuiTextRange>,
    pub CountGrep: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter_ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextFilter_ImGuiTextRange"]
        [::std::mem::size_of::<ImGuiTextFilter_ImGuiTextRange>() - 16usize];
    ["Alignment of ImGuiTextFilter_ImGuiTextRange"]
        [::std::mem::align_of::<ImGuiTextFilter_ImGuiTextRange>() - 8usize];
    ["Offset of field: ImGuiTextFilter_ImGuiTextRange::b"]
        [::std::mem::offset_of!(ImGuiTextFilter_ImGuiTextRange, b) - 0usize];
    ["Offset of field: ImGuiTextFilter_ImGuiTextRange::e"]
        [::std::mem::offset_of!(ImGuiTextFilter_ImGuiTextRange, e) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E"]
    pub fn ImGuiTextFilter_ImGuiTextRange_split(
        this: *const ImGuiTextFilter_ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    );
}
impl ImGuiTextFilter_ImGuiTextRange {
    #[inline]
    pub unsafe fn split(
        &self,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector<ImGuiTextFilter_ImGuiTextRange>,
    ) {
        ImGuiTextFilter_ImGuiTextRange_split(self, separator, out)
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextFilter"][::std::mem::size_of::<ImGuiTextFilter>() - 280usize];
    ["Alignment of ImGuiTextFilter"][::std::mem::align_of::<ImGuiTextFilter>() - 8usize];
    ["Offset of field: ImGuiTextFilter::InputBuf"]
        [::std::mem::offset_of!(ImGuiTextFilter, InputBuf) - 0usize];
    ["Offset of field: ImGuiTextFilter::Filters"]
        [::std::mem::offset_of!(ImGuiTextFilter, Filters) - 256usize];
    ["Offset of field: ImGuiTextFilter::CountGrep"]
        [::std::mem::offset_of!(ImGuiTextFilter, CountGrep) - 272usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilter4DrawEPKcf"]
    pub fn ImGuiTextFilter_Draw(
        this: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK15ImGuiTextFilter10PassFilterEPKcS1_"]
    pub fn ImGuiTextFilter_PassFilter(
        this: *const ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilter5BuildEv"]
    pub fn ImGuiTextFilter_Build(this: *mut ImGuiTextFilter);
}
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextFilterC1EPKc"]
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        this: *mut ImGuiTextFilter,
        default_filter: *const ::std::os::raw::c_char,
    );
}
impl ImGuiTextFilter {
    #[inline]
    pub unsafe fn Draw(&mut self, label: *const ::std::os::raw::c_char, width: f32) -> bool {
        ImGuiTextFilter_Draw(self, label, width)
    }
    #[inline]
    pub unsafe fn PassFilter(
        &self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool {
        ImGuiTextFilter_PassFilter(self, text, text_end)
    }
    #[inline]
    pub unsafe fn Build(&mut self) {
        ImGuiTextFilter_Build(self)
    }
    #[inline]
    pub unsafe fn new(default_filter: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTextFilter_ImGuiTextFilter(__bindgen_tmp.as_mut_ptr(), default_filter);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer11EmptyStringE"]
    pub static mut ImGuiTextBuffer_EmptyString: [::std::os::raw::c_char; 1usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextBuffer"][::std::mem::size_of::<ImGuiTextBuffer>() - 16usize];
    ["Alignment of ImGuiTextBuffer"][::std::mem::align_of::<ImGuiTextBuffer>() - 8usize];
    ["Offset of field: ImGuiTextBuffer::Buf"]
        [::std::mem::offset_of!(ImGuiTextBuffer, Buf) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer6appendEPKcS1_"]
    pub fn ImGuiTextBuffer_append(
        this: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer7appendfEPKcz"]
    pub fn ImGuiTextBuffer_appendf(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiTextBuffer8appendfvEPKcP13__va_list_tag"]
    pub fn ImGuiTextBuffer_appendfv(
        this: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
impl ImGuiTextBuffer {
    #[inline]
    pub unsafe fn append(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) {
        ImGuiTextBuffer_append(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn appendfv(
        &mut self,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) {
        ImGuiTextBuffer_appendfv(self, fmt, args)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>() - 8usize];
    ["Alignment of ImGuiStoragePair__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>() - 8usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_i"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_i) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_f"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_f) - 0usize];
    ["Offset of field: ImGuiStoragePair__bindgen_ty_1::val_p"]
        [::std::mem::offset_of!(ImGuiStoragePair__bindgen_ty_1, val_p) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStoragePair"][::std::mem::size_of::<ImGuiStoragePair>() - 16usize];
    ["Alignment of ImGuiStoragePair"][::std::mem::align_of::<ImGuiStoragePair>() - 8usize];
    ["Offset of field: ImGuiStoragePair::key"]
        [::std::mem::offset_of!(ImGuiStoragePair, key) - 0usize];
};
#[repr(C)]
pub struct ImGuiStorage {
    pub Data: ImVector<ImGuiStoragePair>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStorage"][::std::mem::size_of::<ImGuiStorage>() - 16usize];
    ["Alignment of ImGuiStorage"][::std::mem::align_of::<ImGuiStorage>() - 8usize];
    ["Offset of field: ImGuiStorage::Data"][::std::mem::offset_of!(ImGuiStorage, Data) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage6GetIntEji"]
    pub fn ImGuiStorage_GetInt(
        this: *const ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage6SetIntEji"]
    pub fn ImGuiStorage_SetInt(this: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage7GetBoolEjb"]
    pub fn ImGuiStorage_GetBool(this: *const ImGuiStorage, key: ImGuiID, default_val: bool)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage7SetBoolEjb"]
    pub fn ImGuiStorage_SetBool(this: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage8GetFloatEjf"]
    pub fn ImGuiStorage_GetFloat(this: *const ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage8SetFloatEjf"]
    pub fn ImGuiStorage_SetFloat(this: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZNK12ImGuiStorage10GetVoidPtrEj"]
    pub fn ImGuiStorage_GetVoidPtr(
        this: *const ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage10SetVoidPtrEjPv"]
    pub fn ImGuiStorage_SetVoidPtr(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage9GetIntRefEji"]
    pub fn ImGuiStorage_GetIntRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage10GetBoolRefEjb"]
    pub fn ImGuiStorage_GetBoolRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage11GetFloatRefEjf"]
    pub fn ImGuiStorage_GetFloatRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage13GetVoidPtrRefEjPv"]
    pub fn ImGuiStorage_GetVoidPtrRef(
        this: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage14BuildSortByKeyEv"]
    pub fn ImGuiStorage_BuildSortByKey(this: *mut ImGuiStorage);
}
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiStorage9SetAllIntEi"]
    pub fn ImGuiStorage_SetAllInt(this: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
impl ImGuiStorage {
    #[inline]
    pub unsafe fn GetInt(
        &self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImGuiStorage_GetInt(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetInt(&mut self, key: ImGuiID, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetInt(self, key, val)
    }
    #[inline]
    pub unsafe fn GetBool(&self, key: ImGuiID, default_val: bool) -> bool {
        ImGuiStorage_GetBool(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetBool(&mut self, key: ImGuiID, val: bool) {
        ImGuiStorage_SetBool(self, key, val)
    }
    #[inline]
    pub unsafe fn GetFloat(&self, key: ImGuiID, default_val: f32) -> f32 {
        ImGuiStorage_GetFloat(self, key, default_val)
    }
    #[inline]
    pub unsafe fn SetFloat(&mut self, key: ImGuiID, val: f32) {
        ImGuiStorage_SetFloat(self, key, val)
    }
    #[inline]
    pub unsafe fn GetVoidPtr(&self, key: ImGuiID) -> *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtr(self, key)
    }
    #[inline]
    pub unsafe fn SetVoidPtr(&mut self, key: ImGuiID, val: *mut ::std::os::raw::c_void) {
        ImGuiStorage_SetVoidPtr(self, key, val)
    }
    #[inline]
    pub unsafe fn GetIntRef(
        &mut self,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int {
        ImGuiStorage_GetIntRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetBoolRef(&mut self, key: ImGuiID, default_val: bool) -> *mut bool {
        ImGuiStorage_GetBoolRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetFloatRef(&mut self, key: ImGuiID, default_val: f32) -> *mut f32 {
        ImGuiStorage_GetFloatRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn GetVoidPtrRef(
        &mut self,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void {
        ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    }
    #[inline]
    pub unsafe fn BuildSortByKey(&mut self) {
        ImGuiStorage_BuildSortByKey(self)
    }
    #[inline]
    pub unsafe fn SetAllInt(&mut self, val: ::std::os::raw::c_int) {
        ImGuiStorage_SetAllInt(self, val)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiListClipper {
    pub Ctx: *mut ImGuiContext,
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub StartSeekOffsetY: f64,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipper"][::std::mem::size_of::<ImGuiListClipper>() - 48usize];
    ["Alignment of ImGuiListClipper"][::std::mem::align_of::<ImGuiListClipper>() - 8usize];
    ["Offset of field: ImGuiListClipper::Ctx"]
        [::std::mem::offset_of!(ImGuiListClipper, Ctx) - 0usize];
    ["Offset of field: ImGuiListClipper::DisplayStart"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayStart) - 8usize];
    ["Offset of field: ImGuiListClipper::DisplayEnd"]
        [::std::mem::offset_of!(ImGuiListClipper, DisplayEnd) - 12usize];
    ["Offset of field: ImGuiListClipper::ItemsCount"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsCount) - 16usize];
    ["Offset of field: ImGuiListClipper::ItemsHeight"]
        [::std::mem::offset_of!(ImGuiListClipper, ItemsHeight) - 20usize];
    ["Offset of field: ImGuiListClipper::StartPosY"]
        [::std::mem::offset_of!(ImGuiListClipper, StartPosY) - 24usize];
    ["Offset of field: ImGuiListClipper::StartSeekOffsetY"]
        [::std::mem::offset_of!(ImGuiListClipper, StartSeekOffsetY) - 32usize];
    ["Offset of field: ImGuiListClipper::TempData"]
        [::std::mem::offset_of!(ImGuiListClipper, TempData) - 40usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper5BeginEif"]
    pub fn ImGuiListClipper_Begin(
        this: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper3EndEv"]
    pub fn ImGuiListClipper_End(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper4StepEv"]
    pub fn ImGuiListClipper_Step(this: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper19IncludeItemsByIndexEii"]
    pub fn ImGuiListClipper_IncludeItemsByIndex(
        this: *mut ImGuiListClipper,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipper17SeekCursorForItemEi"]
    pub fn ImGuiListClipper_SeekCursorForItem(
        this: *mut ImGuiListClipper,
        item_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipperC1Ev"]
    pub fn ImGuiListClipper_ImGuiListClipper(this: *mut ImGuiListClipper);
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiListClipperD1Ev"]
    pub fn ImGuiListClipper_ImGuiListClipper_destructor(this: *mut ImGuiListClipper);
}
impl ImGuiListClipper {
    #[inline]
    pub unsafe fn Begin(&mut self, items_count: ::std::os::raw::c_int, items_height: f32) {
        ImGuiListClipper_Begin(self, items_count, items_height)
    }
    #[inline]
    pub unsafe fn End(&mut self) {
        ImGuiListClipper_End(self)
    }
    #[inline]
    pub unsafe fn Step(&mut self) -> bool {
        ImGuiListClipper_Step(self)
    }
    #[inline]
    pub unsafe fn IncludeItemsByIndex(
        &mut self,
        item_begin: ::std::os::raw::c_int,
        item_end: ::std::os::raw::c_int,
    ) {
        ImGuiListClipper_IncludeItemsByIndex(self, item_begin, item_end)
    }
    #[inline]
    pub unsafe fn SeekCursorForItem(&mut self, item_index: ::std::os::raw::c_int) {
        ImGuiListClipper_SeekCursorForItem(self, item_index)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiListClipper_ImGuiListClipper(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiListClipper_ImGuiListClipper_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImColor"][::std::mem::size_of::<ImColor>() - 16usize];
    ["Alignment of ImColor"][::std::mem::align_of::<ImColor>() - 4usize];
    ["Offset of field: ImColor::Value"][::std::mem::offset_of!(ImColor, Value) - 0usize];
};
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_None: ImGuiMultiSelectFlags_ = 0;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SingleSelect: ImGuiMultiSelectFlags_ = 1;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoSelectAll: ImGuiMultiSelectFlags_ = 2;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoRangeSelect: ImGuiMultiSelectFlags_ = 4;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoSelect: ImGuiMultiSelectFlags_ = 8;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClear: ImGuiMultiSelectFlags_ = 16;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NoAutoClearOnReselect:
    ImGuiMultiSelectFlags_ = 32;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect1d: ImGuiMultiSelectFlags_ = 64;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelect2d: ImGuiMultiSelectFlags_ = 128;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_BoxSelectNoScroll: ImGuiMultiSelectFlags_ =
    256;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnEscape: ImGuiMultiSelectFlags_ = 512;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ClearOnClickVoid: ImGuiMultiSelectFlags_ =
    1024;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeWindow: ImGuiMultiSelectFlags_ = 2048;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_ScopeRect: ImGuiMultiSelectFlags_ = 4096;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClick: ImGuiMultiSelectFlags_ = 8192;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_SelectOnClickRelease:
    ImGuiMultiSelectFlags_ = 16384;
pub const ImGuiMultiSelectFlags__ImGuiMultiSelectFlags_NavWrapX: ImGuiMultiSelectFlags_ = 65536;
pub type ImGuiMultiSelectFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiMultiSelectIO {
    pub Requests: ImVector<ImGuiSelectionRequest>,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
    pub NavIdSelected: bool,
    pub RangeSrcReset: bool,
    pub ItemsCount: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMultiSelectIO"][::std::mem::size_of::<ImGuiMultiSelectIO>() - 40usize];
    ["Alignment of ImGuiMultiSelectIO"][::std::mem::align_of::<ImGuiMultiSelectIO>() - 8usize];
    ["Offset of field: ImGuiMultiSelectIO::Requests"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, Requests) - 0usize];
    ["Offset of field: ImGuiMultiSelectIO::RangeSrcItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, RangeSrcItem) - 16usize];
    ["Offset of field: ImGuiMultiSelectIO::NavIdItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, NavIdItem) - 24usize];
    ["Offset of field: ImGuiMultiSelectIO::NavIdSelected"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, NavIdSelected) - 32usize];
    ["Offset of field: ImGuiMultiSelectIO::RangeSrcReset"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, RangeSrcReset) - 33usize];
    ["Offset of field: ImGuiMultiSelectIO::ItemsCount"]
        [::std::mem::offset_of!(ImGuiMultiSelectIO, ItemsCount) - 36usize];
};
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_None: ImGuiSelectionRequestType = 0;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetAll: ImGuiSelectionRequestType = 1;
pub const ImGuiSelectionRequestType_ImGuiSelectionRequestType_SetRange: ImGuiSelectionRequestType =
    2;
pub type ImGuiSelectionRequestType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionRequest {
    pub Type: ImGuiSelectionRequestType,
    pub Selected: bool,
    pub RangeDirection: ImS8,
    pub RangeFirstItem: ImGuiSelectionUserData,
    pub RangeLastItem: ImGuiSelectionUserData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionRequest"][::std::mem::size_of::<ImGuiSelectionRequest>() - 24usize];
    ["Alignment of ImGuiSelectionRequest"]
        [::std::mem::align_of::<ImGuiSelectionRequest>() - 8usize];
    ["Offset of field: ImGuiSelectionRequest::Type"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, Type) - 0usize];
    ["Offset of field: ImGuiSelectionRequest::Selected"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, Selected) - 4usize];
    ["Offset of field: ImGuiSelectionRequest::RangeDirection"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeDirection) - 5usize];
    ["Offset of field: ImGuiSelectionRequest::RangeFirstItem"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeFirstItem) - 8usize];
    ["Offset of field: ImGuiSelectionRequest::RangeLastItem"]
        [::std::mem::offset_of!(ImGuiSelectionRequest, RangeLastItem) - 16usize];
};
#[repr(C)]
pub struct ImGuiSelectionBasicStorage {
    pub Size: ::std::os::raw::c_int,
    pub PreserveOrder: bool,
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterIndexToStorageId: ::std::option::Option<
        extern "C" fn(
            self_: *mut ImGuiSelectionBasicStorage,
            idx: ::std::os::raw::c_int,
        ) -> ImGuiID,
    >,
    pub _SelectionOrder: ::std::os::raw::c_int,
    pub _Storage: ImGuiStorage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionBasicStorage"]
        [::std::mem::size_of::<ImGuiSelectionBasicStorage>() - 48usize];
    ["Alignment of ImGuiSelectionBasicStorage"]
        [::std::mem::align_of::<ImGuiSelectionBasicStorage>() - 8usize];
    ["Offset of field: ImGuiSelectionBasicStorage::Size"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, Size) - 0usize];
    ["Offset of field: ImGuiSelectionBasicStorage::PreserveOrder"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, PreserveOrder) - 4usize];
    ["Offset of field: ImGuiSelectionBasicStorage::UserData"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, UserData) - 8usize];
    ["Offset of field: ImGuiSelectionBasicStorage::AdapterIndexToStorageId"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, AdapterIndexToStorageId) - 16usize];
    ["Offset of field: ImGuiSelectionBasicStorage::_SelectionOrder"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, _SelectionOrder) - 24usize];
    ["Offset of field: ImGuiSelectionBasicStorage::_Storage"]
        [::std::mem::offset_of!(ImGuiSelectionBasicStorage, _Storage) - 32usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorage13ApplyRequestsEP18ImGuiMultiSelectIO"]
    pub fn ImGuiSelectionBasicStorage_ApplyRequests(
        this: *mut ImGuiSelectionBasicStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK26ImGuiSelectionBasicStorage8ContainsEj"]
    pub fn ImGuiSelectionBasicStorage_Contains(
        this: *const ImGuiSelectionBasicStorage,
        id: ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorage5ClearEv"]
    pub fn ImGuiSelectionBasicStorage_Clear(this: *mut ImGuiSelectionBasicStorage);
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorage4SwapERS_"]
    pub fn ImGuiSelectionBasicStorage_Swap(
        this: *mut ImGuiSelectionBasicStorage,
        r: *mut ImGuiSelectionBasicStorage,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorage15SetItemSelectedEjb"]
    pub fn ImGuiSelectionBasicStorage_SetItemSelected(
        this: *mut ImGuiSelectionBasicStorage,
        id: ImGuiID,
        selected: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorage19GetNextSelectedItemEPPvPj"]
    pub fn ImGuiSelectionBasicStorage_GetNextSelectedItem(
        this: *mut ImGuiSelectionBasicStorage,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN26ImGuiSelectionBasicStorageC1Ev"]
    pub fn ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(
        this: *mut ImGuiSelectionBasicStorage,
    );
}
impl ImGuiSelectionBasicStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionBasicStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn Contains(&self, id: ImGuiID) -> bool {
        ImGuiSelectionBasicStorage_Contains(self, id)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImGuiSelectionBasicStorage_Clear(self)
    }
    #[inline]
    pub unsafe fn Swap(&mut self, r: *mut ImGuiSelectionBasicStorage) {
        ImGuiSelectionBasicStorage_Swap(self, r)
    }
    #[inline]
    pub unsafe fn SetItemSelected(&mut self, id: ImGuiID, selected: bool) {
        ImGuiSelectionBasicStorage_SetItemSelected(self, id, selected)
    }
    #[inline]
    pub unsafe fn GetNextSelectedItem(
        &mut self,
        opaque_it: *mut *mut ::std::os::raw::c_void,
        out_id: *mut ImGuiID,
    ) -> bool {
        ImGuiSelectionBasicStorage_GetNextSelectedItem(self, opaque_it, out_id)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSelectionExternalStorage {
    pub UserData: *mut ::std::os::raw::c_void,
    pub AdapterSetItemSelected: ::std::option::Option<
        extern "C" fn(
            self_: *mut ImGuiSelectionExternalStorage,
            idx: ::std::os::raw::c_int,
            selected: bool,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSelectionExternalStorage"]
        [::std::mem::size_of::<ImGuiSelectionExternalStorage>() - 16usize];
    ["Alignment of ImGuiSelectionExternalStorage"]
        [::std::mem::align_of::<ImGuiSelectionExternalStorage>() - 8usize];
    ["Offset of field: ImGuiSelectionExternalStorage::UserData"]
        [::std::mem::offset_of!(ImGuiSelectionExternalStorage, UserData) - 0usize];
    ["Offset of field: ImGuiSelectionExternalStorage::AdapterSetItemSelected"]
        [::std::mem::offset_of!(ImGuiSelectionExternalStorage, AdapterSetItemSelected) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN29ImGuiSelectionExternalStorage13ApplyRequestsEP18ImGuiMultiSelectIO"]
    pub fn ImGuiSelectionExternalStorage_ApplyRequests(
        this: *mut ImGuiSelectionExternalStorage,
        ms_io: *mut ImGuiMultiSelectIO,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN29ImGuiSelectionExternalStorageC1Ev"]
    pub fn ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(
        this: *mut ImGuiSelectionExternalStorage,
    );
}
impl ImGuiSelectionExternalStorage {
    #[inline]
    pub unsafe fn ApplyRequests(&mut self, ms_io: *mut ImGuiMultiSelectIO) {
        ImGuiSelectionExternalStorage_ApplyRequests(self, ms_io)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type ImDrawCallback = ::std::option::Option<
    extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
    pub UserCallbackDataSize: ::std::os::raw::c_int,
    pub UserCallbackDataOffset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmd"][::std::mem::size_of::<ImDrawCmd>() - 64usize];
    ["Alignment of ImDrawCmd"][::std::mem::align_of::<ImDrawCmd>() - 8usize];
    ["Offset of field: ImDrawCmd::ClipRect"][::std::mem::offset_of!(ImDrawCmd, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmd::TextureId"]
        [::std::mem::offset_of!(ImDrawCmd, TextureId) - 16usize];
    ["Offset of field: ImDrawCmd::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, VtxOffset) - 24usize];
    ["Offset of field: ImDrawCmd::IdxOffset"]
        [::std::mem::offset_of!(ImDrawCmd, IdxOffset) - 28usize];
    ["Offset of field: ImDrawCmd::ElemCount"]
        [::std::mem::offset_of!(ImDrawCmd, ElemCount) - 32usize];
    ["Offset of field: ImDrawCmd::UserCallback"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallback) - 40usize];
    ["Offset of field: ImDrawCmd::UserCallbackData"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackData) - 48usize];
    ["Offset of field: ImDrawCmd::UserCallbackDataSize"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackDataSize) - 56usize];
    ["Offset of field: ImDrawCmd::UserCallbackDataOffset"]
        [::std::mem::offset_of!(ImDrawCmd, UserCallbackDataOffset) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawVert"][::std::mem::size_of::<ImDrawVert>() - 20usize];
    ["Alignment of ImDrawVert"][::std::mem::align_of::<ImDrawVert>() - 4usize];
    ["Offset of field: ImDrawVert::pos"][::std::mem::offset_of!(ImDrawVert, pos) - 0usize];
    ["Offset of field: ImDrawVert::uv"][::std::mem::offset_of!(ImDrawVert, uv) - 8usize];
    ["Offset of field: ImDrawVert::col"][::std::mem::offset_of!(ImDrawVert, col) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawCmdHeader"][::std::mem::size_of::<ImDrawCmdHeader>() - 32usize];
    ["Alignment of ImDrawCmdHeader"][::std::mem::align_of::<ImDrawCmdHeader>() - 8usize];
    ["Offset of field: ImDrawCmdHeader::ClipRect"]
        [::std::mem::offset_of!(ImDrawCmdHeader, ClipRect) - 0usize];
    ["Offset of field: ImDrawCmdHeader::TextureId"]
        [::std::mem::offset_of!(ImDrawCmdHeader, TextureId) - 16usize];
    ["Offset of field: ImDrawCmdHeader::VtxOffset"]
        [::std::mem::offset_of!(ImDrawCmdHeader, VtxOffset) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector<ImDrawCmd>,
    pub _IdxBuffer: ImVector<ImDrawIdx>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawChannel"][::std::mem::size_of::<ImDrawChannel>() - 32usize];
    ["Alignment of ImDrawChannel"][::std::mem::align_of::<ImDrawChannel>() - 8usize];
    ["Offset of field: ImDrawChannel::_CmdBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _CmdBuffer) - 0usize];
    ["Offset of field: ImDrawChannel::_IdxBuffer"]
        [::std::mem::offset_of!(ImDrawChannel, _IdxBuffer) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector<ImDrawChannel>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawListSplitter"][::std::mem::size_of::<ImDrawListSplitter>() - 24usize];
    ["Alignment of ImDrawListSplitter"][::std::mem::align_of::<ImDrawListSplitter>() - 8usize];
    ["Offset of field: ImDrawListSplitter::_Current"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Current) - 0usize];
    ["Offset of field: ImDrawListSplitter::_Count"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Count) - 4usize];
    ["Offset of field: ImDrawListSplitter::_Channels"]
        [::std::mem::offset_of!(ImDrawListSplitter, _Channels) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN18ImDrawListSplitter15ClearFreeMemoryEv"]
    pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut ImDrawListSplitter);
}
extern "C" {
    #[link_name = "\u{1}_ZN18ImDrawListSplitter5SplitEP10ImDrawListi"]
    pub fn ImDrawListSplitter_Split(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN18ImDrawListSplitter5MergeEP10ImDrawList"]
    pub fn ImDrawListSplitter_Merge(this: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN18ImDrawListSplitter17SetCurrentChannelEP10ImDrawListi"]
    pub fn ImDrawListSplitter_SetCurrentChannel(
        this: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
impl ImDrawListSplitter {
    #[inline]
    pub unsafe fn ClearFreeMemory(&mut self) {
        ImDrawListSplitter_ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn Split(&mut self, draw_list: *mut ImDrawList, count: ::std::os::raw::c_int) {
        ImDrawListSplitter_Split(self, draw_list, count)
    }
    #[inline]
    pub unsafe fn Merge(&mut self, draw_list: *mut ImDrawList) {
        ImDrawListSplitter_Merge(self, draw_list)
    }
    #[inline]
    pub unsafe fn SetCurrentChannel(
        &mut self,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    ) {
        ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
    }
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_uint;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector<ImDrawCmd>,
    pub IdxBuffer: ImVector<ImDrawIdx>,
    pub VtxBuffer: ImVector<ImDrawVert>,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *mut ImDrawListSharedData,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _Path: ImVector<ImVec2>,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _ClipRectStack: ImVector<ImVec4>,
    pub _TextureIdStack: ImVector<ImTextureID>,
    pub _CallbacksDataBuf: ImVector<ImU8>,
    pub _FringeScale: f32,
    pub _OwnerName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawList"][::std::mem::size_of::<ImDrawList>() - 216usize];
    ["Alignment of ImDrawList"][::std::mem::align_of::<ImDrawList>() - 8usize];
    ["Offset of field: ImDrawList::CmdBuffer"]
        [::std::mem::offset_of!(ImDrawList, CmdBuffer) - 0usize];
    ["Offset of field: ImDrawList::IdxBuffer"]
        [::std::mem::offset_of!(ImDrawList, IdxBuffer) - 16usize];
    ["Offset of field: ImDrawList::VtxBuffer"]
        [::std::mem::offset_of!(ImDrawList, VtxBuffer) - 32usize];
    ["Offset of field: ImDrawList::Flags"][::std::mem::offset_of!(ImDrawList, Flags) - 48usize];
    ["Offset of field: ImDrawList::_VtxCurrentIdx"]
        [::std::mem::offset_of!(ImDrawList, _VtxCurrentIdx) - 52usize];
    ["Offset of field: ImDrawList::_Data"][::std::mem::offset_of!(ImDrawList, _Data) - 56usize];
    ["Offset of field: ImDrawList::_VtxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _VtxWritePtr) - 64usize];
    ["Offset of field: ImDrawList::_IdxWritePtr"]
        [::std::mem::offset_of!(ImDrawList, _IdxWritePtr) - 72usize];
    ["Offset of field: ImDrawList::_Path"][::std::mem::offset_of!(ImDrawList, _Path) - 80usize];
    ["Offset of field: ImDrawList::_CmdHeader"]
        [::std::mem::offset_of!(ImDrawList, _CmdHeader) - 96usize];
    ["Offset of field: ImDrawList::_Splitter"]
        [::std::mem::offset_of!(ImDrawList, _Splitter) - 128usize];
    ["Offset of field: ImDrawList::_ClipRectStack"]
        [::std::mem::offset_of!(ImDrawList, _ClipRectStack) - 152usize];
    ["Offset of field: ImDrawList::_TextureIdStack"]
        [::std::mem::offset_of!(ImDrawList, _TextureIdStack) - 168usize];
    ["Offset of field: ImDrawList::_CallbacksDataBuf"]
        [::std::mem::offset_of!(ImDrawList, _CallbacksDataBuf) - 184usize];
    ["Offset of field: ImDrawList::_FringeScale"]
        [::std::mem::offset_of!(ImDrawList, _FringeScale) - 200usize];
    ["Offset of field: ImDrawList::_OwnerName"]
        [::std::mem::offset_of!(ImDrawList, _OwnerName) - 208usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b"]
    pub fn ImDrawList_PushClipRect(
        this: *mut ImDrawList,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList22PushClipRectFullScreenEv"]
    pub fn ImDrawList_PushClipRectFullScreen(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11PopClipRectEv"]
    pub fn ImDrawList_PopClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13PushTextureIDEy"]
    pub fn ImDrawList_PushTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12PopTextureIDEv"]
    pub fn ImDrawList_PopTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddLineERK6ImVec2S2_jf"]
    pub fn ImDrawList_AddLine(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif"]
    pub fn ImDrawList_AddRect(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi"]
    pub fn ImDrawList_AddRectFilled(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj"]
    pub fn ImDrawList_AddRectFilledMultiColor(
        this: *mut ImDrawList,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf"]
    pub fn ImDrawList_AddQuad(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_AddQuadFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf"]
    pub fn ImDrawList_AddTriangle(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j"]
    pub fn ImDrawList_AddTriangleFilled(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList9AddCircleERK6ImVec2fjif"]
    pub fn ImDrawList_AddCircle(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15AddCircleFilledERK6ImVec2fji"]
    pub fn ImDrawList_AddCircleFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddNgonERK6ImVec2fjif"]
    pub fn ImDrawList_AddNgon(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13AddNgonFilledERK6ImVec2fji"]
    pub fn ImDrawList_AddNgonFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10AddEllipseERK6ImVec2S2_jfif"]
    pub fn ImDrawList_AddEllipse(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList16AddEllipseFilledERK6ImVec2S2_jfi"]
    pub fn ImDrawList_AddEllipseFilled(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_"]
    pub fn ImDrawList_AddText(
        this: *mut ImDrawList,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList7AddTextEP6ImFontfRK6ImVec2jPKcS6_fPK6ImVec4"]
    pub fn ImDrawList_AddText1(
        this: *mut ImDrawList,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList14AddBezierCubicERK6ImVec2S2_S2_S2_jfi"]
    pub fn ImDrawList_AddBezierCubic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList18AddBezierQuadraticERK6ImVec2S2_S2_jfi"]
    pub fn ImDrawList_AddBezierQuadratic(
        this: *mut ImDrawList,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddPolylineEPK6ImVec2ijif"]
    pub fn ImDrawList_AddPolyline(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij"]
    pub fn ImDrawList_AddConvexPolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList20AddConcavePolyFilledEPK6ImVec2ij"]
    pub fn ImDrawList_AddConcavePolyFilled(
        this: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8AddImageEyRK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_AddImage(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList12AddImageQuadEyRK6ImVec2S2_S2_S2_S2_S2_S2_S2_j"]
    pub fn ImDrawList_AddImageQuad(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList15AddImageRoundedEyRK6ImVec2S2_S2_S2_jfi"]
    pub fn ImDrawList_AddImageRounded(
        this: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList9PathArcToERK6ImVec2fffi"]
    pub fn ImDrawList_PathArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13PathArcToFastERK6ImVec2fii"]
    pub fn ImDrawList_PathArcToFast(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList19PathEllipticalArcToERK6ImVec2S2_fffi"]
    pub fn ImDrawList_PathEllipticalArcTo(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList22PathBezierCubicCurveToERK6ImVec2S2_S2_i"]
    pub fn ImDrawList_PathBezierCubicCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList26PathBezierQuadraticCurveToERK6ImVec2S2_i"]
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        this: *mut ImDrawList,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8PathRectERK6ImVec2S2_fi"]
    pub fn ImDrawList_PathRect(
        this: *mut ImDrawList,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPvm"]
    pub fn ImDrawList_AddCallback(
        this: *mut ImDrawList,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10AddDrawCmdEv"]
    pub fn ImDrawList_AddDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ImDrawList11CloneOutputEv"]
    pub fn ImDrawList_CloneOutput(this: *const ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11PrimReserveEii"]
    pub fn ImDrawList_PrimReserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13PrimUnreserveEii"]
    pub fn ImDrawList_PrimUnreserve(
        this: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList8PrimRectERK6ImVec2S2_j"]
    pub fn ImDrawList_PrimRect(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j"]
    pub fn ImDrawList_PrimRectUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j"]
    pub fn ImDrawList_PrimQuadUV(
        this: *mut ImDrawList,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17_ResetForNewFrameEv"]
    pub fn ImDrawList__ResetForNewFrame(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList16_ClearFreeMemoryEv"]
    pub fn ImDrawList__ClearFreeMemory(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17_PopUnusedDrawCmdEv"]
    pub fn ImDrawList__PopUnusedDrawCmd(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList17_TryMergeDrawCmdsEv"]
    pub fn ImDrawList__TryMergeDrawCmds(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList18_OnChangedClipRectEv"]
    pub fn ImDrawList__OnChangedClipRect(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList19_OnChangedTextureIDEv"]
    pub fn ImDrawList__OnChangedTextureID(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList19_OnChangedVtxOffsetEv"]
    pub fn ImDrawList__OnChangedVtxOffset(this: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList13_SetTextureIDEy"]
    pub fn ImDrawList__SetTextureID(this: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    #[link_name = "\u{1}_ZNK10ImDrawList27_CalcCircleAutoSegmentCountEf"]
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        this: *const ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList16_PathArcToFastExERK6ImVec2fiii"]
    pub fn ImDrawList__PathArcToFastEx(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawList11_PathArcToNERK6ImVec2fffi"]
    pub fn ImDrawList__PathArcToN(
        this: *mut ImDrawList,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawListC1EP20ImDrawListSharedData"]
    pub fn ImDrawList_ImDrawList(this: *mut ImDrawList, shared_data: *mut ImDrawListSharedData);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawListD1Ev"]
    pub fn ImDrawList_ImDrawList_destructor(this: *mut ImDrawList);
}
impl ImDrawList {
    #[inline]
    pub unsafe fn PushClipRect(
        &mut self,
        clip_rect_min: *const ImVec2,
        clip_rect_max: *const ImVec2,
        intersect_with_current_clip_rect: bool,
    ) {
        ImDrawList_PushClipRect(
            self,
            clip_rect_min,
            clip_rect_max,
            intersect_with_current_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn PushClipRectFullScreen(&mut self) {
        ImDrawList_PushClipRectFullScreen(self)
    }
    #[inline]
    pub unsafe fn PopClipRect(&mut self) {
        ImDrawList_PopClipRect(self)
    }
    #[inline]
    pub unsafe fn PushTextureID(&mut self, texture_id: ImTextureID) {
        ImDrawList_PushTextureID(self, texture_id)
    }
    #[inline]
    pub unsafe fn PopTextureID(&mut self) {
        ImDrawList_PopTextureID(self)
    }
    #[inline]
    pub unsafe fn AddLine(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddLine(self, p1, p2, col, thickness)
    }
    #[inline]
    pub unsafe fn AddRect(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddRectFilled(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddRectFilledMultiColor(
        &mut self,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    ) {
        ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left,
        )
    }
    #[inline]
    pub unsafe fn AddQuad(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
    }
    #[inline]
    pub unsafe fn AddQuadFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
    }
    #[inline]
    pub unsafe fn AddTriangle(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
    ) {
        ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
    }
    #[inline]
    pub unsafe fn AddTriangleFilled(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
    }
    #[inline]
    pub unsafe fn AddCircle(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddCircleFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddNgon(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddNgonFilled(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)
    }
    #[inline]
    pub unsafe fn AddEllipse(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    ) {
        ImDrawList_AddEllipse(self, center, radius, col, rot, num_segments, thickness)
    }
    #[inline]
    pub unsafe fn AddEllipseFilled(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        col: ImU32,
        rot: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddEllipseFilled(self, center, radius, col, rot, num_segments)
    }
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImDrawList_AddText(self, pos, col, text_begin, text_end)
    }
    #[inline]
    pub unsafe fn AddText1(
        &mut self,
        font: *mut ImFont,
        font_size: f32,
        pos: *const ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    ) {
        ImDrawList_AddText1(
            self,
            font,
            font_size,
            pos,
            col,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip_rect,
        )
    }
    #[inline]
    pub unsafe fn AddBezierCubic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddBezierQuadratic(
        &mut self,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments)
    }
    #[inline]
    pub unsafe fn AddPolyline(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    ) {
        ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness)
    }
    #[inline]
    pub unsafe fn AddConvexPolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddConcavePolyFilled(
        &mut self,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    ) {
        ImDrawList_AddConcavePolyFilled(self, points, num_points, col)
    }
    #[inline]
    pub unsafe fn AddImage(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col)
    }
    #[inline]
    pub unsafe fn AddImageQuad(
        &mut self,
        user_texture_id: ImTextureID,
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        uv1: *const ImVec2,
        uv2: *const ImVec2,
        uv3: *const ImVec2,
        uv4: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_AddImageQuad(
            self,
            user_texture_id,
            p1,
            p2,
            p3,
            p4,
            uv1,
            uv2,
            uv3,
            uv4,
            col,
        )
    }
    #[inline]
    pub unsafe fn AddImageRounded(
        &mut self,
        user_texture_id: ImTextureID,
        p_min: *const ImVec2,
        p_max: *const ImVec2,
        uv_min: *const ImVec2,
        uv_max: *const ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_AddImageRounded(
            self,
            user_texture_id,
            p_min,
            p_max,
            uv_min,
            uv_max,
            col,
            rounding,
            flags,
        )
    }
    #[inline]
    pub unsafe fn PathArcTo(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathArcToFast(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
    }
    #[inline]
    pub unsafe fn PathEllipticalArcTo(
        &mut self,
        center: *const ImVec2,
        radius: *const ImVec2,
        rot: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathEllipticalArcTo(self, center, radius, rot, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierCubicCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments)
    }
    #[inline]
    pub unsafe fn PathBezierQuadraticCurveTo(
        &mut self,
        p2: *const ImVec2,
        p3: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)
    }
    #[inline]
    pub unsafe fn PathRect(
        &mut self,
        rect_min: *const ImVec2,
        rect_max: *const ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    ) {
        ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags)
    }
    #[inline]
    pub unsafe fn AddCallback(
        &mut self,
        callback: ImDrawCallback,
        userdata: *mut ::std::os::raw::c_void,
        userdata_size: usize,
    ) {
        ImDrawList_AddCallback(self, callback, userdata, userdata_size)
    }
    #[inline]
    pub unsafe fn AddDrawCmd(&mut self) {
        ImDrawList_AddDrawCmd(self)
    }
    #[inline]
    pub unsafe fn CloneOutput(&self) -> *mut ImDrawList {
        ImDrawList_CloneOutput(self)
    }
    #[inline]
    pub unsafe fn PrimReserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimReserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimUnreserve(
        &mut self,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    ) {
        ImDrawList_PrimUnreserve(self, idx_count, vtx_count)
    }
    #[inline]
    pub unsafe fn PrimRect(&mut self, a: *const ImVec2, b: *const ImVec2, col: ImU32) {
        ImDrawList_PrimRect(self, a, b, col)
    }
    #[inline]
    pub unsafe fn PrimRectUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
    }
    #[inline]
    pub unsafe fn PrimQuadUV(
        &mut self,
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        d: *const ImVec2,
        uv_a: *const ImVec2,
        uv_b: *const ImVec2,
        uv_c: *const ImVec2,
        uv_d: *const ImVec2,
        col: ImU32,
    ) {
        ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
    }
    #[inline]
    pub unsafe fn _ResetForNewFrame(&mut self) {
        ImDrawList__ResetForNewFrame(self)
    }
    #[inline]
    pub unsafe fn _ClearFreeMemory(&mut self) {
        ImDrawList__ClearFreeMemory(self)
    }
    #[inline]
    pub unsafe fn _PopUnusedDrawCmd(&mut self) {
        ImDrawList__PopUnusedDrawCmd(self)
    }
    #[inline]
    pub unsafe fn _TryMergeDrawCmds(&mut self) {
        ImDrawList__TryMergeDrawCmds(self)
    }
    #[inline]
    pub unsafe fn _OnChangedClipRect(&mut self) {
        ImDrawList__OnChangedClipRect(self)
    }
    #[inline]
    pub unsafe fn _OnChangedTextureID(&mut self) {
        ImDrawList__OnChangedTextureID(self)
    }
    #[inline]
    pub unsafe fn _OnChangedVtxOffset(&mut self) {
        ImDrawList__OnChangedVtxOffset(self)
    }
    #[inline]
    pub unsafe fn _SetTextureID(&mut self, texture_id: ImTextureID) {
        ImDrawList__SetTextureID(self, texture_id)
    }
    #[inline]
    pub unsafe fn _CalcCircleAutoSegmentCount(&self, radius: f32) -> ::std::os::raw::c_int {
        ImDrawList__CalcCircleAutoSegmentCount(self, radius)
    }
    #[inline]
    pub unsafe fn _PathArcToFastEx(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToFastEx(self, center, radius, a_min_sample, a_max_sample, a_step)
    }
    #[inline]
    pub unsafe fn _PathArcToN(
        &mut self,
        center: *const ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    ) {
        ImDrawList__PathArcToN(self, center, radius, a_min, a_max, num_segments)
    }
    #[inline]
    pub unsafe fn new(shared_data: *mut ImDrawListSharedData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawList_ImDrawList(__bindgen_tmp.as_mut_ptr(), shared_data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImDrawList_ImDrawList_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: ImVector<*mut ImDrawList>,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawData"][::std::mem::size_of::<ImDrawData>() - 64usize];
    ["Alignment of ImDrawData"][::std::mem::align_of::<ImDrawData>() - 8usize];
    ["Offset of field: ImDrawData::Valid"][::std::mem::offset_of!(ImDrawData, Valid) - 0usize];
    ["Offset of field: ImDrawData::CmdListsCount"]
        [::std::mem::offset_of!(ImDrawData, CmdListsCount) - 4usize];
    ["Offset of field: ImDrawData::TotalIdxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalIdxCount) - 8usize];
    ["Offset of field: ImDrawData::TotalVtxCount"]
        [::std::mem::offset_of!(ImDrawData, TotalVtxCount) - 12usize];
    ["Offset of field: ImDrawData::CmdLists"]
        [::std::mem::offset_of!(ImDrawData, CmdLists) - 16usize];
    ["Offset of field: ImDrawData::DisplayPos"]
        [::std::mem::offset_of!(ImDrawData, DisplayPos) - 32usize];
    ["Offset of field: ImDrawData::DisplaySize"]
        [::std::mem::offset_of!(ImDrawData, DisplaySize) - 40usize];
    ["Offset of field: ImDrawData::FramebufferScale"]
        [::std::mem::offset_of!(ImDrawData, FramebufferScale) - 48usize];
    ["Offset of field: ImDrawData::OwnerViewport"]
        [::std::mem::offset_of!(ImDrawData, OwnerViewport) - 56usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData5ClearEv"]
    pub fn ImDrawData_Clear(this: *mut ImDrawData);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData11AddDrawListEP10ImDrawList"]
    pub fn ImDrawData_AddDrawList(this: *mut ImDrawData, draw_list: *mut ImDrawList);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData17DeIndexAllBuffersEv"]
    pub fn ImDrawData_DeIndexAllBuffers(this: *mut ImDrawData);
}
extern "C" {
    #[link_name = "\u{1}_ZN10ImDrawData14ScaleClipRectsERK6ImVec2"]
    pub fn ImDrawData_ScaleClipRects(this: *mut ImDrawData, fb_scale: *const ImVec2);
}
impl ImDrawData {
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImDrawData_Clear(self)
    }
    #[inline]
    pub unsafe fn AddDrawList(&mut self, draw_list: *mut ImDrawList) {
        ImDrawData_AddDrawList(self, draw_list)
    }
    #[inline]
    pub unsafe fn DeIndexAllBuffers(&mut self) {
        ImDrawData_DeIndexAllBuffers(self)
    }
    #[inline]
    pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const ImVec2) {
        ImDrawData_ScaleClipRects(self, fb_scale)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub MergeMode: bool,
    pub PixelSnapH: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub GlyphExtraAdvanceX: f32,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub RasterizerDensity: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontConfig"][::std::mem::size_of::<ImFontConfig>() - 128usize];
    ["Alignment of ImFontConfig"][::std::mem::align_of::<ImFontConfig>() - 8usize];
    ["Offset of field: ImFontConfig::FontData"]
        [::std::mem::offset_of!(ImFontConfig, FontData) - 0usize];
    ["Offset of field: ImFontConfig::FontDataSize"]
        [::std::mem::offset_of!(ImFontConfig, FontDataSize) - 8usize];
    ["Offset of field: ImFontConfig::FontDataOwnedByAtlas"]
        [::std::mem::offset_of!(ImFontConfig, FontDataOwnedByAtlas) - 12usize];
    ["Offset of field: ImFontConfig::MergeMode"]
        [::std::mem::offset_of!(ImFontConfig, MergeMode) - 13usize];
    ["Offset of field: ImFontConfig::PixelSnapH"]
        [::std::mem::offset_of!(ImFontConfig, PixelSnapH) - 14usize];
    ["Offset of field: ImFontConfig::FontNo"]
        [::std::mem::offset_of!(ImFontConfig, FontNo) - 16usize];
    ["Offset of field: ImFontConfig::OversampleH"]
        [::std::mem::offset_of!(ImFontConfig, OversampleH) - 20usize];
    ["Offset of field: ImFontConfig::OversampleV"]
        [::std::mem::offset_of!(ImFontConfig, OversampleV) - 24usize];
    ["Offset of field: ImFontConfig::SizePixels"]
        [::std::mem::offset_of!(ImFontConfig, SizePixels) - 28usize];
    ["Offset of field: ImFontConfig::GlyphOffset"]
        [::std::mem::offset_of!(ImFontConfig, GlyphOffset) - 32usize];
    ["Offset of field: ImFontConfig::GlyphRanges"]
        [::std::mem::offset_of!(ImFontConfig, GlyphRanges) - 40usize];
    ["Offset of field: ImFontConfig::GlyphMinAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMinAdvanceX) - 48usize];
    ["Offset of field: ImFontConfig::GlyphMaxAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphMaxAdvanceX) - 52usize];
    ["Offset of field: ImFontConfig::GlyphExtraAdvanceX"]
        [::std::mem::offset_of!(ImFontConfig, GlyphExtraAdvanceX) - 56usize];
    ["Offset of field: ImFontConfig::FontBuilderFlags"]
        [::std::mem::offset_of!(ImFontConfig, FontBuilderFlags) - 60usize];
    ["Offset of field: ImFontConfig::RasterizerMultiply"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerMultiply) - 64usize];
    ["Offset of field: ImFontConfig::RasterizerDensity"]
        [::std::mem::offset_of!(ImFontConfig, RasterizerDensity) - 68usize];
    ["Offset of field: ImFontConfig::EllipsisChar"]
        [::std::mem::offset_of!(ImFontConfig, EllipsisChar) - 72usize];
    ["Offset of field: ImFontConfig::Name"][::std::mem::offset_of!(ImFontConfig, Name) - 74usize];
    ["Offset of field: ImFontConfig::DstFont"]
        [::std::mem::offset_of!(ImFontConfig, DstFont) - 120usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN12ImFontConfigC1Ev"]
    pub fn ImFontConfig_ImFontConfig(this: *mut ImFontConfig);
}
impl ImFontConfig {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyph"][::std::mem::size_of::<ImFontGlyph>() - 40usize];
    ["Alignment of ImFontGlyph"][::std::mem::align_of::<ImFontGlyph>() - 4usize];
    ["Offset of field: ImFontGlyph::AdvanceX"]
        [::std::mem::offset_of!(ImFontGlyph, AdvanceX) - 4usize];
    ["Offset of field: ImFontGlyph::X0"][::std::mem::offset_of!(ImFontGlyph, X0) - 8usize];
    ["Offset of field: ImFontGlyph::Y0"][::std::mem::offset_of!(ImFontGlyph, Y0) - 12usize];
    ["Offset of field: ImFontGlyph::X1"][::std::mem::offset_of!(ImFontGlyph, X1) - 16usize];
    ["Offset of field: ImFontGlyph::Y1"][::std::mem::offset_of!(ImFontGlyph, Y1) - 20usize];
    ["Offset of field: ImFontGlyph::U0"][::std::mem::offset_of!(ImFontGlyph, U0) - 24usize];
    ["Offset of field: ImFontGlyph::V0"][::std::mem::offset_of!(ImFontGlyph, V0) - 28usize];
    ["Offset of field: ImFontGlyph::U1"][::std::mem::offset_of!(ImFontGlyph, U1) - 32usize];
    ["Offset of field: ImFontGlyph::V1"][::std::mem::offset_of!(ImFontGlyph, V1) - 36usize];
};
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Colored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Colored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Visible_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Visible_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Codepoint_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Codepoint_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector<ImU32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontGlyphRangesBuilder"]
        [::std::mem::size_of::<ImFontGlyphRangesBuilder>() - 16usize];
    ["Alignment of ImFontGlyphRangesBuilder"]
        [::std::mem::align_of::<ImFontGlyphRangesBuilder>() - 8usize];
    ["Offset of field: ImFontGlyphRangesBuilder::UsedChars"]
        [::std::mem::offset_of!(ImFontGlyphRangesBuilder, UsedChars) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN24ImFontGlyphRangesBuilder7AddTextEPKcS1_"]
    pub fn ImFontGlyphRangesBuilder_AddText(
        this: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24ImFontGlyphRangesBuilder9AddRangesEPKt"]
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        this: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN24ImFontGlyphRangesBuilder11BuildRangesEP8ImVectorItE"]
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        this: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector<ImWchar>,
    );
}
impl ImFontGlyphRangesBuilder {
    #[inline]
    pub unsafe fn AddText(
        &mut self,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) {
        ImFontGlyphRangesBuilder_AddText(self, text, text_end)
    }
    #[inline]
    pub unsafe fn AddRanges(&mut self, ranges: *const ImWchar) {
        ImFontGlyphRangesBuilder_AddRanges(self, ranges)
    }
    #[inline]
    pub unsafe fn BuildRanges(&mut self, out_ranges: *mut ImVector<ImWchar>) {
        ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlasCustomRect"][::std::mem::size_of::<ImFontAtlasCustomRect>() - 32usize];
    ["Alignment of ImFontAtlasCustomRect"]
        [::std::mem::align_of::<ImFontAtlasCustomRect>() - 8usize];
    ["Offset of field: ImFontAtlasCustomRect::X"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, X) - 0usize];
    ["Offset of field: ImFontAtlasCustomRect::Y"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Y) - 2usize];
    ["Offset of field: ImFontAtlasCustomRect::Width"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Width) - 4usize];
    ["Offset of field: ImFontAtlasCustomRect::Height"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Height) - 6usize];
    ["Offset of field: ImFontAtlasCustomRect::GlyphAdvanceX"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, GlyphAdvanceX) - 12usize];
    ["Offset of field: ImFontAtlasCustomRect::GlyphOffset"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, GlyphOffset) - 16usize];
    ["Offset of field: ImFontAtlasCustomRect::Font"]
        [::std::mem::offset_of!(ImFontAtlasCustomRect, Font) - 24usize];
};
impl ImFontAtlasCustomRect {
    #[inline]
    pub fn GlyphID(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_GlyphID(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn GlyphID_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_GlyphID_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn GlyphColored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_GlyphColored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn GlyphColored_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_GlyphColored_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        GlyphID: ::std::os::raw::c_uint,
        GlyphColored: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let GlyphID: u32 = unsafe { ::std::mem::transmute(GlyphID) };
            GlyphID as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let GlyphColored: u32 = unsafe { ::std::mem::transmute(GlyphColored) };
            GlyphColored as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Locked: bool,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector<*mut ImFont>,
    pub CustomRects: ImVector<ImFontAtlasCustomRect>,
    pub ConfigData: ImVector<ImFontConfig>,
    pub TexUvLines: [ImVec4; 33usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontAtlas"][::std::mem::size_of::<ImFontAtlas>() - 680usize];
    ["Alignment of ImFontAtlas"][::std::mem::align_of::<ImFontAtlas>() - 8usize];
    ["Offset of field: ImFontAtlas::Flags"][::std::mem::offset_of!(ImFontAtlas, Flags) - 0usize];
    ["Offset of field: ImFontAtlas::TexID"][::std::mem::offset_of!(ImFontAtlas, TexID) - 8usize];
    ["Offset of field: ImFontAtlas::TexDesiredWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexDesiredWidth) - 16usize];
    ["Offset of field: ImFontAtlas::TexGlyphPadding"]
        [::std::mem::offset_of!(ImFontAtlas, TexGlyphPadding) - 20usize];
    ["Offset of field: ImFontAtlas::UserData"]
        [::std::mem::offset_of!(ImFontAtlas, UserData) - 24usize];
    ["Offset of field: ImFontAtlas::Locked"][::std::mem::offset_of!(ImFontAtlas, Locked) - 32usize];
    ["Offset of field: ImFontAtlas::TexReady"]
        [::std::mem::offset_of!(ImFontAtlas, TexReady) - 33usize];
    ["Offset of field: ImFontAtlas::TexPixelsUseColors"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsUseColors) - 34usize];
    ["Offset of field: ImFontAtlas::TexPixelsAlpha8"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsAlpha8) - 40usize];
    ["Offset of field: ImFontAtlas::TexPixelsRGBA32"]
        [::std::mem::offset_of!(ImFontAtlas, TexPixelsRGBA32) - 48usize];
    ["Offset of field: ImFontAtlas::TexWidth"]
        [::std::mem::offset_of!(ImFontAtlas, TexWidth) - 56usize];
    ["Offset of field: ImFontAtlas::TexHeight"]
        [::std::mem::offset_of!(ImFontAtlas, TexHeight) - 60usize];
    ["Offset of field: ImFontAtlas::TexUvScale"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvScale) - 64usize];
    ["Offset of field: ImFontAtlas::TexUvWhitePixel"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvWhitePixel) - 72usize];
    ["Offset of field: ImFontAtlas::Fonts"][::std::mem::offset_of!(ImFontAtlas, Fonts) - 80usize];
    ["Offset of field: ImFontAtlas::CustomRects"]
        [::std::mem::offset_of!(ImFontAtlas, CustomRects) - 96usize];
    ["Offset of field: ImFontAtlas::ConfigData"]
        [::std::mem::offset_of!(ImFontAtlas, ConfigData) - 112usize];
    ["Offset of field: ImFontAtlas::TexUvLines"]
        [::std::mem::offset_of!(ImFontAtlas, TexUvLines) - 128usize];
    ["Offset of field: ImFontAtlas::FontBuilderIO"]
        [::std::mem::offset_of!(ImFontAtlas, FontBuilderIO) - 656usize];
    ["Offset of field: ImFontAtlas::FontBuilderFlags"]
        [::std::mem::offset_of!(ImFontAtlas, FontBuilderFlags) - 664usize];
    ["Offset of field: ImFontAtlas::PackIdMouseCursors"]
        [::std::mem::offset_of!(ImFontAtlas, PackIdMouseCursors) - 668usize];
    ["Offset of field: ImFontAtlas::PackIdLines"]
        [::std::mem::offset_of!(ImFontAtlas, PackIdLines) - 672usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas7AddFontEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFont(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig"]
    pub fn ImFontAtlas_AddFontDefault(
        this: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromFileTTF(
        this: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        this: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        this: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt"]
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        this: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas14ClearInputDataEv"]
    pub fn ImFontAtlas_ClearInputData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas10ClearFontsEv"]
    pub fn ImFontAtlas_ClearFonts(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas12ClearTexDataEv"]
    pub fn ImFontAtlas_ClearTexData(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas5ClearEv"]
    pub fn ImFontAtlas_Clear(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas5BuildEv"]
    pub fn ImFontAtlas_Build(this: *mut ImFontAtlas) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_"]
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        this: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas21GetGlyphRangesDefaultEv"]
    pub fn ImFontAtlas_GetGlyphRangesDefault(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas19GetGlyphRangesGreekEv"]
    pub fn ImFontAtlas_GetGlyphRangesGreek(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20GetGlyphRangesKoreanEv"]
    pub fn ImFontAtlas_GetGlyphRangesKorean(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22GetGlyphRangesJapaneseEv"]
    pub fn ImFontAtlas_GetGlyphRangesJapanese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas25GetGlyphRangesChineseFullEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv"]
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        this: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22GetGlyphRangesCyrillicEv"]
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas18GetGlyphRangesThaiEv"]
    pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas24GetGlyphRangesVietnameseEv"]
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(this: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas20AddCustomRectRegularEii"]
    pub fn ImFontAtlas_AddCustomRectRegular(
        this: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2"]
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        this: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK11ImFontAtlas16CalcCustomRectUVEPK21ImFontAtlasCustomRectP6ImVec2S4_"]
    pub fn ImFontAtlas_CalcCustomRectUV(
        this: *const ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_"]
    pub fn ImFontAtlas_GetMouseCursorTexData(
        this: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlasC1Ev"]
    pub fn ImFontAtlas_ImFontAtlas(this: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImFontAtlasD1Ev"]
    pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut ImFontAtlas);
}
impl ImFontAtlas {
    #[inline]
    pub unsafe fn AddFont(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFont(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontDefault(&mut self, font_cfg: *const ImFontConfig) -> *mut ImFont {
        ImFontAtlas_AddFontDefault(self, font_cfg)
    }
    #[inline]
    pub unsafe fn AddFontFromFileTTF(
        &mut self,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryTTF(
        &mut self,
        font_data: *mut ::std::os::raw::c_void,
        font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedTTF(
        &mut self,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_data_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_data_size,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
        &mut self,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont {
        ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            compressed_font_data_base85,
            size_pixels,
            font_cfg,
            glyph_ranges,
        )
    }
    #[inline]
    pub unsafe fn ClearInputData(&mut self) {
        ImFontAtlas_ClearInputData(self)
    }
    #[inline]
    pub unsafe fn ClearFonts(&mut self) {
        ImFontAtlas_ClearFonts(self)
    }
    #[inline]
    pub unsafe fn ClearTexData(&mut self) {
        ImFontAtlas_ClearTexData(self)
    }
    #[inline]
    pub unsafe fn Clear(&mut self) {
        ImFontAtlas_Clear(self)
    }
    #[inline]
    pub unsafe fn Build(&mut self) -> bool {
        ImFontAtlas_Build(self)
    }
    #[inline]
    pub unsafe fn GetTexDataAsAlpha8(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetTexDataAsRGBA32(
        &mut self,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    ) {
        ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesDefault(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesGreek(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesGreek(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesKorean(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesJapanese(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseFull(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesCyrillic(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesThai(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesThai(self)
    }
    #[inline]
    pub unsafe fn GetGlyphRangesVietnamese(&mut self) -> *const ImWchar {
        ImFontAtlas_GetGlyphRangesVietnamese(self)
    }
    #[inline]
    pub unsafe fn AddCustomRectRegular(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectRegular(self, width, height)
    }
    #[inline]
    pub unsafe fn AddCustomRectFontGlyph(
        &mut self,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: *const ImVec2,
    ) -> ::std::os::raw::c_int {
        ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset)
    }
    #[inline]
    pub unsafe fn CalcCustomRectUV(
        &self,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    ) {
        ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)
    }
    #[inline]
    pub unsafe fn GetMouseCursorTexData(
        &mut self,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool {
        ImFontAtlas_GetMouseCursorTexData(
            self,
            cursor,
            out_offset,
            out_size,
            out_uv_border,
            out_uv_fill,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFontAtlas_ImFontAtlas_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector<f32>,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector<ImU16>,
    pub Glyphs: ImVector<ImFontGlyph>,
    pub FallbackGlyph: *mut ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub EllipsisCharCount: ::std::os::raw::c_short,
    pub EllipsisChar: ImWchar,
    pub FallbackChar: ImWchar,
    pub EllipsisWidth: f32,
    pub EllipsisCharStep: f32,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub DirtyLookupTables: bool,
    pub Used8kPagesMap: [ImU8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFont"][::std::mem::size_of::<ImFont>() - 120usize];
    ["Alignment of ImFont"][::std::mem::align_of::<ImFont>() - 8usize];
    ["Offset of field: ImFont::IndexAdvanceX"]
        [::std::mem::offset_of!(ImFont, IndexAdvanceX) - 0usize];
    ["Offset of field: ImFont::FallbackAdvanceX"]
        [::std::mem::offset_of!(ImFont, FallbackAdvanceX) - 16usize];
    ["Offset of field: ImFont::FontSize"][::std::mem::offset_of!(ImFont, FontSize) - 20usize];
    ["Offset of field: ImFont::IndexLookup"][::std::mem::offset_of!(ImFont, IndexLookup) - 24usize];
    ["Offset of field: ImFont::Glyphs"][::std::mem::offset_of!(ImFont, Glyphs) - 40usize];
    ["Offset of field: ImFont::FallbackGlyph"]
        [::std::mem::offset_of!(ImFont, FallbackGlyph) - 56usize];
    ["Offset of field: ImFont::ContainerAtlas"]
        [::std::mem::offset_of!(ImFont, ContainerAtlas) - 64usize];
    ["Offset of field: ImFont::ConfigData"][::std::mem::offset_of!(ImFont, ConfigData) - 72usize];
    ["Offset of field: ImFont::ConfigDataCount"]
        [::std::mem::offset_of!(ImFont, ConfigDataCount) - 80usize];
    ["Offset of field: ImFont::EllipsisCharCount"]
        [::std::mem::offset_of!(ImFont, EllipsisCharCount) - 82usize];
    ["Offset of field: ImFont::EllipsisChar"]
        [::std::mem::offset_of!(ImFont, EllipsisChar) - 84usize];
    ["Offset of field: ImFont::FallbackChar"]
        [::std::mem::offset_of!(ImFont, FallbackChar) - 86usize];
    ["Offset of field: ImFont::EllipsisWidth"]
        [::std::mem::offset_of!(ImFont, EllipsisWidth) - 88usize];
    ["Offset of field: ImFont::EllipsisCharStep"]
        [::std::mem::offset_of!(ImFont, EllipsisCharStep) - 92usize];
    ["Offset of field: ImFont::Scale"][::std::mem::offset_of!(ImFont, Scale) - 96usize];
    ["Offset of field: ImFont::Ascent"][::std::mem::offset_of!(ImFont, Ascent) - 100usize];
    ["Offset of field: ImFont::Descent"][::std::mem::offset_of!(ImFont, Descent) - 104usize];
    ["Offset of field: ImFont::MetricsTotalSurface"]
        [::std::mem::offset_of!(ImFont, MetricsTotalSurface) - 108usize];
    ["Offset of field: ImFont::DirtyLookupTables"]
        [::std::mem::offset_of!(ImFont, DirtyLookupTables) - 112usize];
    ["Offset of field: ImFont::Used8kPagesMap"]
        [::std::mem::offset_of!(ImFont, Used8kPagesMap) - 113usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont9FindGlyphEt"]
    pub fn ImFont_FindGlyph(this: *mut ImFont, c: ImWchar) -> *mut ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont19FindGlyphNoFallbackEt"]
    pub fn ImFont_FindGlyphNoFallback(this: *mut ImFont, c: ImWchar) -> *mut ImFontGlyph;
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont13CalcTextSizeAEfffPKcS1_PS1_"]
    pub fn ImFont_CalcTextSizeA(
        this: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont21CalcWordWrapPositionAEfPKcS1_f"]
    pub fn ImFont_CalcWordWrapPositionA(
        this: *mut ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont10RenderCharEP10ImDrawListfRK6ImVec2jt"]
    pub fn ImFont_RenderChar(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont10RenderTextEP10ImDrawListfRK6ImVec2jRK6ImVec4PKcS9_fb"]
    pub fn ImFont_RenderText(
        this: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont16BuildLookupTableEv"]
    pub fn ImFont_BuildLookupTable(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont15ClearOutputDataEv"]
    pub fn ImFont_ClearOutputData(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont9GrowIndexEi"]
    pub fn ImFont_GrowIndex(this: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont8AddGlyphEPK12ImFontConfigtfffffffff"]
    pub fn ImFont_AddGlyph(
        this: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont12AddRemapCharEttb"]
    pub fn ImFont_AddRemapChar(this: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFont18IsGlyphRangeUnusedEjj"]
    pub fn ImFont_IsGlyphRangeUnused(
        this: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFontC1Ev"]
    pub fn ImFont_ImFont(this: *mut ImFont);
}
extern "C" {
    #[link_name = "\u{1}_ZN6ImFontD1Ev"]
    pub fn ImFont_ImFont_destructor(this: *mut ImFont);
}
impl ImFont {
    #[inline]
    pub unsafe fn FindGlyph(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFont_FindGlyph(self, c)
    }
    #[inline]
    pub unsafe fn FindGlyphNoFallback(&mut self, c: ImWchar) -> *mut ImFontGlyph {
        ImFont_FindGlyphNoFallback(self, c)
    }
    #[inline]
    pub unsafe fn CalcTextSizeA(
        &mut self,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    ) -> ImVec2 {
        ImFont_CalcTextSizeA(
            self, size, max_width, wrap_width, text_begin, text_end, remaining,
        )
    }
    #[inline]
    pub unsafe fn CalcWordWrapPositionA(
        &mut self,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char {
        ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width)
    }
    #[inline]
    pub unsafe fn RenderChar(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        c: ImWchar,
    ) {
        ImFont_RenderChar(self, draw_list, size, pos, col, c)
    }
    #[inline]
    pub unsafe fn RenderText(
        &mut self,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: *const ImVec2,
        col: ImU32,
        clip_rect: *const ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    ) {
        ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            text_begin,
            text_end,
            wrap_width,
            cpu_fine_clip,
        )
    }
    #[inline]
    pub unsafe fn BuildLookupTable(&mut self) {
        ImFont_BuildLookupTable(self)
    }
    #[inline]
    pub unsafe fn ClearOutputData(&mut self) {
        ImFont_ClearOutputData(self)
    }
    #[inline]
    pub unsafe fn GrowIndex(&mut self, new_size: ::std::os::raw::c_int) {
        ImFont_GrowIndex(self, new_size)
    }
    #[inline]
    pub unsafe fn AddGlyph(
        &mut self,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    ) {
        ImFont_AddGlyph(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
    }
    #[inline]
    pub unsafe fn AddRemapChar(&mut self, dst: ImWchar, src: ImWchar, overwrite_dst: bool) {
        ImFont_AddRemapChar(self, dst, src, overwrite_dst)
    }
    #[inline]
    pub unsafe fn IsGlyphRangeUnused(
        &mut self,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool {
        ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImFont_ImFont_destructor(self)
    }
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsMinimized: ImGuiViewportFlags_ = 4096;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsFocused: ImGuiViewportFlags_ = 8192;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformWindowCreated: bool,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiViewport"][::std::mem::size_of::<ImGuiViewport>() - 96usize];
    ["Alignment of ImGuiViewport"][::std::mem::align_of::<ImGuiViewport>() - 8usize];
    ["Offset of field: ImGuiViewport::ID"][::std::mem::offset_of!(ImGuiViewport, ID) - 0usize];
    ["Offset of field: ImGuiViewport::Flags"]
        [::std::mem::offset_of!(ImGuiViewport, Flags) - 4usize];
    ["Offset of field: ImGuiViewport::Pos"][::std::mem::offset_of!(ImGuiViewport, Pos) - 8usize];
    ["Offset of field: ImGuiViewport::Size"][::std::mem::offset_of!(ImGuiViewport, Size) - 16usize];
    ["Offset of field: ImGuiViewport::WorkPos"]
        [::std::mem::offset_of!(ImGuiViewport, WorkPos) - 24usize];
    ["Offset of field: ImGuiViewport::WorkSize"]
        [::std::mem::offset_of!(ImGuiViewport, WorkSize) - 32usize];
    ["Offset of field: ImGuiViewport::DpiScale"]
        [::std::mem::offset_of!(ImGuiViewport, DpiScale) - 40usize];
    ["Offset of field: ImGuiViewport::ParentViewportId"]
        [::std::mem::offset_of!(ImGuiViewport, ParentViewportId) - 44usize];
    ["Offset of field: ImGuiViewport::DrawData"]
        [::std::mem::offset_of!(ImGuiViewport, DrawData) - 48usize];
    ["Offset of field: ImGuiViewport::RendererUserData"]
        [::std::mem::offset_of!(ImGuiViewport, RendererUserData) - 56usize];
    ["Offset of field: ImGuiViewport::PlatformUserData"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformUserData) - 64usize];
    ["Offset of field: ImGuiViewport::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandle) - 72usize];
    ["Offset of field: ImGuiViewport::PlatformHandleRaw"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformHandleRaw) - 80usize];
    ["Offset of field: ImGuiViewport::PlatformWindowCreated"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformWindowCreated) - 88usize];
    ["Offset of field: ImGuiViewport::PlatformRequestMove"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestMove) - 89usize];
    ["Offset of field: ImGuiViewport::PlatformRequestResize"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestResize) - 90usize];
    ["Offset of field: ImGuiViewport::PlatformRequestClose"]
        [::std::mem::offset_of!(ImGuiViewport, PlatformRequestClose) - 91usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiPlatformIO {
    pub Platform_GetClipboardTextFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext) -> *const ::std::os::raw::c_char,
    >,
    pub Platform_SetClipboardTextFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext, text: *const ::std::os::raw::c_char),
    >,
    pub Platform_ClipboardUserData: *mut ::std::os::raw::c_void,
    pub Platform_OpenInShellFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext, path: *const ::std::os::raw::c_char) -> bool,
    >,
    pub Platform_OpenInShellUserData: *mut ::std::os::raw::c_void,
    pub Platform_SetImeDataFn: ::std::option::Option<
        extern "C" fn(
            ctx: *mut ImGuiContext,
            viewport: *mut ImGuiViewport,
            data: *mut ImGuiPlatformImeData,
        ),
    >,
    pub Platform_ImeUserData: *mut ::std::os::raw::c_void,
    pub Platform_LocaleDecimalPoint: ImWchar,
    pub Renderer_RenderState: *mut ::std::os::raw::c_void,
    pub Platform_CreateWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowWorkAreaInsets:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport) -> ImVec4>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector<ImGuiPlatformMonitor>,
    pub Viewports: ImVector<*mut ImGuiViewport>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformIO"][::std::mem::size_of::<ImGuiPlatformIO>() - 296usize];
    ["Alignment of ImGuiPlatformIO"][::std::mem::align_of::<ImGuiPlatformIO>() - 8usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetClipboardTextFn) - 0usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetClipboardTextFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetClipboardTextFn) - 8usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ClipboardUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ClipboardUserData) - 16usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OpenInShellFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OpenInShellFn) - 24usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OpenInShellUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OpenInShellUserData) - 32usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetImeDataFn"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetImeDataFn) - 40usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ImeUserData"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ImeUserData) - 48usize];
    ["Offset of field: ImGuiPlatformIO::Platform_LocaleDecimalPoint"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_LocaleDecimalPoint) - 56usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_RenderState"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_RenderState) - 64usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateWindow) - 72usize];
    ["Offset of field: ImGuiPlatformIO::Platform_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_DestroyWindow) - 80usize];
    ["Offset of field: ImGuiPlatformIO::Platform_ShowWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_ShowWindow) - 88usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowPos) - 96usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowPos"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowPos) - 104usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowSize) - 112usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowSize) - 120usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowFocus) - 128usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowFocus"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowFocus) - 136usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowMinimized"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowMinimized) - 144usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowTitle"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowTitle) - 152usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SetWindowAlpha"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SetWindowAlpha) - 160usize];
    ["Offset of field: ImGuiPlatformIO::Platform_UpdateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_UpdateWindow) - 168usize];
    ["Offset of field: ImGuiPlatformIO::Platform_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_RenderWindow) - 176usize];
    ["Offset of field: ImGuiPlatformIO::Platform_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_SwapBuffers) - 184usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowDpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowDpiScale) - 192usize];
    ["Offset of field: ImGuiPlatformIO::Platform_OnChangedViewport"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_OnChangedViewport) - 200usize];
    ["Offset of field: ImGuiPlatformIO::Platform_GetWindowWorkAreaInsets"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_GetWindowWorkAreaInsets) - 208usize];
    ["Offset of field: ImGuiPlatformIO::Platform_CreateVkSurface"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Platform_CreateVkSurface) - 216usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_CreateWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_CreateWindow) - 224usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_DestroyWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_DestroyWindow) - 232usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SetWindowSize"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SetWindowSize) - 240usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_RenderWindow"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_RenderWindow) - 248usize];
    ["Offset of field: ImGuiPlatformIO::Renderer_SwapBuffers"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Renderer_SwapBuffers) - 256usize];
    ["Offset of field: ImGuiPlatformIO::Monitors"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Monitors) - 264usize];
    ["Offset of field: ImGuiPlatformIO::Viewports"]
        [::std::mem::offset_of!(ImGuiPlatformIO, Viewports) - 280usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN15ImGuiPlatformIOC1Ev"]
    pub fn ImGuiPlatformIO_ImGuiPlatformIO(this: *mut ImGuiPlatformIO);
}
impl ImGuiPlatformIO {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiPlatformIO_ImGuiPlatformIO(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformMonitor"][::std::mem::size_of::<ImGuiPlatformMonitor>() - 48usize];
    ["Alignment of ImGuiPlatformMonitor"][::std::mem::align_of::<ImGuiPlatformMonitor>() - 8usize];
    ["Offset of field: ImGuiPlatformMonitor::MainPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainPos) - 0usize];
    ["Offset of field: ImGuiPlatformMonitor::MainSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, MainSize) - 8usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkPos"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkPos) - 16usize];
    ["Offset of field: ImGuiPlatformMonitor::WorkSize"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, WorkSize) - 24usize];
    ["Offset of field: ImGuiPlatformMonitor::DpiScale"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, DpiScale) - 32usize];
    ["Offset of field: ImGuiPlatformMonitor::PlatformHandle"]
        [::std::mem::offset_of!(ImGuiPlatformMonitor, PlatformHandle) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPlatformImeData"][::std::mem::size_of::<ImGuiPlatformImeData>() - 16usize];
    ["Alignment of ImGuiPlatformImeData"][::std::mem::align_of::<ImGuiPlatformImeData>() - 4usize];
    ["Offset of field: ImGuiPlatformImeData::WantVisible"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, WantVisible) - 0usize];
    ["Offset of field: ImGuiPlatformImeData::InputPos"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputPos) - 4usize];
    ["Offset of field: ImGuiPlatformImeData::InputLineHeight"]
        [::std::mem::offset_of!(ImGuiPlatformImeData, InputLineHeight) - 12usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc23_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtol"]
    pub fn strtol1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul"]
    pub fn strtoul1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll"]
    pub fn strtoq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull"]
    pub fn strtouq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtol_l"]
    pub fn strtol_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul_l"]
    pub fn strtoul_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll_l"]
    pub fn strtoll_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull_l"]
    pub fn strtoull_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
//pub const FP_INT_UPWARD: _bindgen_ty_1 = 0;
//pub const FP_INT_DOWNWARD: _bindgen_ty_1 = 1;
//pub const FP_INT_TOWARDZERO: _bindgen_ty_1 = 2;
//pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_1 = 3;
//pub const FP_INT_TONEAREST: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2m1(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2m1(__x: f64) -> f64;
}
extern "C" {
    pub fn exp10m1(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10m1(__x: f64) -> f64;
}
extern "C" {
    pub fn log2p1(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2p1(__x: f64) -> f64;
}
extern "C" {
    pub fn log10p1(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10p1(__x: f64) -> f64;
}
extern "C" {
    pub fn logp1(__x: f64) -> f64;
}
extern "C" {
    pub fn __logp1(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextdown(__x: f64) -> f64;
}
extern "C" {
    pub fn nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn __nextup(__x: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundeven(__x: f64) -> f64;
}
extern "C" {
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminmag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaximum(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaximum(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminimum(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminimum(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaximum_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaximum_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminimum_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminimum_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaximum_mag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaximum_mag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminimum_mag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminimum_mag(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaximum_mag_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaximum_mag_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminimum_mag_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminimum_mag_num(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn totalorder(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermag(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn __getpayload(__x: *const f64) -> f64;
}
extern "C" {
    pub fn setpayload(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2m1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2m1f(__x: f32) -> f32;
}
extern "C" {
    pub fn exp10m1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10m1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2p1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2p1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log10p1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10p1f(__x: f32) -> f32;
}
extern "C" {
    pub fn logp1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __logp1f(__x: f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextdownf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nextupf(__x: f32) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundevenf(__x: f32) -> f32;
}
extern "C" {
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminmagf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaximumf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaximumf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminimumf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminimumf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaximum_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaximum_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminimum_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminimum_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaximum_magf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaximum_magf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminimum_magf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminimum_magf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminimum_mag_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminimum_mag_numf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn totalorderf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn __getpayloadf(__x: *const f32) -> f32;
}
extern "C" {
    pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2m1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2m1l(__x: u128) -> u128;
}
extern "C" {
    pub fn exp10m1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp10m1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2p1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2p1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log10p1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10p1l(__x: u128) -> u128;
}
extern "C" {
    pub fn logp1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __logp1l(__x: u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextdownl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nextupl(__x: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundevenl(__x: u128) -> u128;
}
extern "C" {
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminmagl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaximuml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaximuml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminimuml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminimuml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaximum_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaximum_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminimum_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminimum_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaximum_magl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaximum_magl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminimum_magl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminimum_magl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminimum_mag_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminimum_mag_numl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn totalorderl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn __getpayloadl(__x: *const u128) -> u128;
}
extern "C" {
    pub fn setpayloadl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
extern "C" {
    pub fn cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cosf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __coshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn __sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
extern "C" {
    pub fn acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __acoshf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __asinhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __atanhf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn __modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
extern "C" {
    pub fn exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp10f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp2m1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp2m1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp10m1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp10m1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log2p1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log2p1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log10p1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log10p1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn logp1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logp1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __expm1f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log1pf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __logbf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __exp2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __log2f32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __sqrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __cbrtf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ceilf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fabsf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __floorf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn __nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
extern "C" {
    pub fn j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __j1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y0f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __y1f32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn __ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
extern "C" {
    pub fn erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erff32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __erfcf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn __tgammaf32(arg1: _Float32) -> _Float32;
}
extern "C" {
    pub fn lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __rintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextdownf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nextupf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn __scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
extern "C" {
    pub fn nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __nearbyintf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __truncf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int) -> _Float32;
}
extern "C" {
    pub fn __remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int)
        -> _Float32;
}
extern "C" {
    pub fn lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
extern "C" {
    pub fn roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn __roundevenf32(__x: _Float32) -> _Float32;
}
extern "C" {
    pub fn fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef32(__cx: *mut _Float32, __x: *const _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaximumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaximumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminimumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminimumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaximum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaximum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminimum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminimum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaximum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaximum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminimum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminimum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fmaximum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fmaximum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn fminimum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn __fminimum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
extern "C" {
    pub fn totalorderf32(__x: *const _Float32, __y: *const _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32(__x: *const _Float32, __y: *const _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn __getpayloadf32(__x: *const _Float32) -> _Float32;
}
extern "C" {
    pub fn setpayloadf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
extern "C" {
    pub fn cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cosf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __coshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn __sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
extern "C" {
    pub fn acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __acoshf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __asinhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __atanhf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn __modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
extern "C" {
    pub fn exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp10f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp2m1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp2m1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp10m1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp10m1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log2p1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log2p1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log10p1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log10p1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn logp1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logp1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __expm1f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log1pf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __logbf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __exp2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __log2f64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __sqrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __cbrtf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ceilf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fabsf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __floorf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn __nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
extern "C" {
    pub fn j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __j1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y0f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __y1f64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn __ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
extern "C" {
    pub fn erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erff64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __erfcf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn __tgammaf64(arg1: _Float64) -> _Float64;
}
extern "C" {
    pub fn lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __rintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextdownf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nextupf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn __scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
extern "C" {
    pub fn nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __nearbyintf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __truncf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int) -> _Float64;
}
extern "C" {
    pub fn __remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int)
        -> _Float64;
}
extern "C" {
    pub fn lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
extern "C" {
    pub fn roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn __roundevenf64(__x: _Float64) -> _Float64;
}
extern "C" {
    pub fn fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef64(__cx: *mut _Float64, __x: *const _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaximumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaximumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminimumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminimumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaximum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaximum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminimum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminimum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaximum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaximum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminimum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminimum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fmaximum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fmaximum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn fminimum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn __fminimum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
extern "C" {
    pub fn totalorderf64(__x: *const _Float64, __y: *const _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64(__x: *const _Float64, __y: *const _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn __getpayloadf64(__x: *const _Float64) -> _Float64;
}
extern "C" {
    pub fn setpayloadf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cosf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __coshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn __sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
extern "C" {
    pub fn acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __acoshf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __asinhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __atanhf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp10f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp2m1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp2m1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp10m1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp10m1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log2p1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log2p1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log10p1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log10p1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn logp1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logp1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __expm1f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log1pf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __logbf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __exp2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __log2f32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __sqrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __cbrtf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ceilf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fabsf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __floorf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn __nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
extern "C" {
    pub fn j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __j1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y0f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __y1f32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erff32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __erfcf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __tgammaf32x(arg1: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __rintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextdownf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nextupf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn __scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
extern "C" {
    pub fn ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn __scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
extern "C" {
    pub fn nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __nearbyintf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __truncf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn __remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
extern "C" {
    pub fn lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __roundevenf32x(__x: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef32x(__cx: *mut _Float32x, __x: *const _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaximumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaximumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminimumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminimumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaximum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaximum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminimum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminimum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaximum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaximum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminimum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminimum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fmaximum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fmaximum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn fminimum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __fminimum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
extern "C" {
    pub fn totalorderf32x(__x: *const _Float32x, __y: *const _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf32x(__x: *const _Float32x, __y: *const _Float32x)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn __getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
extern "C" {
    pub fn setpayloadf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cosf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __coshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn __sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
extern "C" {
    pub fn acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __acoshf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __asinhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __atanhf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp10f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp2m1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp2m1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp10m1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp10m1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log2p1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log2p1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log10p1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log10p1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn logp1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logp1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __expm1f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log1pf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __logbf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __exp2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __log2f64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __sqrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __cbrtf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ceilf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fabsf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __floorf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn __nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
extern "C" {
    pub fn j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __j1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y0f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __y1f64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erff64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __erfcf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __tgammaf64x(arg1: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __rintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextdownf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nextupf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn __scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
extern "C" {
    pub fn ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn __scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
extern "C" {
    pub fn nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __nearbyintf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __truncf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn __remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
extern "C" {
    pub fn lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __roundevenf64x(__x: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn __fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
extern "C" {
    pub fn ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn __ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
extern "C" {
    pub fn canonicalizef64x(__cx: *mut _Float64x, __x: *const _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaximumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaximumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminimumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminimumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaximum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaximum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminimum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminimum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaximum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaximum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminimum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminimum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fmaximum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fmaximum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn fminimum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __fminimum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
extern "C" {
    pub fn totalorderf64x(__x: *const _Float64x, __y: *const _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn totalordermagf64x(__x: *const _Float64x, __y: *const _Float64x)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn __getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
extern "C" {
    pub fn setpayloadf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpayloadsigf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fadd(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fdiv(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn ffma(__x: f64, __y: f64, __z: f64) -> f32;
}
extern "C" {
    pub fn fmul(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn fsqrt(__x: f64) -> f32;
}
extern "C" {
    pub fn fsub(__x: f64, __y: f64) -> f32;
}
extern "C" {
    pub fn faddl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn fdivl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn ffmal(__x: u128, __y: u128, __z: u128) -> f32;
}
extern "C" {
    pub fn fmull(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn fsqrtl(__x: u128) -> f32;
}
extern "C" {
    pub fn fsubl(__x: u128, __y: u128) -> f32;
}
extern "C" {
    pub fn daddl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn ddivl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn dfmal(__x: u128, __y: u128, __z: u128) -> f64;
}
extern "C" {
    pub fn dmull(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn dsqrtl(__x: u128) -> f64;
}
extern "C" {
    pub fn dsubl(__x: u128, __y: u128) -> f64;
}
extern "C" {
    pub fn f32addf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32divf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32mulf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32sqrtf32x(__x: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32subf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
extern "C" {
    pub fn f32addf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32divf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32mulf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32sqrtf64(__x: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32subf64(__x: _Float64, __y: _Float64) -> _Float32;
}
extern "C" {
    pub fn f32addf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32divf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32mulf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32sqrtf64x(__x: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32subf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
extern "C" {
    pub fn f32xaddf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xfmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xsqrtf64(__x: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
extern "C" {
    pub fn f32xaddf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xdivf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xfmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xmulf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xsqrtf64x(__x: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f32xsubf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
extern "C" {
    pub fn f64addf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64divf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64mulf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64sqrtf64x(__x: _Float64x) -> _Float64;
}
extern "C" {
    pub fn f64subf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
//pub const FP_NAN: _bindgen_ty_2 = 0;
//pub const FP_INFINITE: _bindgen_ty_2 = 1;
//pub const FP_ZERO: _bindgen_ty_2 = 2;
//pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
//pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __iscanonicall(__x: u128) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __iseqsig_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_float_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_float_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_double_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_double_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_long_double_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_long_double_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __uintr_frame {
    pub rip: ::std::os::raw::c_ulonglong,
    pub rflags: ::std::os::raw::c_ulonglong,
    pub rsp: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __uintr_frame"][::std::mem::size_of::<__uintr_frame>() - 24usize];
    ["Alignment of __uintr_frame"][::std::mem::align_of::<__uintr_frame>() - 8usize];
    ["Offset of field: __uintr_frame::rip"][::std::mem::offset_of!(__uintr_frame, rip) - 0usize];
    ["Offset of field: __uintr_frame::rflags"]
        [::std::mem::offset_of!(__uintr_frame, rflags) - 8usize];
    ["Offset of field: __uintr_frame::rsp"][::std::mem::offset_of!(__uintr_frame, rsp) - 16usize];
};
pub const _CMPCCX_ENUM__CMPCCX_O: _CMPCCX_ENUM = 0;
pub const _CMPCCX_ENUM__CMPCCX_NO: _CMPCCX_ENUM = 1;
pub const _CMPCCX_ENUM__CMPCCX_B: _CMPCCX_ENUM = 2;
pub const _CMPCCX_ENUM__CMPCCX_NB: _CMPCCX_ENUM = 3;
pub const _CMPCCX_ENUM__CMPCCX_Z: _CMPCCX_ENUM = 4;
pub const _CMPCCX_ENUM__CMPCCX_NZ: _CMPCCX_ENUM = 5;
pub const _CMPCCX_ENUM__CMPCCX_BE: _CMPCCX_ENUM = 6;
pub const _CMPCCX_ENUM__CMPCCX_NBE: _CMPCCX_ENUM = 7;
pub const _CMPCCX_ENUM__CMPCCX_S: _CMPCCX_ENUM = 8;
pub const _CMPCCX_ENUM__CMPCCX_NS: _CMPCCX_ENUM = 9;
pub const _CMPCCX_ENUM__CMPCCX_P: _CMPCCX_ENUM = 10;
pub const _CMPCCX_ENUM__CMPCCX_NP: _CMPCCX_ENUM = 11;
pub const _CMPCCX_ENUM__CMPCCX_L: _CMPCCX_ENUM = 12;
pub const _CMPCCX_ENUM__CMPCCX_NL: _CMPCCX_ENUM = 13;
pub const _CMPCCX_ENUM__CMPCCX_LE: _CMPCCX_ENUM = 14;
pub const _CMPCCX_ENUM__CMPCCX_NLE: _CMPCCX_ENUM = 15;
pub type _CMPCCX_ENUM = ::std::os::raw::c_uint;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
pub type __v8hf = [__BindgenFloat16; 8usize];
pub type __m128h = [__BindgenFloat16; 8usize];
pub type __m128h_u = [__BindgenFloat16; 8usize];
pub type __v8bf = u128;
pub type __m128bh = u128;
extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
pub type __v4df = [f64; 4usize];
pub type __v8sf = [f32; 8usize];
pub type __v4di = [::std::os::raw::c_longlong; 4usize];
pub type __v8si = [::std::os::raw::c_int; 8usize];
pub type __v16hi = [::std::os::raw::c_short; 16usize];
pub type __v32qi = [::std::os::raw::c_char; 32usize];
pub type __v4du = [::std::os::raw::c_ulonglong; 4usize];
pub type __v8su = [::std::os::raw::c_uint; 8usize];
pub type __v16hu = [::std::os::raw::c_ushort; 16usize];
pub type __v32qu = [::std::os::raw::c_uchar; 32usize];
pub type __v32qs = [::std::os::raw::c_schar; 32usize];
pub type __m256 = [f32; 8usize];
pub type __m256d = [f64; 4usize];
pub type __m256i = [::std::os::raw::c_longlong; 4usize];
pub type __m256_u = [f32; 8usize];
pub type __m256d_u = [f64; 4usize];
pub type __m256i_u = [::std::os::raw::c_longlong; 4usize];
pub type __v16hf = [__BindgenFloat16; 16usize];
pub type __m256h = [__BindgenFloat16; 16usize];
pub type __m256h_u = [__BindgenFloat16; 16usize];
pub type __v16bf = __BindgenOpaqueArray<u8, 32usize>;
pub type __m256bh = __BindgenOpaqueArray<u8, 32usize>;
pub type __v64qi = [::std::os::raw::c_char; 64usize];
pub type __v32hi = [::std::os::raw::c_short; 32usize];
pub type __v8df = [f64; 8usize];
pub type __v16sf = [f32; 16usize];
pub type __v8di = [::std::os::raw::c_longlong; 8usize];
pub type __v16si = [::std::os::raw::c_int; 16usize];
pub type __v64qu = [::std::os::raw::c_uchar; 64usize];
pub type __v32hu = [::std::os::raw::c_ushort; 32usize];
pub type __v8du = [::std::os::raw::c_ulonglong; 8usize];
pub type __v16su = [::std::os::raw::c_uint; 16usize];
pub type __v64qs = [::std::os::raw::c_schar; 64usize];
pub type __m512 = [f32; 16usize];
pub type __m512d = [f64; 8usize];
pub type __m512i = [::std::os::raw::c_longlong; 8usize];
pub type __m512_u = [f32; 16usize];
pub type __m512d_u = [f64; 8usize];
pub type __m512i_u = [::std::os::raw::c_longlong; 8usize];
pub type __mmask8 = ::std::os::raw::c_uchar;
pub type __mmask16 = ::std::os::raw::c_ushort;
pub const _MM_CMPINT_ENUM__MM_CMPINT_EQ: _MM_CMPINT_ENUM = 0;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LT: _MM_CMPINT_ENUM = 1;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LE: _MM_CMPINT_ENUM = 2;
pub const _MM_CMPINT_ENUM__MM_CMPINT_UNUSED: _MM_CMPINT_ENUM = 3;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NE: _MM_CMPINT_ENUM = 4;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLT: _MM_CMPINT_ENUM = 5;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLE: _MM_CMPINT_ENUM = 6;
pub type _MM_CMPINT_ENUM = ::std::os::raw::c_uint;
pub const _MM_PERM_ENUM__MM_PERM_AAAA: _MM_PERM_ENUM = 0;
pub const _MM_PERM_ENUM__MM_PERM_AAAB: _MM_PERM_ENUM = 1;
pub const _MM_PERM_ENUM__MM_PERM_AAAC: _MM_PERM_ENUM = 2;
pub const _MM_PERM_ENUM__MM_PERM_AAAD: _MM_PERM_ENUM = 3;
pub const _MM_PERM_ENUM__MM_PERM_AABA: _MM_PERM_ENUM = 4;
pub const _MM_PERM_ENUM__MM_PERM_AABB: _MM_PERM_ENUM = 5;
pub const _MM_PERM_ENUM__MM_PERM_AABC: _MM_PERM_ENUM = 6;
pub const _MM_PERM_ENUM__MM_PERM_AABD: _MM_PERM_ENUM = 7;
pub const _MM_PERM_ENUM__MM_PERM_AACA: _MM_PERM_ENUM = 8;
pub const _MM_PERM_ENUM__MM_PERM_AACB: _MM_PERM_ENUM = 9;
pub const _MM_PERM_ENUM__MM_PERM_AACC: _MM_PERM_ENUM = 10;
pub const _MM_PERM_ENUM__MM_PERM_AACD: _MM_PERM_ENUM = 11;
pub const _MM_PERM_ENUM__MM_PERM_AADA: _MM_PERM_ENUM = 12;
pub const _MM_PERM_ENUM__MM_PERM_AADB: _MM_PERM_ENUM = 13;
pub const _MM_PERM_ENUM__MM_PERM_AADC: _MM_PERM_ENUM = 14;
pub const _MM_PERM_ENUM__MM_PERM_AADD: _MM_PERM_ENUM = 15;
pub const _MM_PERM_ENUM__MM_PERM_ABAA: _MM_PERM_ENUM = 16;
pub const _MM_PERM_ENUM__MM_PERM_ABAB: _MM_PERM_ENUM = 17;
pub const _MM_PERM_ENUM__MM_PERM_ABAC: _MM_PERM_ENUM = 18;
pub const _MM_PERM_ENUM__MM_PERM_ABAD: _MM_PERM_ENUM = 19;
pub const _MM_PERM_ENUM__MM_PERM_ABBA: _MM_PERM_ENUM = 20;
pub const _MM_PERM_ENUM__MM_PERM_ABBB: _MM_PERM_ENUM = 21;
pub const _MM_PERM_ENUM__MM_PERM_ABBC: _MM_PERM_ENUM = 22;
pub const _MM_PERM_ENUM__MM_PERM_ABBD: _MM_PERM_ENUM = 23;
pub const _MM_PERM_ENUM__MM_PERM_ABCA: _MM_PERM_ENUM = 24;
pub const _MM_PERM_ENUM__MM_PERM_ABCB: _MM_PERM_ENUM = 25;
pub const _MM_PERM_ENUM__MM_PERM_ABCC: _MM_PERM_ENUM = 26;
pub const _MM_PERM_ENUM__MM_PERM_ABCD: _MM_PERM_ENUM = 27;
pub const _MM_PERM_ENUM__MM_PERM_ABDA: _MM_PERM_ENUM = 28;
pub const _MM_PERM_ENUM__MM_PERM_ABDB: _MM_PERM_ENUM = 29;
pub const _MM_PERM_ENUM__MM_PERM_ABDC: _MM_PERM_ENUM = 30;
pub const _MM_PERM_ENUM__MM_PERM_ABDD: _MM_PERM_ENUM = 31;
pub const _MM_PERM_ENUM__MM_PERM_ACAA: _MM_PERM_ENUM = 32;
pub const _MM_PERM_ENUM__MM_PERM_ACAB: _MM_PERM_ENUM = 33;
pub const _MM_PERM_ENUM__MM_PERM_ACAC: _MM_PERM_ENUM = 34;
pub const _MM_PERM_ENUM__MM_PERM_ACAD: _MM_PERM_ENUM = 35;
pub const _MM_PERM_ENUM__MM_PERM_ACBA: _MM_PERM_ENUM = 36;
pub const _MM_PERM_ENUM__MM_PERM_ACBB: _MM_PERM_ENUM = 37;
pub const _MM_PERM_ENUM__MM_PERM_ACBC: _MM_PERM_ENUM = 38;
pub const _MM_PERM_ENUM__MM_PERM_ACBD: _MM_PERM_ENUM = 39;
pub const _MM_PERM_ENUM__MM_PERM_ACCA: _MM_PERM_ENUM = 40;
pub const _MM_PERM_ENUM__MM_PERM_ACCB: _MM_PERM_ENUM = 41;
pub const _MM_PERM_ENUM__MM_PERM_ACCC: _MM_PERM_ENUM = 42;
pub const _MM_PERM_ENUM__MM_PERM_ACCD: _MM_PERM_ENUM = 43;
pub const _MM_PERM_ENUM__MM_PERM_ACDA: _MM_PERM_ENUM = 44;
pub const _MM_PERM_ENUM__MM_PERM_ACDB: _MM_PERM_ENUM = 45;
pub const _MM_PERM_ENUM__MM_PERM_ACDC: _MM_PERM_ENUM = 46;
pub const _MM_PERM_ENUM__MM_PERM_ACDD: _MM_PERM_ENUM = 47;
pub const _MM_PERM_ENUM__MM_PERM_ADAA: _MM_PERM_ENUM = 48;
pub const _MM_PERM_ENUM__MM_PERM_ADAB: _MM_PERM_ENUM = 49;
pub const _MM_PERM_ENUM__MM_PERM_ADAC: _MM_PERM_ENUM = 50;
pub const _MM_PERM_ENUM__MM_PERM_ADAD: _MM_PERM_ENUM = 51;
pub const _MM_PERM_ENUM__MM_PERM_ADBA: _MM_PERM_ENUM = 52;
pub const _MM_PERM_ENUM__MM_PERM_ADBB: _MM_PERM_ENUM = 53;
pub const _MM_PERM_ENUM__MM_PERM_ADBC: _MM_PERM_ENUM = 54;
pub const _MM_PERM_ENUM__MM_PERM_ADBD: _MM_PERM_ENUM = 55;
pub const _MM_PERM_ENUM__MM_PERM_ADCA: _MM_PERM_ENUM = 56;
pub const _MM_PERM_ENUM__MM_PERM_ADCB: _MM_PERM_ENUM = 57;
pub const _MM_PERM_ENUM__MM_PERM_ADCC: _MM_PERM_ENUM = 58;
pub const _MM_PERM_ENUM__MM_PERM_ADCD: _MM_PERM_ENUM = 59;
pub const _MM_PERM_ENUM__MM_PERM_ADDA: _MM_PERM_ENUM = 60;
pub const _MM_PERM_ENUM__MM_PERM_ADDB: _MM_PERM_ENUM = 61;
pub const _MM_PERM_ENUM__MM_PERM_ADDC: _MM_PERM_ENUM = 62;
pub const _MM_PERM_ENUM__MM_PERM_ADDD: _MM_PERM_ENUM = 63;
pub const _MM_PERM_ENUM__MM_PERM_BAAA: _MM_PERM_ENUM = 64;
pub const _MM_PERM_ENUM__MM_PERM_BAAB: _MM_PERM_ENUM = 65;
pub const _MM_PERM_ENUM__MM_PERM_BAAC: _MM_PERM_ENUM = 66;
pub const _MM_PERM_ENUM__MM_PERM_BAAD: _MM_PERM_ENUM = 67;
pub const _MM_PERM_ENUM__MM_PERM_BABA: _MM_PERM_ENUM = 68;
pub const _MM_PERM_ENUM__MM_PERM_BABB: _MM_PERM_ENUM = 69;
pub const _MM_PERM_ENUM__MM_PERM_BABC: _MM_PERM_ENUM = 70;
pub const _MM_PERM_ENUM__MM_PERM_BABD: _MM_PERM_ENUM = 71;
pub const _MM_PERM_ENUM__MM_PERM_BACA: _MM_PERM_ENUM = 72;
pub const _MM_PERM_ENUM__MM_PERM_BACB: _MM_PERM_ENUM = 73;
pub const _MM_PERM_ENUM__MM_PERM_BACC: _MM_PERM_ENUM = 74;
pub const _MM_PERM_ENUM__MM_PERM_BACD: _MM_PERM_ENUM = 75;
pub const _MM_PERM_ENUM__MM_PERM_BADA: _MM_PERM_ENUM = 76;
pub const _MM_PERM_ENUM__MM_PERM_BADB: _MM_PERM_ENUM = 77;
pub const _MM_PERM_ENUM__MM_PERM_BADC: _MM_PERM_ENUM = 78;
pub const _MM_PERM_ENUM__MM_PERM_BADD: _MM_PERM_ENUM = 79;
pub const _MM_PERM_ENUM__MM_PERM_BBAA: _MM_PERM_ENUM = 80;
pub const _MM_PERM_ENUM__MM_PERM_BBAB: _MM_PERM_ENUM = 81;
pub const _MM_PERM_ENUM__MM_PERM_BBAC: _MM_PERM_ENUM = 82;
pub const _MM_PERM_ENUM__MM_PERM_BBAD: _MM_PERM_ENUM = 83;
pub const _MM_PERM_ENUM__MM_PERM_BBBA: _MM_PERM_ENUM = 84;
pub const _MM_PERM_ENUM__MM_PERM_BBBB: _MM_PERM_ENUM = 85;
pub const _MM_PERM_ENUM__MM_PERM_BBBC: _MM_PERM_ENUM = 86;
pub const _MM_PERM_ENUM__MM_PERM_BBBD: _MM_PERM_ENUM = 87;
pub const _MM_PERM_ENUM__MM_PERM_BBCA: _MM_PERM_ENUM = 88;
pub const _MM_PERM_ENUM__MM_PERM_BBCB: _MM_PERM_ENUM = 89;
pub const _MM_PERM_ENUM__MM_PERM_BBCC: _MM_PERM_ENUM = 90;
pub const _MM_PERM_ENUM__MM_PERM_BBCD: _MM_PERM_ENUM = 91;
pub const _MM_PERM_ENUM__MM_PERM_BBDA: _MM_PERM_ENUM = 92;
pub const _MM_PERM_ENUM__MM_PERM_BBDB: _MM_PERM_ENUM = 93;
pub const _MM_PERM_ENUM__MM_PERM_BBDC: _MM_PERM_ENUM = 94;
pub const _MM_PERM_ENUM__MM_PERM_BBDD: _MM_PERM_ENUM = 95;
pub const _MM_PERM_ENUM__MM_PERM_BCAA: _MM_PERM_ENUM = 96;
pub const _MM_PERM_ENUM__MM_PERM_BCAB: _MM_PERM_ENUM = 97;
pub const _MM_PERM_ENUM__MM_PERM_BCAC: _MM_PERM_ENUM = 98;
pub const _MM_PERM_ENUM__MM_PERM_BCAD: _MM_PERM_ENUM = 99;
pub const _MM_PERM_ENUM__MM_PERM_BCBA: _MM_PERM_ENUM = 100;
pub const _MM_PERM_ENUM__MM_PERM_BCBB: _MM_PERM_ENUM = 101;
pub const _MM_PERM_ENUM__MM_PERM_BCBC: _MM_PERM_ENUM = 102;
pub const _MM_PERM_ENUM__MM_PERM_BCBD: _MM_PERM_ENUM = 103;
pub const _MM_PERM_ENUM__MM_PERM_BCCA: _MM_PERM_ENUM = 104;
pub const _MM_PERM_ENUM__MM_PERM_BCCB: _MM_PERM_ENUM = 105;
pub const _MM_PERM_ENUM__MM_PERM_BCCC: _MM_PERM_ENUM = 106;
pub const _MM_PERM_ENUM__MM_PERM_BCCD: _MM_PERM_ENUM = 107;
pub const _MM_PERM_ENUM__MM_PERM_BCDA: _MM_PERM_ENUM = 108;
pub const _MM_PERM_ENUM__MM_PERM_BCDB: _MM_PERM_ENUM = 109;
pub const _MM_PERM_ENUM__MM_PERM_BCDC: _MM_PERM_ENUM = 110;
pub const _MM_PERM_ENUM__MM_PERM_BCDD: _MM_PERM_ENUM = 111;
pub const _MM_PERM_ENUM__MM_PERM_BDAA: _MM_PERM_ENUM = 112;
pub const _MM_PERM_ENUM__MM_PERM_BDAB: _MM_PERM_ENUM = 113;
pub const _MM_PERM_ENUM__MM_PERM_BDAC: _MM_PERM_ENUM = 114;
pub const _MM_PERM_ENUM__MM_PERM_BDAD: _MM_PERM_ENUM = 115;
pub const _MM_PERM_ENUM__MM_PERM_BDBA: _MM_PERM_ENUM = 116;
pub const _MM_PERM_ENUM__MM_PERM_BDBB: _MM_PERM_ENUM = 117;
pub const _MM_PERM_ENUM__MM_PERM_BDBC: _MM_PERM_ENUM = 118;
pub const _MM_PERM_ENUM__MM_PERM_BDBD: _MM_PERM_ENUM = 119;
pub const _MM_PERM_ENUM__MM_PERM_BDCA: _MM_PERM_ENUM = 120;
pub const _MM_PERM_ENUM__MM_PERM_BDCB: _MM_PERM_ENUM = 121;
pub const _MM_PERM_ENUM__MM_PERM_BDCC: _MM_PERM_ENUM = 122;
pub const _MM_PERM_ENUM__MM_PERM_BDCD: _MM_PERM_ENUM = 123;
pub const _MM_PERM_ENUM__MM_PERM_BDDA: _MM_PERM_ENUM = 124;
pub const _MM_PERM_ENUM__MM_PERM_BDDB: _MM_PERM_ENUM = 125;
pub const _MM_PERM_ENUM__MM_PERM_BDDC: _MM_PERM_ENUM = 126;
pub const _MM_PERM_ENUM__MM_PERM_BDDD: _MM_PERM_ENUM = 127;
pub const _MM_PERM_ENUM__MM_PERM_CAAA: _MM_PERM_ENUM = 128;
pub const _MM_PERM_ENUM__MM_PERM_CAAB: _MM_PERM_ENUM = 129;
pub const _MM_PERM_ENUM__MM_PERM_CAAC: _MM_PERM_ENUM = 130;
pub const _MM_PERM_ENUM__MM_PERM_CAAD: _MM_PERM_ENUM = 131;
pub const _MM_PERM_ENUM__MM_PERM_CABA: _MM_PERM_ENUM = 132;
pub const _MM_PERM_ENUM__MM_PERM_CABB: _MM_PERM_ENUM = 133;
pub const _MM_PERM_ENUM__MM_PERM_CABC: _MM_PERM_ENUM = 134;
pub const _MM_PERM_ENUM__MM_PERM_CABD: _MM_PERM_ENUM = 135;
pub const _MM_PERM_ENUM__MM_PERM_CACA: _MM_PERM_ENUM = 136;
pub const _MM_PERM_ENUM__MM_PERM_CACB: _MM_PERM_ENUM = 137;
pub const _MM_PERM_ENUM__MM_PERM_CACC: _MM_PERM_ENUM = 138;
pub const _MM_PERM_ENUM__MM_PERM_CACD: _MM_PERM_ENUM = 139;
pub const _MM_PERM_ENUM__MM_PERM_CADA: _MM_PERM_ENUM = 140;
pub const _MM_PERM_ENUM__MM_PERM_CADB: _MM_PERM_ENUM = 141;
pub const _MM_PERM_ENUM__MM_PERM_CADC: _MM_PERM_ENUM = 142;
pub const _MM_PERM_ENUM__MM_PERM_CADD: _MM_PERM_ENUM = 143;
pub const _MM_PERM_ENUM__MM_PERM_CBAA: _MM_PERM_ENUM = 144;
pub const _MM_PERM_ENUM__MM_PERM_CBAB: _MM_PERM_ENUM = 145;
pub const _MM_PERM_ENUM__MM_PERM_CBAC: _MM_PERM_ENUM = 146;
pub const _MM_PERM_ENUM__MM_PERM_CBAD: _MM_PERM_ENUM = 147;
pub const _MM_PERM_ENUM__MM_PERM_CBBA: _MM_PERM_ENUM = 148;
pub const _MM_PERM_ENUM__MM_PERM_CBBB: _MM_PERM_ENUM = 149;
pub const _MM_PERM_ENUM__MM_PERM_CBBC: _MM_PERM_ENUM = 150;
pub const _MM_PERM_ENUM__MM_PERM_CBBD: _MM_PERM_ENUM = 151;
pub const _MM_PERM_ENUM__MM_PERM_CBCA: _MM_PERM_ENUM = 152;
pub const _MM_PERM_ENUM__MM_PERM_CBCB: _MM_PERM_ENUM = 153;
pub const _MM_PERM_ENUM__MM_PERM_CBCC: _MM_PERM_ENUM = 154;
pub const _MM_PERM_ENUM__MM_PERM_CBCD: _MM_PERM_ENUM = 155;
pub const _MM_PERM_ENUM__MM_PERM_CBDA: _MM_PERM_ENUM = 156;
pub const _MM_PERM_ENUM__MM_PERM_CBDB: _MM_PERM_ENUM = 157;
pub const _MM_PERM_ENUM__MM_PERM_CBDC: _MM_PERM_ENUM = 158;
pub const _MM_PERM_ENUM__MM_PERM_CBDD: _MM_PERM_ENUM = 159;
pub const _MM_PERM_ENUM__MM_PERM_CCAA: _MM_PERM_ENUM = 160;
pub const _MM_PERM_ENUM__MM_PERM_CCAB: _MM_PERM_ENUM = 161;
pub const _MM_PERM_ENUM__MM_PERM_CCAC: _MM_PERM_ENUM = 162;
pub const _MM_PERM_ENUM__MM_PERM_CCAD: _MM_PERM_ENUM = 163;
pub const _MM_PERM_ENUM__MM_PERM_CCBA: _MM_PERM_ENUM = 164;
pub const _MM_PERM_ENUM__MM_PERM_CCBB: _MM_PERM_ENUM = 165;
pub const _MM_PERM_ENUM__MM_PERM_CCBC: _MM_PERM_ENUM = 166;
pub const _MM_PERM_ENUM__MM_PERM_CCBD: _MM_PERM_ENUM = 167;
pub const _MM_PERM_ENUM__MM_PERM_CCCA: _MM_PERM_ENUM = 168;
pub const _MM_PERM_ENUM__MM_PERM_CCCB: _MM_PERM_ENUM = 169;
pub const _MM_PERM_ENUM__MM_PERM_CCCC: _MM_PERM_ENUM = 170;
pub const _MM_PERM_ENUM__MM_PERM_CCCD: _MM_PERM_ENUM = 171;
pub const _MM_PERM_ENUM__MM_PERM_CCDA: _MM_PERM_ENUM = 172;
pub const _MM_PERM_ENUM__MM_PERM_CCDB: _MM_PERM_ENUM = 173;
pub const _MM_PERM_ENUM__MM_PERM_CCDC: _MM_PERM_ENUM = 174;
pub const _MM_PERM_ENUM__MM_PERM_CCDD: _MM_PERM_ENUM = 175;
pub const _MM_PERM_ENUM__MM_PERM_CDAA: _MM_PERM_ENUM = 176;
pub const _MM_PERM_ENUM__MM_PERM_CDAB: _MM_PERM_ENUM = 177;
pub const _MM_PERM_ENUM__MM_PERM_CDAC: _MM_PERM_ENUM = 178;
pub const _MM_PERM_ENUM__MM_PERM_CDAD: _MM_PERM_ENUM = 179;
pub const _MM_PERM_ENUM__MM_PERM_CDBA: _MM_PERM_ENUM = 180;
pub const _MM_PERM_ENUM__MM_PERM_CDBB: _MM_PERM_ENUM = 181;
pub const _MM_PERM_ENUM__MM_PERM_CDBC: _MM_PERM_ENUM = 182;
pub const _MM_PERM_ENUM__MM_PERM_CDBD: _MM_PERM_ENUM = 183;
pub const _MM_PERM_ENUM__MM_PERM_CDCA: _MM_PERM_ENUM = 184;
pub const _MM_PERM_ENUM__MM_PERM_CDCB: _MM_PERM_ENUM = 185;
pub const _MM_PERM_ENUM__MM_PERM_CDCC: _MM_PERM_ENUM = 186;
pub const _MM_PERM_ENUM__MM_PERM_CDCD: _MM_PERM_ENUM = 187;
pub const _MM_PERM_ENUM__MM_PERM_CDDA: _MM_PERM_ENUM = 188;
pub const _MM_PERM_ENUM__MM_PERM_CDDB: _MM_PERM_ENUM = 189;
pub const _MM_PERM_ENUM__MM_PERM_CDDC: _MM_PERM_ENUM = 190;
pub const _MM_PERM_ENUM__MM_PERM_CDDD: _MM_PERM_ENUM = 191;
pub const _MM_PERM_ENUM__MM_PERM_DAAA: _MM_PERM_ENUM = 192;
pub const _MM_PERM_ENUM__MM_PERM_DAAB: _MM_PERM_ENUM = 193;
pub const _MM_PERM_ENUM__MM_PERM_DAAC: _MM_PERM_ENUM = 194;
pub const _MM_PERM_ENUM__MM_PERM_DAAD: _MM_PERM_ENUM = 195;
pub const _MM_PERM_ENUM__MM_PERM_DABA: _MM_PERM_ENUM = 196;
pub const _MM_PERM_ENUM__MM_PERM_DABB: _MM_PERM_ENUM = 197;
pub const _MM_PERM_ENUM__MM_PERM_DABC: _MM_PERM_ENUM = 198;
pub const _MM_PERM_ENUM__MM_PERM_DABD: _MM_PERM_ENUM = 199;
pub const _MM_PERM_ENUM__MM_PERM_DACA: _MM_PERM_ENUM = 200;
pub const _MM_PERM_ENUM__MM_PERM_DACB: _MM_PERM_ENUM = 201;
pub const _MM_PERM_ENUM__MM_PERM_DACC: _MM_PERM_ENUM = 202;
pub const _MM_PERM_ENUM__MM_PERM_DACD: _MM_PERM_ENUM = 203;
pub const _MM_PERM_ENUM__MM_PERM_DADA: _MM_PERM_ENUM = 204;
pub const _MM_PERM_ENUM__MM_PERM_DADB: _MM_PERM_ENUM = 205;
pub const _MM_PERM_ENUM__MM_PERM_DADC: _MM_PERM_ENUM = 206;
pub const _MM_PERM_ENUM__MM_PERM_DADD: _MM_PERM_ENUM = 207;
pub const _MM_PERM_ENUM__MM_PERM_DBAA: _MM_PERM_ENUM = 208;
pub const _MM_PERM_ENUM__MM_PERM_DBAB: _MM_PERM_ENUM = 209;
pub const _MM_PERM_ENUM__MM_PERM_DBAC: _MM_PERM_ENUM = 210;
pub const _MM_PERM_ENUM__MM_PERM_DBAD: _MM_PERM_ENUM = 211;
pub const _MM_PERM_ENUM__MM_PERM_DBBA: _MM_PERM_ENUM = 212;
pub const _MM_PERM_ENUM__MM_PERM_DBBB: _MM_PERM_ENUM = 213;
pub const _MM_PERM_ENUM__MM_PERM_DBBC: _MM_PERM_ENUM = 214;
pub const _MM_PERM_ENUM__MM_PERM_DBBD: _MM_PERM_ENUM = 215;
pub const _MM_PERM_ENUM__MM_PERM_DBCA: _MM_PERM_ENUM = 216;
pub const _MM_PERM_ENUM__MM_PERM_DBCB: _MM_PERM_ENUM = 217;
pub const _MM_PERM_ENUM__MM_PERM_DBCC: _MM_PERM_ENUM = 218;
pub const _MM_PERM_ENUM__MM_PERM_DBCD: _MM_PERM_ENUM = 219;
pub const _MM_PERM_ENUM__MM_PERM_DBDA: _MM_PERM_ENUM = 220;
pub const _MM_PERM_ENUM__MM_PERM_DBDB: _MM_PERM_ENUM = 221;
pub const _MM_PERM_ENUM__MM_PERM_DBDC: _MM_PERM_ENUM = 222;
pub const _MM_PERM_ENUM__MM_PERM_DBDD: _MM_PERM_ENUM = 223;
pub const _MM_PERM_ENUM__MM_PERM_DCAA: _MM_PERM_ENUM = 224;
pub const _MM_PERM_ENUM__MM_PERM_DCAB: _MM_PERM_ENUM = 225;
pub const _MM_PERM_ENUM__MM_PERM_DCAC: _MM_PERM_ENUM = 226;
pub const _MM_PERM_ENUM__MM_PERM_DCAD: _MM_PERM_ENUM = 227;
pub const _MM_PERM_ENUM__MM_PERM_DCBA: _MM_PERM_ENUM = 228;
pub const _MM_PERM_ENUM__MM_PERM_DCBB: _MM_PERM_ENUM = 229;
pub const _MM_PERM_ENUM__MM_PERM_DCBC: _MM_PERM_ENUM = 230;
pub const _MM_PERM_ENUM__MM_PERM_DCBD: _MM_PERM_ENUM = 231;
pub const _MM_PERM_ENUM__MM_PERM_DCCA: _MM_PERM_ENUM = 232;
pub const _MM_PERM_ENUM__MM_PERM_DCCB: _MM_PERM_ENUM = 233;
pub const _MM_PERM_ENUM__MM_PERM_DCCC: _MM_PERM_ENUM = 234;
pub const _MM_PERM_ENUM__MM_PERM_DCCD: _MM_PERM_ENUM = 235;
pub const _MM_PERM_ENUM__MM_PERM_DCDA: _MM_PERM_ENUM = 236;
pub const _MM_PERM_ENUM__MM_PERM_DCDB: _MM_PERM_ENUM = 237;
pub const _MM_PERM_ENUM__MM_PERM_DCDC: _MM_PERM_ENUM = 238;
pub const _MM_PERM_ENUM__MM_PERM_DCDD: _MM_PERM_ENUM = 239;
pub const _MM_PERM_ENUM__MM_PERM_DDAA: _MM_PERM_ENUM = 240;
pub const _MM_PERM_ENUM__MM_PERM_DDAB: _MM_PERM_ENUM = 241;
pub const _MM_PERM_ENUM__MM_PERM_DDAC: _MM_PERM_ENUM = 242;
pub const _MM_PERM_ENUM__MM_PERM_DDAD: _MM_PERM_ENUM = 243;
pub const _MM_PERM_ENUM__MM_PERM_DDBA: _MM_PERM_ENUM = 244;
pub const _MM_PERM_ENUM__MM_PERM_DDBB: _MM_PERM_ENUM = 245;
pub const _MM_PERM_ENUM__MM_PERM_DDBC: _MM_PERM_ENUM = 246;
pub const _MM_PERM_ENUM__MM_PERM_DDBD: _MM_PERM_ENUM = 247;
pub const _MM_PERM_ENUM__MM_PERM_DDCA: _MM_PERM_ENUM = 248;
pub const _MM_PERM_ENUM__MM_PERM_DDCB: _MM_PERM_ENUM = 249;
pub const _MM_PERM_ENUM__MM_PERM_DDCC: _MM_PERM_ENUM = 250;
pub const _MM_PERM_ENUM__MM_PERM_DDCD: _MM_PERM_ENUM = 251;
pub const _MM_PERM_ENUM__MM_PERM_DDDA: _MM_PERM_ENUM = 252;
pub const _MM_PERM_ENUM__MM_PERM_DDDB: _MM_PERM_ENUM = 253;
pub const _MM_PERM_ENUM__MM_PERM_DDDC: _MM_PERM_ENUM = 254;
pub const _MM_PERM_ENUM__MM_PERM_DDDD: _MM_PERM_ENUM = 255;
pub type _MM_PERM_ENUM = ::std::os::raw::c_uint;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2: _MM_MANTISSA_NORM_ENUM = 0;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2: _MM_MANTISSA_NORM_ENUM = 1;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1: _MM_MANTISSA_NORM_ENUM = 2;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5: _MM_MANTISSA_NORM_ENUM = 3;
pub type _MM_MANTISSA_NORM_ENUM = ::std::os::raw::c_uint;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src: _MM_MANTISSA_SIGN_ENUM = 0;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero: _MM_MANTISSA_SIGN_ENUM = 1;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan: _MM_MANTISSA_SIGN_ENUM = 2;
pub type _MM_MANTISSA_SIGN_ENUM = ::std::os::raw::c_uint;
pub const _MM_TERNLOG_ENUM__MM_TERNLOG_A: _MM_TERNLOG_ENUM = 240;
pub const _MM_TERNLOG_ENUM__MM_TERNLOG_B: _MM_TERNLOG_ENUM = 204;
pub const _MM_TERNLOG_ENUM__MM_TERNLOG_C: _MM_TERNLOG_ENUM = 170;
pub type _MM_TERNLOG_ENUM = ::std::os::raw::c_uint;
pub type __v2hi = [::std::os::raw::c_short; 2usize];
pub type __v4qi = [::std::os::raw::c_char; 4usize];
pub type __v2qi = [::std::os::raw::c_char; 2usize];
pub type __mmask32 = ::std::os::raw::c_uint;
pub type __mmask64 = ::std::os::raw::c_ulonglong;
pub type __v32hf = [__BindgenFloat16; 32usize];
pub type __m512h = [__BindgenFloat16; 32usize];
pub type __m512h_u = [__BindgenFloat16; 32usize];
pub type __v32bf = __BindgenOpaqueArray<u8, 64usize>;
pub type __m512bh = __BindgenOpaqueArray<u8, 64usize>;
pub type __bfloat16 = u16;
pub type _tile1024i = [::std::os::raw::c_int; 256usize];
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct __tile1024i_str {
    pub row: ::std::os::raw::c_ushort,
    pub col: ::std::os::raw::c_ushort,
    pub __bindgen_padding_0: [u64; 7usize],
    pub tile: _tile1024i,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __tile1024i_str"][::std::mem::size_of::<__tile1024i_str>() - 1088usize];
    ["Alignment of __tile1024i_str"][::std::mem::align_of::<__tile1024i_str>() - 64usize];
    ["Offset of field: __tile1024i_str::row"]
        [::std::mem::offset_of!(__tile1024i_str, row) - 0usize];
    ["Offset of field: __tile1024i_str::col"]
        [::std::mem::offset_of!(__tile1024i_str, col) - 2usize];
    ["Offset of field: __tile1024i_str::tile"]
        [::std::mem::offset_of!(__tile1024i_str, tile) - 64usize];
};
pub type __tile1024i = __tile1024i_str;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextDeactivateData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiFocusRequestFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiLogFlags = ::std::os::raw::c_int;
pub type ImGuiNavRenderCursorFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiTypingSelectFlags = ::std::os::raw::c_int;
pub type ImGuiWindowRefreshFlags = ::std::os::raw::c_int;
extern "C" {
    pub static mut GImGui: *mut ImGuiContext;
}
extern "C" {
    #[link_name = "\u{1}_Z10ImHashDataPKvmj"]
    pub fn ImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_Z9ImHashStrPKcmj"]
    pub fn ImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: usize,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_Z18ImAlphaBlendColorsjj"]
    pub fn ImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
extern "C" {
    #[link_name = "\u{1}_Z9ImStricmpPKcS0_"]
    pub fn ImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z10ImStrnicmpPKcS0_m"]
    pub fn ImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z9ImStrncpyPcPKcm"]
    pub fn ImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z8ImStrdupPKc"]
    pub fn ImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z11ImStrdupcpyPcPmPKc"]
    pub fn ImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut usize,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z13ImStrchrRangePKcS0_c"]
    pub fn ImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z13ImStreolRangePKcS0_"]
    pub fn ImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z9ImStristrPKcS0_S0_S0_"]
    pub fn ImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z15ImStrTrimBlanksPc"]
    pub fn ImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_Z14ImStrSkipBlankPKc"]
    pub fn ImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z9ImStrlenWPKt"]
    pub fn ImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z8ImStrbolPKcS0_"]
    pub fn ImStrbol(
        buf_mid_line: *const ::std::os::raw::c_char,
        buf_begin: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z14ImFormatStringPcmPKcz"]
    pub fn ImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z15ImFormatStringVPcmPKcP13__va_list_tag"]
    pub fn ImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z26ImFormatStringToTempBufferPPKcS1_S0_z"]
    pub fn ImFormatStringToTempBuffer(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[link_name = "\u{1}_Z27ImFormatStringToTempBufferVPPKcS1_S0_P13__va_list_tag"]
    pub fn ImFormatStringToTempBufferV(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z22ImParseFormatFindStartPKc"]
    pub fn ImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z20ImParseFormatFindEndPKc"]
    pub fn ImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z28ImParseFormatTrimDecorationsPKcPcm"]
    pub fn ImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z32ImParseFormatSanitizeForPrintingPKcPcm"]
    pub fn ImParseFormatSanitizeForPrinting(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z32ImParseFormatSanitizeForScanningPKcPcm"]
    pub fn ImParseFormatSanitizeForScanning(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z22ImParseFormatPrecisionPKci"]
    pub fn ImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z16ImTextCharToUtf8Pcj"]
    pub fn ImTextCharToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z15ImTextStrToUtf8PciPKtS1_"]
    pub fn ImTextStrToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z18ImTextCharFromUtf8PjPKcS1_"]
    pub fn ImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z17ImTextStrFromUtf8PtiPKcS1_PS1_"]
    pub fn ImTextStrFromUtf8(
        out_buf: *mut ImWchar,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z24ImTextCountCharsFromUtf8PKcS0_"]
    pub fn ImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z28ImTextCountUtf8BytesFromCharPKcS0_"]
    pub fn ImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z27ImTextCountUtf8BytesFromStrPKtS0_"]
    pub fn ImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Z31ImTextFindPreviousUtf8CodepointPKcS0_"]
    pub fn ImTextFindPreviousUtf8Codepoint(
        in_text_start: *const ::std::os::raw::c_char,
        in_text_curr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_Z16ImTextCountLinesPKcS0_"]
    pub fn ImTextCountLines(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type ImFileHandle = *mut FILE;
extern "C" {
    #[link_name = "\u{1}_Z10ImFileOpenPKcS0_"]
    pub fn ImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
extern "C" {
    #[link_name = "\u{1}_Z11ImFileCloseP8_IO_FILE"]
    pub fn ImFileClose(file: ImFileHandle) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z13ImFileGetSizeP8_IO_FILE"]
    pub fn ImFileGetSize(file: ImFileHandle) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}_Z10ImFileReadPvyyP8_IO_FILE"]
    pub fn ImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}_Z11ImFileWritePKvyyP8_IO_FILE"]
    pub fn ImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    #[link_name = "\u{1}_Z18ImFileLoadToMemoryPKcS0_Pmi"]
    pub fn ImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_Z17ImBezierCubicCalcRK6ImVec2S1_S1_S1_f"]
    pub fn ImBezierCubicCalc(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        t: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i"]
    pub fn ImBezierCubicClosestPoint(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        p: *const ImVec2,
        num_segments: ::std::os::raw::c_int,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f"]
    pub fn ImBezierCubicClosestPointCasteljau(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        p4: *const ImVec2,
        p: *const ImVec2,
        tess_tol: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z21ImBezierQuadraticCalcRK6ImVec2S1_S1_f"]
    pub fn ImBezierQuadraticCalc(
        p1: *const ImVec2,
        p2: *const ImVec2,
        p3: *const ImVec2,
        t: f32,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z18ImLineClosestPointRK6ImVec2S1_S1_"]
    pub fn ImLineClosestPoint(a: *const ImVec2, b: *const ImVec2, p: *const ImVec2) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_"]
    pub fn ImTriangleContainsPoint(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_"]
    pub fn ImTriangleClosestPoint(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
    ) -> ImVec2;
}
extern "C" {
    #[link_name = "\u{1}_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_"]
    pub fn ImTriangleBarycentricCoords(
        a: *const ImVec2,
        b: *const ImVec2,
        c: *const ImVec2,
        p: *const ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec1"][::std::mem::size_of::<ImVec1>() - 4usize];
    ["Alignment of ImVec1"][::std::mem::align_of::<ImVec1>() - 4usize];
    ["Offset of field: ImVec1::x"][::std::mem::offset_of!(ImVec1, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImVec2ih"][::std::mem::size_of::<ImVec2ih>() - 4usize];
    ["Alignment of ImVec2ih"][::std::mem::align_of::<ImVec2ih>() - 2usize];
    ["Offset of field: ImVec2ih::x"][::std::mem::offset_of!(ImVec2ih, x) - 0usize];
    ["Offset of field: ImVec2ih::y"][::std::mem::offset_of!(ImVec2ih, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImRect"][::std::mem::size_of::<ImRect>() - 16usize];
    ["Alignment of ImRect"][::std::mem::align_of::<ImRect>() - 4usize];
    ["Offset of field: ImRect::Min"][::std::mem::offset_of!(ImRect, Min) - 0usize];
    ["Offset of field: ImRect::Max"][::std::mem::offset_of!(ImRect, Max) - 8usize];
};
pub type ImBitArrayPtr = *mut ImU32;
#[repr(C)]
#[derive(Debug)]
pub struct ImBitVector {
    pub Storage: ImVector<ImU32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImBitVector"][::std::mem::size_of::<ImBitVector>() - 16usize];
    ["Alignment of ImBitVector"][::std::mem::align_of::<ImBitVector>() - 8usize];
    ["Offset of field: ImBitVector::Storage"]
        [::std::mem::offset_of!(ImBitVector, Storage) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Data: *mut T,
    pub DataEnd: *mut T,
}
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
pub struct ImPool<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub Buf: ImVector<T>,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[repr(C)]
#[derive(Debug)]
pub struct ImChunkStream {
    pub Buf: ImVector<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTextIndex {
    pub LineOffsets: ImVector<::std::os::raw::c_int>,
    pub EndOffset: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTextIndex"][::std::mem::size_of::<ImGuiTextIndex>() - 24usize];
    ["Alignment of ImGuiTextIndex"][::std::mem::align_of::<ImGuiTextIndex>() - 8usize];
    ["Offset of field: ImGuiTextIndex::LineOffsets"]
        [::std::mem::offset_of!(ImGuiTextIndex, LineOffsets) - 0usize];
    ["Offset of field: ImGuiTextIndex::EndOffset"]
        [::std::mem::offset_of!(ImGuiTextIndex, EndOffset) - 16usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN14ImGuiTextIndex6appendEPKcii"]
    pub fn ImGuiTextIndex_append(
        this: *mut ImGuiTextIndex,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    );
}
impl ImGuiTextIndex {
    #[inline]
    pub unsafe fn append(
        &mut self,
        base: *const ::std::os::raw::c_char,
        old_size: ::std::os::raw::c_int,
        new_size: ::std::os::raw::c_int,
    ) {
        ImGuiTextIndex_append(self, base, old_size, new_size)
    }
}
extern "C" {
    #[link_name = "\u{1}_Z12ImLowerBoundP16ImGuiStoragePairS0_j"]
    pub fn ImLowerBound(
        in_begin: *mut ImGuiStoragePair,
        in_end: *mut ImGuiStoragePair,
        key: ImGuiID,
    ) -> *mut ImGuiStoragePair;
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub TexUvLines: *const ImVec4,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontScale: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub TempBuffer: ImVector<ImVec2>,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawListSharedData"][::std::mem::size_of::<ImDrawListSharedData>() - 536usize];
    ["Alignment of ImDrawListSharedData"][::std::mem::align_of::<ImDrawListSharedData>() - 8usize];
    ["Offset of field: ImDrawListSharedData::TexUvWhitePixel"]
        [::std::mem::offset_of!(ImDrawListSharedData, TexUvWhitePixel) - 0usize];
    ["Offset of field: ImDrawListSharedData::TexUvLines"]
        [::std::mem::offset_of!(ImDrawListSharedData, TexUvLines) - 8usize];
    ["Offset of field: ImDrawListSharedData::Font"]
        [::std::mem::offset_of!(ImDrawListSharedData, Font) - 16usize];
    ["Offset of field: ImDrawListSharedData::FontSize"]
        [::std::mem::offset_of!(ImDrawListSharedData, FontSize) - 24usize];
    ["Offset of field: ImDrawListSharedData::FontScale"]
        [::std::mem::offset_of!(ImDrawListSharedData, FontScale) - 28usize];
    ["Offset of field: ImDrawListSharedData::CurveTessellationTol"]
        [::std::mem::offset_of!(ImDrawListSharedData, CurveTessellationTol) - 32usize];
    ["Offset of field: ImDrawListSharedData::CircleSegmentMaxError"]
        [::std::mem::offset_of!(ImDrawListSharedData, CircleSegmentMaxError) - 36usize];
    ["Offset of field: ImDrawListSharedData::ClipRectFullscreen"]
        [::std::mem::offset_of!(ImDrawListSharedData, ClipRectFullscreen) - 40usize];
    ["Offset of field: ImDrawListSharedData::InitialFlags"]
        [::std::mem::offset_of!(ImDrawListSharedData, InitialFlags) - 56usize];
    ["Offset of field: ImDrawListSharedData::TempBuffer"]
        [::std::mem::offset_of!(ImDrawListSharedData, TempBuffer) - 64usize];
    ["Offset of field: ImDrawListSharedData::ArcFastVtx"]
        [::std::mem::offset_of!(ImDrawListSharedData, ArcFastVtx) - 80usize];
    ["Offset of field: ImDrawListSharedData::ArcFastRadiusCutoff"]
        [::std::mem::offset_of!(ImDrawListSharedData, ArcFastRadiusCutoff) - 464usize];
    ["Offset of field: ImDrawListSharedData::CircleSegmentCounts"]
        [::std::mem::offset_of!(ImDrawListSharedData, CircleSegmentCounts) - 468usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN20ImDrawListSharedData29SetCircleTessellationMaxErrorEf"]
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(
        this: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN20ImDrawListSharedDataC1Ev"]
    pub fn ImDrawListSharedData_ImDrawListSharedData(this: *mut ImDrawListSharedData);
}
impl ImDrawListSharedData {
    #[inline]
    pub unsafe fn SetCircleTessellationMaxError(&mut self, max_error: f32) {
        ImDrawListSharedData_SetCircleTessellationMaxError(self, max_error)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImDrawListSharedData_ImDrawListSharedData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImDrawDataBuilder {
    pub Layers: [*mut ImVector<*mut ImDrawList>; 2usize],
    pub LayerData1: ImVector<*mut ImDrawList>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImDrawDataBuilder"][::std::mem::size_of::<ImDrawDataBuilder>() - 32usize];
    ["Alignment of ImDrawDataBuilder"][::std::mem::align_of::<ImDrawDataBuilder>() - 8usize];
    ["Offset of field: ImDrawDataBuilder::Layers"]
        [::std::mem::offset_of!(ImDrawDataBuilder, Layers) - 0usize];
    ["Offset of field: ImDrawDataBuilder::LayerData1"]
        [::std::mem::offset_of!(ImDrawDataBuilder, LayerData1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataVarInfo {
    pub Type: ImGuiDataType,
    pub Count: ImU32,
    pub Offset: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataVarInfo"][::std::mem::size_of::<ImGuiDataVarInfo>() - 12usize];
    ["Alignment of ImGuiDataVarInfo"][::std::mem::align_of::<ImGuiDataVarInfo>() - 4usize];
    ["Offset of field: ImGuiDataVarInfo::Type"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Type) - 0usize];
    ["Offset of field: ImGuiDataVarInfo::Count"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Count) - 4usize];
    ["Offset of field: ImGuiDataVarInfo::Offset"]
        [::std::mem::offset_of!(ImGuiDataVarInfo, Offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeStorage {
    pub Data: [ImU8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataTypeStorage"][::std::mem::size_of::<ImGuiDataTypeStorage>() - 8usize];
    ["Alignment of ImGuiDataTypeStorage"][::std::mem::align_of::<ImGuiDataTypeStorage>() - 1usize];
    ["Offset of field: ImGuiDataTypeStorage::Data"]
        [::std::mem::offset_of!(ImGuiDataTypeStorage, Data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDataTypeInfo"][::std::mem::size_of::<ImGuiDataTypeInfo>() - 32usize];
    ["Alignment of ImGuiDataTypeInfo"][::std::mem::align_of::<ImGuiDataTypeInfo>() - 8usize];
    ["Offset of field: ImGuiDataTypeInfo::Size"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, Size) - 0usize];
    ["Offset of field: ImGuiDataTypeInfo::Name"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, Name) - 8usize];
    ["Offset of field: ImGuiDataTypeInfo::PrintFmt"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, PrintFmt) - 16usize];
    ["Offset of field: ImGuiDataTypeInfo::ScanFmt"]
        [::std::mem::offset_of!(ImGuiDataTypeInfo, ScanFmt) - 24usize];
};
pub const ImGuiDataTypePrivate__ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 13;
pub const ImGuiDataTypePrivate__ImGuiDataType_ID: ImGuiDataTypePrivate_ = 14;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_uint;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_Disabled: ImGuiItemFlagsPrivate_ = 1024;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_ReadOnly: ImGuiItemFlagsPrivate_ = 2048;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_MixedValue: ImGuiItemFlagsPrivate_ = 4096;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_NoWindowHoverableCheck: ImGuiItemFlagsPrivate_ =
    8192;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_AllowOverlap: ImGuiItemFlagsPrivate_ = 16384;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_NoNavDisableMouseHover: ImGuiItemFlagsPrivate_ =
    32768;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_NoMarkEdited: ImGuiItemFlagsPrivate_ = 65536;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_Inputable: ImGuiItemFlagsPrivate_ = 1048576;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_HasSelectionUserData: ImGuiItemFlagsPrivate_ =
    2097152;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_IsMultiSelect: ImGuiItemFlagsPrivate_ = 4194304;
pub const ImGuiItemFlagsPrivate__ImGuiItemFlags_Default_: ImGuiItemFlagsPrivate_ = 16;
pub type ImGuiItemFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Visible: ImGuiItemStatusFlags_ = 256;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasClipRect: ImGuiItemStatusFlags_ = 512;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasShortcut: ImGuiItemStatusFlags_ = 1024;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_uint;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_DelayMask_: ImGuiHoveredFlagsPrivate_ =
    245760;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_AllowedMaskForIsWindowHovered:
    ImGuiHoveredFlagsPrivate_ = 12479;
pub const ImGuiHoveredFlagsPrivate__ImGuiHoveredFlags_AllowedMaskForIsItemHovered:
    ImGuiHoveredFlagsPrivate_ = 262048;
pub type ImGuiHoveredFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_Multiline: ImGuiInputTextFlagsPrivate_ =
    67108864;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_MergedItem: ImGuiInputTextFlagsPrivate_ =
    134217728;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_LocalizeDecimalPoint:
    ImGuiInputTextFlagsPrivate_ = 268435456;
pub type ImGuiInputTextFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickRelease:
    ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickReleaseAnywhere:
    ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ =
    128;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ =
    256;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDragDropHold:
    ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ =
    2048;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AllowOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ =
    32768;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoKeyModsAllowed: ImGuiButtonFlagsPrivate_ =
    65536;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ =
    131072;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ =
    524288;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoSetKeyOwner: ImGuiButtonFlagsPrivate_ =
    1048576;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoTestKeyOwner: ImGuiButtonFlagsPrivate_ =
    2097152;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ =
    32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiComboFlagsPrivate__ImGuiComboFlags_CustomPreview: ImGuiComboFlagsPrivate_ = 1048576;
pub type ImGuiComboFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoHoldingActiveID:
    ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnNav:
    ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnClick:
    ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnRelease:
    ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SpanAvailWidth:
    ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SetNavIdOnHover:
    ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoPadWithHalfSpacing:
    ImGuiSelectableFlagsPrivate_ = 67108864;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoSetKeyOwner:
    ImGuiSelectableFlagsPrivate_ = 134217728;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_ClipLabelForTrailingButton:
    ImGuiTreeNodeFlagsPrivate_ = 268435456;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_UpsideDownArrow:
    ImGuiTreeNodeFlagsPrivate_ = 536870912;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_OpenOnMask_: ImGuiTreeNodeFlagsPrivate_ =
    192;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_uint;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_None: ImGuiFocusRequestFlags_ = 0;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_RestoreFocusedChild:
    ImGuiFocusRequestFlags_ = 1;
pub const ImGuiFocusRequestFlags__ImGuiFocusRequestFlags_UnlessBelowModal: ImGuiFocusRequestFlags_ =
    2;
pub type ImGuiFocusRequestFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTextFlags__ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags__ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_uint;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_OverridePrevious: ImGuiTooltipFlags_ = 2;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_uint;
pub const ImGuiLayoutType__ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType__ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_uint;
pub const ImGuiLogFlags__ImGuiLogFlags_None: ImGuiLogFlags_ = 0;
pub const ImGuiLogFlags__ImGuiLogFlags_OutputTTY: ImGuiLogFlags_ = 1;
pub const ImGuiLogFlags__ImGuiLogFlags_OutputFile: ImGuiLogFlags_ = 2;
pub const ImGuiLogFlags__ImGuiLogFlags_OutputBuffer: ImGuiLogFlags_ = 4;
pub const ImGuiLogFlags__ImGuiLogFlags_OutputClipboard: ImGuiLogFlags_ = 8;
pub const ImGuiLogFlags__ImGuiLogFlags_OutputMask_: ImGuiLogFlags_ = 15;
pub type ImGuiLogFlags_ = ::std::os::raw::c_uint;
pub const ImGuiAxis_ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiColorMod"][::std::mem::size_of::<ImGuiColorMod>() - 20usize];
    ["Alignment of ImGuiColorMod"][::std::mem::align_of::<ImGuiColorMod>() - 4usize];
    ["Offset of field: ImGuiColorMod::Col"][::std::mem::offset_of!(ImGuiColorMod, Col) - 0usize];
    ["Offset of field: ImGuiColorMod::BackupValue"]
        [::std::mem::offset_of!(ImGuiColorMod, BackupValue) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyleMod__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>() - 8usize];
    ["Alignment of ImGuiStyleMod__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>() - 4usize];
    ["Offset of field: ImGuiStyleMod__bindgen_ty_1::BackupInt"]
        [::std::mem::offset_of!(ImGuiStyleMod__bindgen_ty_1, BackupInt) - 0usize];
    ["Offset of field: ImGuiStyleMod__bindgen_ty_1::BackupFloat"]
        [::std::mem::offset_of!(ImGuiStyleMod__bindgen_ty_1, BackupFloat) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStyleMod"][::std::mem::size_of::<ImGuiStyleMod>() - 12usize];
    ["Alignment of ImGuiStyleMod"][::std::mem::align_of::<ImGuiStyleMod>() - 4usize];
    ["Offset of field: ImGuiStyleMod::VarIdx"]
        [::std::mem::offset_of!(ImGuiStyleMod, VarIdx) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiComboPreviewData"][::std::mem::size_of::<ImGuiComboPreviewData>() - 48usize];
    ["Alignment of ImGuiComboPreviewData"]
        [::std::mem::align_of::<ImGuiComboPreviewData>() - 4usize];
    ["Offset of field: ImGuiComboPreviewData::PreviewRect"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, PreviewRect) - 0usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorPos) - 16usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorMaxPos) - 24usize];
    ["Offset of field: ImGuiComboPreviewData::BackupCursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupCursorPosPrevLine) - 32usize];
    ["Offset of field: ImGuiComboPreviewData::BackupPrevLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupPrevLineTextBaseOffset) - 40usize];
    ["Offset of field: ImGuiComboPreviewData::BackupLayout"]
        [::std::mem::offset_of!(ImGuiComboPreviewData, BackupLayout) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupDeactivatedIdIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub BackupIsSameLine: bool,
    pub EmitItem: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiGroupData"][::std::mem::size_of::<ImGuiGroupData>() - 56usize];
    ["Alignment of ImGuiGroupData"][::std::mem::align_of::<ImGuiGroupData>() - 4usize];
    ["Offset of field: ImGuiGroupData::WindowID"]
        [::std::mem::offset_of!(ImGuiGroupData, WindowID) - 0usize];
    ["Offset of field: ImGuiGroupData::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorPos) - 4usize];
    ["Offset of field: ImGuiGroupData::BackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorMaxPos) - 12usize];
    ["Offset of field: ImGuiGroupData::BackupCursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCursorPosPrevLine) - 20usize];
    ["Offset of field: ImGuiGroupData::BackupIndent"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupIndent) - 28usize];
    ["Offset of field: ImGuiGroupData::BackupGroupOffset"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupGroupOffset) - 32usize];
    ["Offset of field: ImGuiGroupData::BackupCurrLineSize"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCurrLineSize) - 36usize];
    ["Offset of field: ImGuiGroupData::BackupCurrLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupCurrLineTextBaseOffset) - 44usize];
    ["Offset of field: ImGuiGroupData::BackupActiveIdIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupActiveIdIsAlive) - 48usize];
    ["Offset of field: ImGuiGroupData::BackupDeactivatedIdIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupDeactivatedIdIsAlive) - 52usize];
    ["Offset of field: ImGuiGroupData::BackupHoveredIdIsAlive"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupHoveredIdIsAlive) - 53usize];
    ["Offset of field: ImGuiGroupData::BackupIsSameLine"]
        [::std::mem::offset_of!(ImGuiGroupData, BackupIsSameLine) - 54usize];
    ["Offset of field: ImGuiGroupData::EmitItem"]
        [::std::mem::offset_of!(ImGuiGroupData, EmitItem) - 55usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMenuColumns"][::std::mem::size_of::<ImGuiMenuColumns>() - 28usize];
    ["Alignment of ImGuiMenuColumns"][::std::mem::align_of::<ImGuiMenuColumns>() - 4usize];
    ["Offset of field: ImGuiMenuColumns::TotalWidth"]
        [::std::mem::offset_of!(ImGuiMenuColumns, TotalWidth) - 0usize];
    ["Offset of field: ImGuiMenuColumns::NextTotalWidth"]
        [::std::mem::offset_of!(ImGuiMenuColumns, NextTotalWidth) - 4usize];
    ["Offset of field: ImGuiMenuColumns::Spacing"]
        [::std::mem::offset_of!(ImGuiMenuColumns, Spacing) - 8usize];
    ["Offset of field: ImGuiMenuColumns::OffsetIcon"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetIcon) - 10usize];
    ["Offset of field: ImGuiMenuColumns::OffsetLabel"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetLabel) - 12usize];
    ["Offset of field: ImGuiMenuColumns::OffsetShortcut"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetShortcut) - 14usize];
    ["Offset of field: ImGuiMenuColumns::OffsetMark"]
        [::std::mem::offset_of!(ImGuiMenuColumns, OffsetMark) - 16usize];
    ["Offset of field: ImGuiMenuColumns::Widths"]
        [::std::mem::offset_of!(ImGuiMenuColumns, Widths) - 18usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiMenuColumns6UpdateEfb"]
    pub fn ImGuiMenuColumns_Update(
        this: *mut ImGuiMenuColumns,
        spacing: f32,
        window_reappearing: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiMenuColumns11DeclColumnsEffff"]
    pub fn ImGuiMenuColumns_DeclColumns(
        this: *mut ImGuiMenuColumns,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ZN16ImGuiMenuColumns18CalcNextTotalWidthEb"]
    pub fn ImGuiMenuColumns_CalcNextTotalWidth(this: *mut ImGuiMenuColumns, update_offsets: bool);
}
impl ImGuiMenuColumns {
    #[inline]
    pub unsafe fn Update(&mut self, spacing: f32, window_reappearing: bool) {
        ImGuiMenuColumns_Update(self, spacing, window_reappearing)
    }
    #[inline]
    pub unsafe fn DeclColumns(
        &mut self,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32 {
        ImGuiMenuColumns_DeclColumns(self, w_icon, w_label, w_shortcut, w_mark)
    }
    #[inline]
    pub unsafe fn CalcNextTotalWidth(&mut self, update_offsets: bool) {
        ImGuiMenuColumns_CalcNextTotalWidth(self, update_offsets)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiInputTextDeactivatedState {
    pub ID: ImGuiID,
    pub TextA: ImVector<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextDeactivatedState"]
        [::std::mem::size_of::<ImGuiInputTextDeactivatedState>() - 24usize];
    ["Alignment of ImGuiInputTextDeactivatedState"]
        [::std::mem::align_of::<ImGuiInputTextDeactivatedState>() - 8usize];
    ["Offset of field: ImGuiInputTextDeactivatedState::ID"]
        [::std::mem::offset_of!(ImGuiInputTextDeactivatedState, ID) - 0usize];
    ["Offset of field: ImGuiInputTextDeactivatedState::TextA"]
        [::std::mem::offset_of!(ImGuiInputTextDeactivatedState, TextA) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImStb_STB_TexteditState {
    _unused: [u8; 0],
}
pub type ImStbTexteditState = ImStb_STB_TexteditState;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiInputTextState {
    pub Ctx: *mut ImGuiContext,
    pub Stb: *mut ImStbTexteditState,
    pub Flags: ImGuiInputTextFlags,
    pub ID: ImGuiID,
    pub TextLen: ::std::os::raw::c_int,
    pub TextSrc: *const ::std::os::raw::c_char,
    pub TextA: ImVector<::std::os::raw::c_char>,
    pub TextToRevertTo: ImVector<::std::os::raw::c_char>,
    pub CallbackTextBackup: ImVector<::std::os::raw::c_char>,
    pub BufCapacity: ::std::os::raw::c_int,
    pub Scroll: ImVec2,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub WantReloadUserBuf: bool,
    pub ReloadSelectionStart: ::std::os::raw::c_int,
    pub ReloadSelectionEnd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputTextState"][::std::mem::size_of::<ImGuiInputTextState>() - 120usize];
    ["Alignment of ImGuiInputTextState"][::std::mem::align_of::<ImGuiInputTextState>() - 8usize];
    ["Offset of field: ImGuiInputTextState::Ctx"]
        [::std::mem::offset_of!(ImGuiInputTextState, Ctx) - 0usize];
    ["Offset of field: ImGuiInputTextState::Stb"]
        [::std::mem::offset_of!(ImGuiInputTextState, Stb) - 8usize];
    ["Offset of field: ImGuiInputTextState::Flags"]
        [::std::mem::offset_of!(ImGuiInputTextState, Flags) - 16usize];
    ["Offset of field: ImGuiInputTextState::ID"]
        [::std::mem::offset_of!(ImGuiInputTextState, ID) - 20usize];
    ["Offset of field: ImGuiInputTextState::TextLen"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextLen) - 24usize];
    ["Offset of field: ImGuiInputTextState::TextSrc"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextSrc) - 32usize];
    ["Offset of field: ImGuiInputTextState::TextA"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextA) - 40usize];
    ["Offset of field: ImGuiInputTextState::TextToRevertTo"]
        [::std::mem::offset_of!(ImGuiInputTextState, TextToRevertTo) - 56usize];
    ["Offset of field: ImGuiInputTextState::CallbackTextBackup"]
        [::std::mem::offset_of!(ImGuiInputTextState, CallbackTextBackup) - 72usize];
    ["Offset of field: ImGuiInputTextState::BufCapacity"]
        [::std::mem::offset_of!(ImGuiInputTextState, BufCapacity) - 88usize];
    ["Offset of field: ImGuiInputTextState::Scroll"]
        [::std::mem::offset_of!(ImGuiInputTextState, Scroll) - 92usize];
    ["Offset of field: ImGuiInputTextState::CursorAnim"]
        [::std::mem::offset_of!(ImGuiInputTextState, CursorAnim) - 100usize];
    ["Offset of field: ImGuiInputTextState::CursorFollow"]
        [::std::mem::offset_of!(ImGuiInputTextState, CursorFollow) - 104usize];
    ["Offset of field: ImGuiInputTextState::SelectedAllMouseLock"]
        [::std::mem::offset_of!(ImGuiInputTextState, SelectedAllMouseLock) - 105usize];
    ["Offset of field: ImGuiInputTextState::Edited"]
        [::std::mem::offset_of!(ImGuiInputTextState, Edited) - 106usize];
    ["Offset of field: ImGuiInputTextState::WantReloadUserBuf"]
        [::std::mem::offset_of!(ImGuiInputTextState, WantReloadUserBuf) - 107usize];
    ["Offset of field: ImGuiInputTextState::ReloadSelectionStart"]
        [::std::mem::offset_of!(ImGuiInputTextState, ReloadSelectionStart) - 108usize];
    ["Offset of field: ImGuiInputTextState::ReloadSelectionEnd"]
        [::std::mem::offset_of!(ImGuiInputTextState, ReloadSelectionEnd) - 112usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState12OnKeyPressedEi"]
    pub fn ImGuiInputTextState_OnKeyPressed(
        this: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState13OnCharPressedEj"]
    pub fn ImGuiInputTextState_OnCharPressed(
        this: *mut ImGuiInputTextState,
        c: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState15CursorAnimResetEv"]
    pub fn ImGuiInputTextState_CursorAnimReset(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState11CursorClampEv"]
    pub fn ImGuiInputTextState_CursorClamp(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19ImGuiInputTextState12HasSelectionEv"]
    pub fn ImGuiInputTextState_HasSelection(this: *const ImGuiInputTextState) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState14ClearSelectionEv"]
    pub fn ImGuiInputTextState_ClearSelection(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZNK19ImGuiInputTextState12GetCursorPosEv"]
    pub fn ImGuiInputTextState_GetCursorPos(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19ImGuiInputTextState17GetSelectionStartEv"]
    pub fn ImGuiInputTextState_GetSelectionStart(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK19ImGuiInputTextState15GetSelectionEndEv"]
    pub fn ImGuiInputTextState_GetSelectionEnd(
        this: *const ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState9SelectAllEv"]
    pub fn ImGuiInputTextState_SelectAll(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState25ReloadUserBufAndSelectAllEv"]
    pub fn ImGuiInputTextState_ReloadUserBufAndSelectAll(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState29ReloadUserBufAndKeepSelectionEv"]
    pub fn ImGuiInputTextState_ReloadUserBufAndKeepSelection(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextState25ReloadUserBufAndMoveToEndEv"]
    pub fn ImGuiInputTextState_ReloadUserBufAndMoveToEnd(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextStateC1Ev"]
    pub fn ImGuiInputTextState_ImGuiInputTextState(this: *mut ImGuiInputTextState);
}
extern "C" {
    #[link_name = "\u{1}_ZN19ImGuiInputTextStateD1Ev"]
    pub fn ImGuiInputTextState_ImGuiInputTextState_destructor(this: *mut ImGuiInputTextState);
}
impl ImGuiInputTextState {
    #[inline]
    pub unsafe fn OnKeyPressed(&mut self, key: ::std::os::raw::c_int) {
        ImGuiInputTextState_OnKeyPressed(self, key)
    }
    #[inline]
    pub unsafe fn OnCharPressed(&mut self, c: ::std::os::raw::c_uint) {
        ImGuiInputTextState_OnCharPressed(self, c)
    }
    #[inline]
    pub unsafe fn CursorAnimReset(&mut self) {
        ImGuiInputTextState_CursorAnimReset(self)
    }
    #[inline]
    pub unsafe fn CursorClamp(&mut self) {
        ImGuiInputTextState_CursorClamp(self)
    }
    #[inline]
    pub unsafe fn HasSelection(&self) -> bool {
        ImGuiInputTextState_HasSelection(self)
    }
    #[inline]
    pub unsafe fn ClearSelection(&mut self) {
        ImGuiInputTextState_ClearSelection(self)
    }
    #[inline]
    pub unsafe fn GetCursorPos(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetCursorPos(self)
    }
    #[inline]
    pub unsafe fn GetSelectionStart(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetSelectionStart(self)
    }
    #[inline]
    pub unsafe fn GetSelectionEnd(&self) -> ::std::os::raw::c_int {
        ImGuiInputTextState_GetSelectionEnd(self)
    }
    #[inline]
    pub unsafe fn SelectAll(&mut self) {
        ImGuiInputTextState_SelectAll(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndSelectAll(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndSelectAll(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndKeepSelection(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndKeepSelection(self)
    }
    #[inline]
    pub unsafe fn ReloadUserBufAndMoveToEnd(&mut self) {
        ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiInputTextState_ImGuiInputTextState(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiInputTextState_ImGuiInputTextState_destructor(self)
    }
}
pub const ImGuiWindowRefreshFlags__ImGuiWindowRefreshFlags_None: ImGuiWindowRefreshFlags_ = 0;
pub const ImGuiWindowRefreshFlags__ImGuiWindowRefreshFlags_TryToAvoidRefresh:
    ImGuiWindowRefreshFlags_ = 1;
pub const ImGuiWindowRefreshFlags__ImGuiWindowRefreshFlags_RefreshOnHover:
    ImGuiWindowRefreshFlags_ = 2;
pub const ImGuiWindowRefreshFlags__ImGuiWindowRefreshFlags_RefreshOnFocus:
    ImGuiWindowRefreshFlags_ = 4;
pub type ImGuiWindowRefreshFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasContentSize:
    ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasCollapsed:
    ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSizeConstraint:
    ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ =
    32;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ =
    64;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ =
    128;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasWindowFlags:
    ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasChildFlags:
    ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasRefreshPolicy:
    ImGuiNextWindowDataFlags_ = 1024;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasViewport:
    ImGuiNextWindowDataFlags_ = 2048;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ =
    4096;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasWindowClass:
    ImGuiNextWindowDataFlags_ = 8192;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub HasFlags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub WindowFlags: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
    pub RefreshFlagsVal: ImGuiWindowRefreshFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNextWindowData"][::std::mem::size_of::<ImGuiNextWindowData>() - 160usize];
    ["Alignment of ImGuiNextWindowData"][::std::mem::align_of::<ImGuiNextWindowData>() - 8usize];
    ["Offset of field: ImGuiNextWindowData::HasFlags"]
        [::std::mem::offset_of!(ImGuiNextWindowData, HasFlags) - 0usize];
    ["Offset of field: ImGuiNextWindowData::PosCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosCond) - 4usize];
    ["Offset of field: ImGuiNextWindowData::SizeCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCond) - 8usize];
    ["Offset of field: ImGuiNextWindowData::CollapsedCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, CollapsedCond) - 12usize];
    ["Offset of field: ImGuiNextWindowData::DockCond"]
        [::std::mem::offset_of!(ImGuiNextWindowData, DockCond) - 16usize];
    ["Offset of field: ImGuiNextWindowData::PosVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosVal) - 20usize];
    ["Offset of field: ImGuiNextWindowData::PosPivotVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosPivotVal) - 28usize];
    ["Offset of field: ImGuiNextWindowData::SizeVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeVal) - 36usize];
    ["Offset of field: ImGuiNextWindowData::ContentSizeVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ContentSizeVal) - 44usize];
    ["Offset of field: ImGuiNextWindowData::ScrollVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ScrollVal) - 52usize];
    ["Offset of field: ImGuiNextWindowData::WindowFlags"]
        [::std::mem::offset_of!(ImGuiNextWindowData, WindowFlags) - 60usize];
    ["Offset of field: ImGuiNextWindowData::ChildFlags"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ChildFlags) - 64usize];
    ["Offset of field: ImGuiNextWindowData::PosUndock"]
        [::std::mem::offset_of!(ImGuiNextWindowData, PosUndock) - 68usize];
    ["Offset of field: ImGuiNextWindowData::CollapsedVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, CollapsedVal) - 69usize];
    ["Offset of field: ImGuiNextWindowData::SizeConstraintRect"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeConstraintRect) - 72usize];
    ["Offset of field: ImGuiNextWindowData::SizeCallback"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCallback) - 88usize];
    ["Offset of field: ImGuiNextWindowData::SizeCallbackUserData"]
        [::std::mem::offset_of!(ImGuiNextWindowData, SizeCallbackUserData) - 96usize];
    ["Offset of field: ImGuiNextWindowData::BgAlphaVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, BgAlphaVal) - 104usize];
    ["Offset of field: ImGuiNextWindowData::ViewportId"]
        [::std::mem::offset_of!(ImGuiNextWindowData, ViewportId) - 108usize];
    ["Offset of field: ImGuiNextWindowData::DockId"]
        [::std::mem::offset_of!(ImGuiNextWindowData, DockId) - 112usize];
    ["Offset of field: ImGuiNextWindowData::WindowClass"]
        [::std::mem::offset_of!(ImGuiNextWindowData, WindowClass) - 116usize];
    ["Offset of field: ImGuiNextWindowData::MenuBarOffsetMinVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, MenuBarOffsetMinVal) - 148usize];
    ["Offset of field: ImGuiNextWindowData::RefreshFlagsVal"]
        [::std::mem::offset_of!(ImGuiNextWindowData, RefreshFlagsVal) - 156usize];
};
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasShortcut: ImGuiNextItemDataFlags_ = 4;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasRefVal: ImGuiNextItemDataFlags_ = 8;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasStorageID: ImGuiNextItemDataFlags_ = 16;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub HasFlags: ImGuiNextItemDataFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub FocusScopeId: ImGuiID,
    pub SelectionUserData: ImGuiSelectionUserData,
    pub Width: f32,
    pub Shortcut: ImGuiKeyChord,
    pub ShortcutFlags: ImGuiInputFlags,
    pub OpenVal: bool,
    pub OpenCond: ImU8,
    pub RefVal: ImGuiDataTypeStorage,
    pub StorageId: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNextItemData"][::std::mem::size_of::<ImGuiNextItemData>() - 56usize];
    ["Alignment of ImGuiNextItemData"][::std::mem::align_of::<ImGuiNextItemData>() - 8usize];
    ["Offset of field: ImGuiNextItemData::HasFlags"]
        [::std::mem::offset_of!(ImGuiNextItemData, HasFlags) - 0usize];
    ["Offset of field: ImGuiNextItemData::ItemFlags"]
        [::std::mem::offset_of!(ImGuiNextItemData, ItemFlags) - 4usize];
    ["Offset of field: ImGuiNextItemData::FocusScopeId"]
        [::std::mem::offset_of!(ImGuiNextItemData, FocusScopeId) - 8usize];
    ["Offset of field: ImGuiNextItemData::SelectionUserData"]
        [::std::mem::offset_of!(ImGuiNextItemData, SelectionUserData) - 16usize];
    ["Offset of field: ImGuiNextItemData::Width"]
        [::std::mem::offset_of!(ImGuiNextItemData, Width) - 24usize];
    ["Offset of field: ImGuiNextItemData::Shortcut"]
        [::std::mem::offset_of!(ImGuiNextItemData, Shortcut) - 28usize];
    ["Offset of field: ImGuiNextItemData::ShortcutFlags"]
        [::std::mem::offset_of!(ImGuiNextItemData, ShortcutFlags) - 32usize];
    ["Offset of field: ImGuiNextItemData::OpenVal"]
        [::std::mem::offset_of!(ImGuiNextItemData, OpenVal) - 36usize];
    ["Offset of field: ImGuiNextItemData::OpenCond"]
        [::std::mem::offset_of!(ImGuiNextItemData, OpenCond) - 37usize];
    ["Offset of field: ImGuiNextItemData::RefVal"]
        [::std::mem::offset_of!(ImGuiNextItemData, RefVal) - 38usize];
    ["Offset of field: ImGuiNextItemData::StorageId"]
        [::std::mem::offset_of!(ImGuiNextItemData, StorageId) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub ItemFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
    pub ClipRect: ImRect,
    pub Shortcut: ImGuiKeyChord,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiLastItemData"][::std::mem::size_of::<ImGuiLastItemData>() - 80usize];
    ["Alignment of ImGuiLastItemData"][::std::mem::align_of::<ImGuiLastItemData>() - 4usize];
    ["Offset of field: ImGuiLastItemData::ID"]
        [::std::mem::offset_of!(ImGuiLastItemData, ID) - 0usize];
    ["Offset of field: ImGuiLastItemData::ItemFlags"]
        [::std::mem::offset_of!(ImGuiLastItemData, ItemFlags) - 4usize];
    ["Offset of field: ImGuiLastItemData::StatusFlags"]
        [::std::mem::offset_of!(ImGuiLastItemData, StatusFlags) - 8usize];
    ["Offset of field: ImGuiLastItemData::Rect"]
        [::std::mem::offset_of!(ImGuiLastItemData, Rect) - 12usize];
    ["Offset of field: ImGuiLastItemData::NavRect"]
        [::std::mem::offset_of!(ImGuiLastItemData, NavRect) - 28usize];
    ["Offset of field: ImGuiLastItemData::DisplayRect"]
        [::std::mem::offset_of!(ImGuiLastItemData, DisplayRect) - 44usize];
    ["Offset of field: ImGuiLastItemData::ClipRect"]
        [::std::mem::offset_of!(ImGuiLastItemData, ClipRect) - 60usize];
    ["Offset of field: ImGuiLastItemData::Shortcut"]
        [::std::mem::offset_of!(ImGuiLastItemData, Shortcut) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTreeNodeStackData {
    pub ID: ImGuiID,
    pub TreeFlags: ImGuiTreeNodeFlags,
    pub ItemFlags: ImGuiItemFlags,
    pub NavRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTreeNodeStackData"][::std::mem::size_of::<ImGuiTreeNodeStackData>() - 28usize];
    ["Alignment of ImGuiTreeNodeStackData"]
        [::std::mem::align_of::<ImGuiTreeNodeStackData>() - 4usize];
    ["Offset of field: ImGuiTreeNodeStackData::ID"]
        [::std::mem::offset_of!(ImGuiTreeNodeStackData, ID) - 0usize];
    ["Offset of field: ImGuiTreeNodeStackData::TreeFlags"]
        [::std::mem::offset_of!(ImGuiTreeNodeStackData, TreeFlags) - 4usize];
    ["Offset of field: ImGuiTreeNodeStackData::ItemFlags"]
        [::std::mem::offset_of!(ImGuiTreeNodeStackData, ItemFlags) - 8usize];
    ["Offset of field: ImGuiTreeNodeStackData::NavRect"]
        [::std::mem::offset_of!(ImGuiTreeNodeStackData, NavRect) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiErrorRecoveryState {
    pub SizeOfWindowStack: ::std::os::raw::c_short,
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfTreeStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiErrorRecoveryState"][::std::mem::size_of::<ImGuiErrorRecoveryState>() - 22usize];
    ["Alignment of ImGuiErrorRecoveryState"]
        [::std::mem::align_of::<ImGuiErrorRecoveryState>() - 2usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfWindowStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfWindowStack) - 0usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfIDStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfIDStack) - 2usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfTreeStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfTreeStack) - 4usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfColorStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfColorStack) - 6usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfStyleVarStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfStyleVarStack) - 8usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfFontStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfFontStack) - 10usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfFocusScopeStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfFocusScopeStack) - 12usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfGroupStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfGroupStack) - 14usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfItemFlagsStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfItemFlagsStack) - 16usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfBeginPopupStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfBeginPopupStack) - 18usize];
    ["Offset of field: ImGuiErrorRecoveryState::SizeOfDisabledStack"]
        [::std::mem::offset_of!(ImGuiErrorRecoveryState, SizeOfDisabledStack) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesInBegin: ImGuiErrorRecoveryState,
    pub DisabledOverrideReenable: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowStackData"][::std::mem::size_of::<ImGuiWindowStackData>() - 112usize];
    ["Alignment of ImGuiWindowStackData"][::std::mem::align_of::<ImGuiWindowStackData>() - 8usize];
    ["Offset of field: ImGuiWindowStackData::Window"]
        [::std::mem::offset_of!(ImGuiWindowStackData, Window) - 0usize];
    ["Offset of field: ImGuiWindowStackData::ParentLastItemDataBackup"]
        [::std::mem::offset_of!(ImGuiWindowStackData, ParentLastItemDataBackup) - 8usize];
    ["Offset of field: ImGuiWindowStackData::StackSizesInBegin"]
        [::std::mem::offset_of!(ImGuiWindowStackData, StackSizesInBegin) - 88usize];
    ["Offset of field: ImGuiWindowStackData::DisabledOverrideReenable"]
        [::std::mem::offset_of!(ImGuiWindowStackData, DisabledOverrideReenable) - 110usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiShrinkWidthItem"][::std::mem::size_of::<ImGuiShrinkWidthItem>() - 12usize];
    ["Alignment of ImGuiShrinkWidthItem"][::std::mem::align_of::<ImGuiShrinkWidthItem>() - 4usize];
    ["Offset of field: ImGuiShrinkWidthItem::Index"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, Index) - 0usize];
    ["Offset of field: ImGuiShrinkWidthItem::Width"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, Width) - 4usize];
    ["Offset of field: ImGuiShrinkWidthItem::InitialWidth"]
        [::std::mem::offset_of!(ImGuiShrinkWidthItem, InitialWidth) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPtrOrIndex"][::std::mem::size_of::<ImGuiPtrOrIndex>() - 16usize];
    ["Alignment of ImGuiPtrOrIndex"][::std::mem::align_of::<ImGuiPtrOrIndex>() - 8usize];
    ["Offset of field: ImGuiPtrOrIndex::Ptr"]
        [::std::mem::offset_of!(ImGuiPtrOrIndex, Ptr) - 0usize];
    ["Offset of field: ImGuiPtrOrIndex::Index"]
        [::std::mem::offset_of!(ImGuiPtrOrIndex, Index) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDeactivatedItemData {
    pub ID: ImGuiID,
    pub ElapseFrame: ::std::os::raw::c_int,
    pub HasBeenEditedBefore: bool,
    pub IsAlive: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDeactivatedItemData"]
        [::std::mem::size_of::<ImGuiDeactivatedItemData>() - 12usize];
    ["Alignment of ImGuiDeactivatedItemData"]
        [::std::mem::align_of::<ImGuiDeactivatedItemData>() - 4usize];
    ["Offset of field: ImGuiDeactivatedItemData::ID"]
        [::std::mem::offset_of!(ImGuiDeactivatedItemData, ID) - 0usize];
    ["Offset of field: ImGuiDeactivatedItemData::ElapseFrame"]
        [::std::mem::offset_of!(ImGuiDeactivatedItemData, ElapseFrame) - 4usize];
    ["Offset of field: ImGuiDeactivatedItemData::HasBeenEditedBefore"]
        [::std::mem::offset_of!(ImGuiDeactivatedItemData, HasBeenEditedBefore) - 8usize];
    ["Offset of field: ImGuiDeactivatedItemData::IsAlive"]
        [::std::mem::offset_of!(ImGuiDeactivatedItemData, IsAlive) - 9usize];
};
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub RestoreNavWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiPopupData"][::std::mem::size_of::<ImGuiPopupData>() - 56usize];
    ["Alignment of ImGuiPopupData"][::std::mem::align_of::<ImGuiPopupData>() - 8usize];
    ["Offset of field: ImGuiPopupData::PopupId"]
        [::std::mem::offset_of!(ImGuiPopupData, PopupId) - 0usize];
    ["Offset of field: ImGuiPopupData::Window"]
        [::std::mem::offset_of!(ImGuiPopupData, Window) - 8usize];
    ["Offset of field: ImGuiPopupData::RestoreNavWindow"]
        [::std::mem::offset_of!(ImGuiPopupData, RestoreNavWindow) - 16usize];
    ["Offset of field: ImGuiPopupData::ParentNavLayer"]
        [::std::mem::offset_of!(ImGuiPopupData, ParentNavLayer) - 24usize];
    ["Offset of field: ImGuiPopupData::OpenFrameCount"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenFrameCount) - 28usize];
    ["Offset of field: ImGuiPopupData::OpenParentId"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenParentId) - 32usize];
    ["Offset of field: ImGuiPopupData::OpenPopupPos"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenPopupPos) - 36usize];
    ["Offset of field: ImGuiPopupData::OpenMousePos"]
        [::std::mem::offset_of!(ImGuiPopupData, OpenMousePos) - 44usize];
};
pub type ImBitArrayForNamedKeys = __BindgenOpaqueArray<u32, 5usize>;
pub const ImGuiInputEventType_ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_uint;
pub const ImGuiInputSource_ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_ImGuiInputSource_COUNT: ImGuiInputSource = 4;
pub type ImGuiInputSource = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMousePos"][::std::mem::size_of::<ImGuiInputEventMousePos>() - 12usize];
    ["Alignment of ImGuiInputEventMousePos"]
        [::std::mem::align_of::<ImGuiInputEventMousePos>() - 4usize];
    ["Offset of field: ImGuiInputEventMousePos::PosX"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, PosX) - 0usize];
    ["Offset of field: ImGuiInputEventMousePos::PosY"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, PosY) - 4usize];
    ["Offset of field: ImGuiInputEventMousePos::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMousePos, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseWheel"]
        [::std::mem::size_of::<ImGuiInputEventMouseWheel>() - 12usize];
    ["Alignment of ImGuiInputEventMouseWheel"]
        [::std::mem::align_of::<ImGuiInputEventMouseWheel>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseWheel::WheelX"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, WheelX) - 0usize];
    ["Offset of field: ImGuiInputEventMouseWheel::WheelY"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, WheelY) - 4usize];
    ["Offset of field: ImGuiInputEventMouseWheel::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMouseWheel, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
    pub MouseSource: ImGuiMouseSource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseButton"]
        [::std::mem::size_of::<ImGuiInputEventMouseButton>() - 12usize];
    ["Alignment of ImGuiInputEventMouseButton"]
        [::std::mem::align_of::<ImGuiInputEventMouseButton>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseButton::Button"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, Button) - 0usize];
    ["Offset of field: ImGuiInputEventMouseButton::Down"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, Down) - 4usize];
    ["Offset of field: ImGuiInputEventMouseButton::MouseSource"]
        [::std::mem::offset_of!(ImGuiInputEventMouseButton, MouseSource) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventMouseViewport"]
        [::std::mem::size_of::<ImGuiInputEventMouseViewport>() - 4usize];
    ["Alignment of ImGuiInputEventMouseViewport"]
        [::std::mem::align_of::<ImGuiInputEventMouseViewport>() - 4usize];
    ["Offset of field: ImGuiInputEventMouseViewport::HoveredViewportID"]
        [::std::mem::offset_of!(ImGuiInputEventMouseViewport, HoveredViewportID) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventKey"][::std::mem::size_of::<ImGuiInputEventKey>() - 12usize];
    ["Alignment of ImGuiInputEventKey"][::std::mem::align_of::<ImGuiInputEventKey>() - 4usize];
    ["Offset of field: ImGuiInputEventKey::Key"]
        [::std::mem::offset_of!(ImGuiInputEventKey, Key) - 0usize];
    ["Offset of field: ImGuiInputEventKey::Down"]
        [::std::mem::offset_of!(ImGuiInputEventKey, Down) - 4usize];
    ["Offset of field: ImGuiInputEventKey::AnalogValue"]
        [::std::mem::offset_of!(ImGuiInputEventKey, AnalogValue) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventText"][::std::mem::size_of::<ImGuiInputEventText>() - 4usize];
    ["Alignment of ImGuiInputEventText"][::std::mem::align_of::<ImGuiInputEventText>() - 4usize];
    ["Offset of field: ImGuiInputEventText::Char"]
        [::std::mem::offset_of!(ImGuiInputEventText, Char) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEventAppFocused"]
        [::std::mem::size_of::<ImGuiInputEventAppFocused>() - 1usize];
    ["Alignment of ImGuiInputEventAppFocused"]
        [::std::mem::align_of::<ImGuiInputEventAppFocused>() - 1usize];
    ["Offset of field: ImGuiInputEventAppFocused::Focused"]
        [::std::mem::offset_of!(ImGuiInputEventAppFocused, Focused) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub EventId: ImU32,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEvent__bindgen_ty_1"]
        [::std::mem::size_of::<ImGuiInputEvent__bindgen_ty_1>() - 12usize];
    ["Alignment of ImGuiInputEvent__bindgen_ty_1"]
        [::std::mem::align_of::<ImGuiInputEvent__bindgen_ty_1>() - 4usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MousePos"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MousePos) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseWheel"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseWheel) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseButton"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseButton) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::MouseViewport"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, MouseViewport) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::Key"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, Key) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::Text"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, Text) - 0usize];
    ["Offset of field: ImGuiInputEvent__bindgen_ty_1::AppFocused"]
        [::std::mem::offset_of!(ImGuiInputEvent__bindgen_ty_1, AppFocused) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiInputEvent"][::std::mem::size_of::<ImGuiInputEvent>() - 28usize];
    ["Alignment of ImGuiInputEvent"][::std::mem::align_of::<ImGuiInputEvent>() - 4usize];
    ["Offset of field: ImGuiInputEvent::Type"]
        [::std::mem::offset_of!(ImGuiInputEvent, Type) - 0usize];
    ["Offset of field: ImGuiInputEvent::Source"]
        [::std::mem::offset_of!(ImGuiInputEvent, Source) - 4usize];
    ["Offset of field: ImGuiInputEvent::EventId"]
        [::std::mem::offset_of!(ImGuiInputEvent, EventId) - 8usize];
    ["Offset of field: ImGuiInputEvent::AddedByTestEngine"]
        [::std::mem::offset_of!(ImGuiInputEvent, AddedByTestEngine) - 24usize];
};
pub type ImGuiKeyRoutingIndex = ImS16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyRoutingData {
    pub NextEntryIndex: ImGuiKeyRoutingIndex,
    pub Mods: ImU16,
    pub RoutingCurrScore: ImU8,
    pub RoutingNextScore: ImU8,
    pub RoutingCurr: ImGuiID,
    pub RoutingNext: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyRoutingData"][::std::mem::size_of::<ImGuiKeyRoutingData>() - 16usize];
    ["Alignment of ImGuiKeyRoutingData"][::std::mem::align_of::<ImGuiKeyRoutingData>() - 4usize];
    ["Offset of field: ImGuiKeyRoutingData::NextEntryIndex"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, NextEntryIndex) - 0usize];
    ["Offset of field: ImGuiKeyRoutingData::Mods"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, Mods) - 2usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingCurrScore"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingCurrScore) - 4usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingNextScore"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingNextScore) - 5usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingCurr"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingCurr) - 8usize];
    ["Offset of field: ImGuiKeyRoutingData::RoutingNext"]
        [::std::mem::offset_of!(ImGuiKeyRoutingData, RoutingNext) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiKeyRoutingTable {
    pub Index: [ImGuiKeyRoutingIndex; 154usize],
    pub Entries: ImVector<ImGuiKeyRoutingData>,
    pub EntriesNext: ImVector<ImGuiKeyRoutingData>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyRoutingTable"][::std::mem::size_of::<ImGuiKeyRoutingTable>() - 344usize];
    ["Alignment of ImGuiKeyRoutingTable"][::std::mem::align_of::<ImGuiKeyRoutingTable>() - 8usize];
    ["Offset of field: ImGuiKeyRoutingTable::Index"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, Index) - 0usize];
    ["Offset of field: ImGuiKeyRoutingTable::Entries"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, Entries) - 312usize];
    ["Offset of field: ImGuiKeyRoutingTable::EntriesNext"]
        [::std::mem::offset_of!(ImGuiKeyRoutingTable, EntriesNext) - 328usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyOwnerData {
    pub OwnerCurr: ImGuiID,
    pub OwnerNext: ImGuiID,
    pub LockThisFrame: bool,
    pub LockUntilRelease: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiKeyOwnerData"][::std::mem::size_of::<ImGuiKeyOwnerData>() - 12usize];
    ["Alignment of ImGuiKeyOwnerData"][::std::mem::align_of::<ImGuiKeyOwnerData>() - 4usize];
    ["Offset of field: ImGuiKeyOwnerData::OwnerCurr"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, OwnerCurr) - 0usize];
    ["Offset of field: ImGuiKeyOwnerData::OwnerNext"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, OwnerNext) - 4usize];
    ["Offset of field: ImGuiKeyOwnerData::LockThisFrame"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, LockThisFrame) - 8usize];
    ["Offset of field: ImGuiKeyOwnerData::LockUntilRelease"]
        [::std::mem::offset_of!(ImGuiKeyOwnerData, LockUntilRelease) - 9usize];
};
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatRateDefault: ImGuiInputFlagsPrivate_ = 2;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatRateNavMove: ImGuiInputFlagsPrivate_ = 4;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatRateNavTweak: ImGuiInputFlagsPrivate_ = 8;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatUntilRelease: ImGuiInputFlagsPrivate_ = 16;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatUntilKeyModsChange:
    ImGuiInputFlagsPrivate_ = 32;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone:
    ImGuiInputFlagsPrivate_ = 64;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatUntilOtherKeyPress:
    ImGuiInputFlagsPrivate_ = 128;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_LockThisFrame: ImGuiInputFlagsPrivate_ = 1048576;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_LockUntilRelease: ImGuiInputFlagsPrivate_ =
    2097152;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_CondHovered: ImGuiInputFlagsPrivate_ = 4194304;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_CondActive: ImGuiInputFlagsPrivate_ = 8388608;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_CondDefault_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatRateMask_: ImGuiInputFlagsPrivate_ = 14;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatUntilMask_: ImGuiInputFlagsPrivate_ = 240;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RepeatMask_: ImGuiInputFlagsPrivate_ = 255;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_CondMask_: ImGuiInputFlagsPrivate_ = 12582912;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RouteTypeMask_: ImGuiInputFlagsPrivate_ = 15360;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_RouteOptionsMask_: ImGuiInputFlagsPrivate_ =
    245760;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedByIsKeyPressed: ImGuiInputFlagsPrivate_ =
    255;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedByIsMouseClicked:
    ImGuiInputFlagsPrivate_ = 1;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedByShortcut: ImGuiInputFlagsPrivate_ =
    261375;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedBySetNextItemShortcut:
    ImGuiInputFlagsPrivate_ = 523519;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedBySetKeyOwner: ImGuiInputFlagsPrivate_ =
    3145728;
pub const ImGuiInputFlagsPrivate__ImGuiInputFlags_SupportedBySetItemKeyOwner:
    ImGuiInputFlagsPrivate_ = 15728640;
pub type ImGuiInputFlagsPrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipperRange"][::std::mem::size_of::<ImGuiListClipperRange>() - 12usize];
    ["Alignment of ImGuiListClipperRange"]
        [::std::mem::align_of::<ImGuiListClipperRange>() - 4usize];
    ["Offset of field: ImGuiListClipperRange::Min"]
        [::std::mem::offset_of!(ImGuiListClipperRange, Min) - 0usize];
    ["Offset of field: ImGuiListClipperRange::Max"]
        [::std::mem::offset_of!(ImGuiListClipperRange, Max) - 4usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexConvert"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexConvert) - 8usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexOffsetMin"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexOffsetMin) - 9usize];
    ["Offset of field: ImGuiListClipperRange::PosToIndexOffsetMax"]
        [::std::mem::offset_of!(ImGuiListClipperRange, PosToIndexOffsetMax) - 10usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector<ImGuiListClipperRange>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiListClipperData"][::std::mem::size_of::<ImGuiListClipperData>() - 40usize];
    ["Alignment of ImGuiListClipperData"][::std::mem::align_of::<ImGuiListClipperData>() - 8usize];
    ["Offset of field: ImGuiListClipperData::ListClipper"]
        [::std::mem::offset_of!(ImGuiListClipperData, ListClipper) - 0usize];
    ["Offset of field: ImGuiListClipperData::LossynessOffset"]
        [::std::mem::offset_of!(ImGuiListClipperData, LossynessOffset) - 8usize];
    ["Offset of field: ImGuiListClipperData::StepNo"]
        [::std::mem::offset_of!(ImGuiListClipperData, StepNo) - 12usize];
    ["Offset of field: ImGuiListClipperData::ItemsFrozen"]
        [::std::mem::offset_of!(ImGuiListClipperData, ItemsFrozen) - 16usize];
    ["Offset of field: ImGuiListClipperData::Ranges"]
        [::std::mem::offset_of!(ImGuiListClipperData, Ranges) - 24usize];
};
pub const ImGuiActivateFlags__ImGuiActivateFlags_None: ImGuiActivateFlags_ = 0;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferInput: ImGuiActivateFlags_ = 1;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferTweak: ImGuiActivateFlags_ = 2;
pub const ImGuiActivateFlags__ImGuiActivateFlags_TryToPreserveState: ImGuiActivateFlags_ = 4;
pub const ImGuiActivateFlags__ImGuiActivateFlags_FromTabbing: ImGuiActivateFlags_ = 8;
pub const ImGuiActivateFlags__ImGuiActivateFlags_FromShortcut: ImGuiActivateFlags_ = 16;
pub type ImGuiActivateFlags_ = ::std::os::raw::c_uint;
pub const ImGuiScrollFlags__ImGuiScrollFlags_None: ImGuiScrollFlags_ = 0;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeX: ImGuiScrollFlags_ = 1;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeY: ImGuiScrollFlags_ = 2;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterX: ImGuiScrollFlags_ = 4;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterY: ImGuiScrollFlags_ = 8;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterX: ImGuiScrollFlags_ = 16;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterY: ImGuiScrollFlags_ = 32;
pub const ImGuiScrollFlags__ImGuiScrollFlags_NoScrollParent: ImGuiScrollFlags_ = 64;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskX_: ImGuiScrollFlags_ = 21;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskY_: ImGuiScrollFlags_ = 42;
pub type ImGuiScrollFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavRenderCursorFlags__ImGuiNavRenderCursorFlags_None: ImGuiNavRenderCursorFlags_ = 0;
pub const ImGuiNavRenderCursorFlags__ImGuiNavRenderCursorFlags_Compact: ImGuiNavRenderCursorFlags_ =
    2;
pub const ImGuiNavRenderCursorFlags__ImGuiNavRenderCursorFlags_AlwaysDraw:
    ImGuiNavRenderCursorFlags_ = 4;
pub const ImGuiNavRenderCursorFlags__ImGuiNavRenderCursorFlags_NoRounding:
    ImGuiNavRenderCursorFlags_ = 8;
pub const ImGuiNavRenderCursorFlags__ImGuiNavHighlightFlags_None: ImGuiNavRenderCursorFlags_ = 0;
pub const ImGuiNavRenderCursorFlags__ImGuiNavHighlightFlags_Compact: ImGuiNavRenderCursorFlags_ = 2;
pub const ImGuiNavRenderCursorFlags__ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavRenderCursorFlags_ =
    4;
pub const ImGuiNavRenderCursorFlags__ImGuiNavHighlightFlags_NoRounding: ImGuiNavRenderCursorFlags_ =
    8;
pub type ImGuiNavRenderCursorFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapMask_: ImGuiNavMoveFlags_ = 15;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_ScrollToEdgeY: ImGuiNavMoveFlags_ = 64;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Forwarded: ImGuiNavMoveFlags_ = 128;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_DebugNoResult: ImGuiNavMoveFlags_ = 256;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_FocusApi: ImGuiNavMoveFlags_ = 512;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_IsTabbing: ImGuiNavMoveFlags_ = 1024;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_IsPageMove: ImGuiNavMoveFlags_ = 2048;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Activate: ImGuiNavMoveFlags_ = 4096;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_NoSelect: ImGuiNavMoveFlags_ = 8192;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_NoSetNavCursorVisible: ImGuiNavMoveFlags_ = 16384;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_NoClearActiveId: ImGuiNavMoveFlags_ = 32768;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_uint;
pub const ImGuiNavLayer_ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub ItemFlags: ImGuiItemFlags,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub SelectionUserData: ImGuiSelectionUserData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiNavItemData"][::std::mem::size_of::<ImGuiNavItemData>() - 56usize];
    ["Alignment of ImGuiNavItemData"][::std::mem::align_of::<ImGuiNavItemData>() - 8usize];
    ["Offset of field: ImGuiNavItemData::Window"]
        [::std::mem::offset_of!(ImGuiNavItemData, Window) - 0usize];
    ["Offset of field: ImGuiNavItemData::ID"]
        [::std::mem::offset_of!(ImGuiNavItemData, ID) - 8usize];
    ["Offset of field: ImGuiNavItemData::FocusScopeId"]
        [::std::mem::offset_of!(ImGuiNavItemData, FocusScopeId) - 12usize];
    ["Offset of field: ImGuiNavItemData::RectRel"]
        [::std::mem::offset_of!(ImGuiNavItemData, RectRel) - 16usize];
    ["Offset of field: ImGuiNavItemData::ItemFlags"]
        [::std::mem::offset_of!(ImGuiNavItemData, ItemFlags) - 32usize];
    ["Offset of field: ImGuiNavItemData::DistBox"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistBox) - 36usize];
    ["Offset of field: ImGuiNavItemData::DistCenter"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistCenter) - 40usize];
    ["Offset of field: ImGuiNavItemData::DistAxial"]
        [::std::mem::offset_of!(ImGuiNavItemData, DistAxial) - 44usize];
    ["Offset of field: ImGuiNavItemData::SelectionUserData"]
        [::std::mem::offset_of!(ImGuiNavItemData, SelectionUserData) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiFocusScopeData {
    pub ID: ImGuiID,
    pub WindowID: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiFocusScopeData"][::std::mem::size_of::<ImGuiFocusScopeData>() - 8usize];
    ["Alignment of ImGuiFocusScopeData"][::std::mem::align_of::<ImGuiFocusScopeData>() - 4usize];
    ["Offset of field: ImGuiFocusScopeData::ID"]
        [::std::mem::offset_of!(ImGuiFocusScopeData, ID) - 0usize];
    ["Offset of field: ImGuiFocusScopeData::WindowID"]
        [::std::mem::offset_of!(ImGuiFocusScopeData, WindowID) - 4usize];
};
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_None: ImGuiTypingSelectFlags_ = 0;
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_AllowBackspace: ImGuiTypingSelectFlags_ =
    1;
pub const ImGuiTypingSelectFlags__ImGuiTypingSelectFlags_AllowSingleCharMode:
    ImGuiTypingSelectFlags_ = 2;
pub type ImGuiTypingSelectFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectRequest {
    pub Flags: ImGuiTypingSelectFlags,
    pub SearchBufferLen: ::std::os::raw::c_int,
    pub SearchBuffer: *const ::std::os::raw::c_char,
    pub SelectRequest: bool,
    pub SingleCharMode: bool,
    pub SingleCharSize: ImS8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTypingSelectRequest"]
        [::std::mem::size_of::<ImGuiTypingSelectRequest>() - 24usize];
    ["Alignment of ImGuiTypingSelectRequest"]
        [::std::mem::align_of::<ImGuiTypingSelectRequest>() - 8usize];
    ["Offset of field: ImGuiTypingSelectRequest::Flags"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, Flags) - 0usize];
    ["Offset of field: ImGuiTypingSelectRequest::SearchBufferLen"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SearchBufferLen) - 4usize];
    ["Offset of field: ImGuiTypingSelectRequest::SearchBuffer"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SearchBuffer) - 8usize];
    ["Offset of field: ImGuiTypingSelectRequest::SelectRequest"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SelectRequest) - 16usize];
    ["Offset of field: ImGuiTypingSelectRequest::SingleCharMode"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SingleCharMode) - 17usize];
    ["Offset of field: ImGuiTypingSelectRequest::SingleCharSize"]
        [::std::mem::offset_of!(ImGuiTypingSelectRequest, SingleCharSize) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTypingSelectState {
    pub Request: ImGuiTypingSelectRequest,
    pub SearchBuffer: [::std::os::raw::c_char; 64usize],
    pub FocusScope: ImGuiID,
    pub LastRequestFrame: ::std::os::raw::c_int,
    pub LastRequestTime: f32,
    pub SingleCharModeLock: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTypingSelectState"][::std::mem::size_of::<ImGuiTypingSelectState>() - 104usize];
    ["Alignment of ImGuiTypingSelectState"]
        [::std::mem::align_of::<ImGuiTypingSelectState>() - 8usize];
    ["Offset of field: ImGuiTypingSelectState::Request"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, Request) - 0usize];
    ["Offset of field: ImGuiTypingSelectState::SearchBuffer"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, SearchBuffer) - 24usize];
    ["Offset of field: ImGuiTypingSelectState::FocusScope"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, FocusScope) - 88usize];
    ["Offset of field: ImGuiTypingSelectState::LastRequestFrame"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, LastRequestFrame) - 92usize];
    ["Offset of field: ImGuiTypingSelectState::LastRequestTime"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, LastRequestTime) - 96usize];
    ["Offset of field: ImGuiTypingSelectState::SingleCharModeLock"]
        [::std::mem::offset_of!(ImGuiTypingSelectState, SingleCharModeLock) - 100usize];
};
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ =
    16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOldColumnData"][::std::mem::size_of::<ImGuiOldColumnData>() - 28usize];
    ["Alignment of ImGuiOldColumnData"][::std::mem::align_of::<ImGuiOldColumnData>() - 4usize];
    ["Offset of field: ImGuiOldColumnData::OffsetNorm"]
        [::std::mem::offset_of!(ImGuiOldColumnData, OffsetNorm) - 0usize];
    ["Offset of field: ImGuiOldColumnData::OffsetNormBeforeResize"]
        [::std::mem::offset_of!(ImGuiOldColumnData, OffsetNormBeforeResize) - 4usize];
    ["Offset of field: ImGuiOldColumnData::Flags"]
        [::std::mem::offset_of!(ImGuiOldColumnData, Flags) - 8usize];
    ["Offset of field: ImGuiOldColumnData::ClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumnData, ClipRect) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector<ImGuiOldColumnData>,
    pub Splitter: ImDrawListSplitter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiOldColumns"][::std::mem::size_of::<ImGuiOldColumns>() - 136usize];
    ["Alignment of ImGuiOldColumns"][::std::mem::align_of::<ImGuiOldColumns>() - 8usize];
    ["Offset of field: ImGuiOldColumns::ID"][::std::mem::offset_of!(ImGuiOldColumns, ID) - 0usize];
    ["Offset of field: ImGuiOldColumns::Flags"]
        [::std::mem::offset_of!(ImGuiOldColumns, Flags) - 4usize];
    ["Offset of field: ImGuiOldColumns::IsFirstFrame"]
        [::std::mem::offset_of!(ImGuiOldColumns, IsFirstFrame) - 8usize];
    ["Offset of field: ImGuiOldColumns::IsBeingResized"]
        [::std::mem::offset_of!(ImGuiOldColumns, IsBeingResized) - 9usize];
    ["Offset of field: ImGuiOldColumns::Current"]
        [::std::mem::offset_of!(ImGuiOldColumns, Current) - 12usize];
    ["Offset of field: ImGuiOldColumns::Count"]
        [::std::mem::offset_of!(ImGuiOldColumns, Count) - 16usize];
    ["Offset of field: ImGuiOldColumns::OffMinX"]
        [::std::mem::offset_of!(ImGuiOldColumns, OffMinX) - 20usize];
    ["Offset of field: ImGuiOldColumns::OffMaxX"]
        [::std::mem::offset_of!(ImGuiOldColumns, OffMaxX) - 24usize];
    ["Offset of field: ImGuiOldColumns::LineMinY"]
        [::std::mem::offset_of!(ImGuiOldColumns, LineMinY) - 28usize];
    ["Offset of field: ImGuiOldColumns::LineMaxY"]
        [::std::mem::offset_of!(ImGuiOldColumns, LineMaxY) - 32usize];
    ["Offset of field: ImGuiOldColumns::HostCursorPosY"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostCursorPosY) - 36usize];
    ["Offset of field: ImGuiOldColumns::HostCursorMaxPosX"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostCursorMaxPosX) - 40usize];
    ["Offset of field: ImGuiOldColumns::HostInitialClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostInitialClipRect) - 44usize];
    ["Offset of field: ImGuiOldColumns::HostBackupClipRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostBackupClipRect) - 60usize];
    ["Offset of field: ImGuiOldColumns::HostBackupParentWorkRect"]
        [::std::mem::offset_of!(ImGuiOldColumns, HostBackupParentWorkRect) - 76usize];
    ["Offset of field: ImGuiOldColumns::Columns"]
        [::std::mem::offset_of!(ImGuiOldColumns, Columns) - 96usize];
    ["Offset of field: ImGuiOldColumns::Splitter"]
        [::std::mem::offset_of!(ImGuiOldColumns, Splitter) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiBoxSelectState {
    pub ID: ImGuiID,
    pub IsActive: bool,
    pub IsStarting: bool,
    pub IsStartedFromVoid: bool,
    pub IsStartedSetNavIdOnce: bool,
    pub RequestClear: bool,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub StartPosRel: ImVec2,
    pub EndPosRel: ImVec2,
    pub ScrollAccum: ImVec2,
    pub Window: *mut ImGuiWindow,
    pub UnclipMode: bool,
    pub UnclipRect: ImRect,
    pub BoxSelectRectPrev: ImRect,
    pub BoxSelectRectCurr: ImRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiBoxSelectState"][::std::mem::size_of::<ImGuiBoxSelectState>() - 104usize];
    ["Alignment of ImGuiBoxSelectState"][::std::mem::align_of::<ImGuiBoxSelectState>() - 8usize];
    ["Offset of field: ImGuiBoxSelectState::ID"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, ID) - 0usize];
    ["Offset of field: ImGuiBoxSelectState::IsActive"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, IsActive) - 4usize];
    ["Offset of field: ImGuiBoxSelectState::IsStarting"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, IsStarting) - 5usize];
    ["Offset of field: ImGuiBoxSelectState::IsStartedFromVoid"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, IsStartedFromVoid) - 6usize];
    ["Offset of field: ImGuiBoxSelectState::IsStartedSetNavIdOnce"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, IsStartedSetNavIdOnce) - 7usize];
    ["Offset of field: ImGuiBoxSelectState::RequestClear"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, RequestClear) - 8usize];
    ["Offset of field: ImGuiBoxSelectState::StartPosRel"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, StartPosRel) - 12usize];
    ["Offset of field: ImGuiBoxSelectState::EndPosRel"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, EndPosRel) - 20usize];
    ["Offset of field: ImGuiBoxSelectState::ScrollAccum"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, ScrollAccum) - 28usize];
    ["Offset of field: ImGuiBoxSelectState::Window"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, Window) - 40usize];
    ["Offset of field: ImGuiBoxSelectState::UnclipMode"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, UnclipMode) - 48usize];
    ["Offset of field: ImGuiBoxSelectState::UnclipRect"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, UnclipRect) - 52usize];
    ["Offset of field: ImGuiBoxSelectState::BoxSelectRectPrev"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, BoxSelectRectPrev) - 68usize];
    ["Offset of field: ImGuiBoxSelectState::BoxSelectRectCurr"]
        [::std::mem::offset_of!(ImGuiBoxSelectState, BoxSelectRectCurr) - 84usize];
};
impl ImGuiBoxSelectState {
    #[inline]
    pub fn KeyMods(&self) -> ImGuiKeyChord {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_KeyMods(&mut self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn KeyMods_raw(this: *const Self) -> ImGuiKeyChord {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_KeyMods_raw(this: *mut Self, val: ImGuiKeyChord) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(KeyMods: ImGuiKeyChord) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let KeyMods: u32 = unsafe { ::std::mem::transmute(KeyMods) };
            KeyMods as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiMultiSelectTempData {
    pub IO: ImGuiMultiSelectIO,
    pub Storage: *mut ImGuiMultiSelectState,
    pub FocusScopeId: ImGuiID,
    pub Flags: ImGuiMultiSelectFlags,
    pub ScopeRectMin: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub LastSubmittedItem: ImGuiSelectionUserData,
    pub BoxSelectId: ImGuiID,
    pub KeyMods: ImGuiKeyChord,
    pub LoopRequestSetAll: ImS8,
    pub IsEndIO: bool,
    pub IsFocused: bool,
    pub IsKeyboardSetRange: bool,
    pub NavIdPassedBy: bool,
    pub RangeSrcPassedBy: bool,
    pub RangeDstPassedBy: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMultiSelectTempData"]
        [::std::mem::size_of::<ImGuiMultiSelectTempData>() - 96usize];
    ["Alignment of ImGuiMultiSelectTempData"]
        [::std::mem::align_of::<ImGuiMultiSelectTempData>() - 8usize];
    ["Offset of field: ImGuiMultiSelectTempData::IO"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, IO) - 0usize];
    ["Offset of field: ImGuiMultiSelectTempData::Storage"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, Storage) - 40usize];
    ["Offset of field: ImGuiMultiSelectTempData::FocusScopeId"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, FocusScopeId) - 48usize];
    ["Offset of field: ImGuiMultiSelectTempData::Flags"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, Flags) - 52usize];
    ["Offset of field: ImGuiMultiSelectTempData::ScopeRectMin"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, ScopeRectMin) - 56usize];
    ["Offset of field: ImGuiMultiSelectTempData::BackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, BackupCursorMaxPos) - 64usize];
    ["Offset of field: ImGuiMultiSelectTempData::LastSubmittedItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, LastSubmittedItem) - 72usize];
    ["Offset of field: ImGuiMultiSelectTempData::BoxSelectId"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, BoxSelectId) - 80usize];
    ["Offset of field: ImGuiMultiSelectTempData::KeyMods"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, KeyMods) - 84usize];
    ["Offset of field: ImGuiMultiSelectTempData::LoopRequestSetAll"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, LoopRequestSetAll) - 88usize];
    ["Offset of field: ImGuiMultiSelectTempData::IsEndIO"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, IsEndIO) - 89usize];
    ["Offset of field: ImGuiMultiSelectTempData::IsFocused"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, IsFocused) - 90usize];
    ["Offset of field: ImGuiMultiSelectTempData::IsKeyboardSetRange"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, IsKeyboardSetRange) - 91usize];
    ["Offset of field: ImGuiMultiSelectTempData::NavIdPassedBy"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, NavIdPassedBy) - 92usize];
    ["Offset of field: ImGuiMultiSelectTempData::RangeSrcPassedBy"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, RangeSrcPassedBy) - 93usize];
    ["Offset of field: ImGuiMultiSelectTempData::RangeDstPassedBy"]
        [::std::mem::offset_of!(ImGuiMultiSelectTempData, RangeDstPassedBy) - 94usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMultiSelectState {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastSelectionSize: ::std::os::raw::c_int,
    pub RangeSelected: ImS8,
    pub NavIdSelected: ImS8,
    pub RangeSrcItem: ImGuiSelectionUserData,
    pub NavIdItem: ImGuiSelectionUserData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMultiSelectState"][::std::mem::size_of::<ImGuiMultiSelectState>() - 40usize];
    ["Alignment of ImGuiMultiSelectState"]
        [::std::mem::align_of::<ImGuiMultiSelectState>() - 8usize];
    ["Offset of field: ImGuiMultiSelectState::Window"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, Window) - 0usize];
    ["Offset of field: ImGuiMultiSelectState::ID"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, ID) - 8usize];
    ["Offset of field: ImGuiMultiSelectState::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, LastFrameActive) - 12usize];
    ["Offset of field: ImGuiMultiSelectState::LastSelectionSize"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, LastSelectionSize) - 16usize];
    ["Offset of field: ImGuiMultiSelectState::RangeSelected"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, RangeSelected) - 20usize];
    ["Offset of field: ImGuiMultiSelectState::NavIdSelected"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, NavIdSelected) - 21usize];
    ["Offset of field: ImGuiMultiSelectState::RangeSrcItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, RangeSrcItem) - 24usize];
    ["Offset of field: ImGuiMultiSelectState::NavIdItem"]
        [::std::mem::offset_of!(ImGuiMultiSelectState, NavIdItem) - 32usize];
};
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ =
    1024;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ =
    2048;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ =
    8192;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoWindowMenuButton:
    ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ =
    32768;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ =
    65536;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ =
    131072;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_DockedWindowsInFocusRoute:
    ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitOther:
    ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverMe:
    ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverOther:
    ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverEmpty:
    ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ =
    7864336;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SharedFlagsInheritMask_:
    ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 196640;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsTransferMask_:
    ImGuiDockNodeFlagsPrivate_ = 260208;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SavedFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 261152;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority__ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_uint;
pub const ImGuiDockNodeState_ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow:
    ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing:
    ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector<*mut ImGuiWindow>,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub RefViewportId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDockNode"][::std::mem::size_of::<ImGuiDockNode>() - 208usize];
    ["Alignment of ImGuiDockNode"][::std::mem::align_of::<ImGuiDockNode>() - 8usize];
    ["Offset of field: ImGuiDockNode::ID"][::std::mem::offset_of!(ImGuiDockNode, ID) - 0usize];
    ["Offset of field: ImGuiDockNode::SharedFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, SharedFlags) - 4usize];
    ["Offset of field: ImGuiDockNode::LocalFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, LocalFlags) - 8usize];
    ["Offset of field: ImGuiDockNode::LocalFlagsInWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, LocalFlagsInWindows) - 12usize];
    ["Offset of field: ImGuiDockNode::MergedFlags"]
        [::std::mem::offset_of!(ImGuiDockNode, MergedFlags) - 16usize];
    ["Offset of field: ImGuiDockNode::State"]
        [::std::mem::offset_of!(ImGuiDockNode, State) - 20usize];
    ["Offset of field: ImGuiDockNode::ParentNode"]
        [::std::mem::offset_of!(ImGuiDockNode, ParentNode) - 24usize];
    ["Offset of field: ImGuiDockNode::ChildNodes"]
        [::std::mem::offset_of!(ImGuiDockNode, ChildNodes) - 32usize];
    ["Offset of field: ImGuiDockNode::Windows"]
        [::std::mem::offset_of!(ImGuiDockNode, Windows) - 48usize];
    ["Offset of field: ImGuiDockNode::TabBar"]
        [::std::mem::offset_of!(ImGuiDockNode, TabBar) - 64usize];
    ["Offset of field: ImGuiDockNode::Pos"][::std::mem::offset_of!(ImGuiDockNode, Pos) - 72usize];
    ["Offset of field: ImGuiDockNode::Size"][::std::mem::offset_of!(ImGuiDockNode, Size) - 80usize];
    ["Offset of field: ImGuiDockNode::SizeRef"]
        [::std::mem::offset_of!(ImGuiDockNode, SizeRef) - 88usize];
    ["Offset of field: ImGuiDockNode::SplitAxis"]
        [::std::mem::offset_of!(ImGuiDockNode, SplitAxis) - 96usize];
    ["Offset of field: ImGuiDockNode::WindowClass"]
        [::std::mem::offset_of!(ImGuiDockNode, WindowClass) - 100usize];
    ["Offset of field: ImGuiDockNode::LastBgColor"]
        [::std::mem::offset_of!(ImGuiDockNode, LastBgColor) - 132usize];
    ["Offset of field: ImGuiDockNode::HostWindow"]
        [::std::mem::offset_of!(ImGuiDockNode, HostWindow) - 136usize];
    ["Offset of field: ImGuiDockNode::VisibleWindow"]
        [::std::mem::offset_of!(ImGuiDockNode, VisibleWindow) - 144usize];
    ["Offset of field: ImGuiDockNode::CentralNode"]
        [::std::mem::offset_of!(ImGuiDockNode, CentralNode) - 152usize];
    ["Offset of field: ImGuiDockNode::OnlyNodeWithWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, OnlyNodeWithWindows) - 160usize];
    ["Offset of field: ImGuiDockNode::CountNodeWithWindows"]
        [::std::mem::offset_of!(ImGuiDockNode, CountNodeWithWindows) - 168usize];
    ["Offset of field: ImGuiDockNode::LastFrameAlive"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameAlive) - 172usize];
    ["Offset of field: ImGuiDockNode::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameActive) - 176usize];
    ["Offset of field: ImGuiDockNode::LastFrameFocused"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFrameFocused) - 180usize];
    ["Offset of field: ImGuiDockNode::LastFocusedNodeId"]
        [::std::mem::offset_of!(ImGuiDockNode, LastFocusedNodeId) - 184usize];
    ["Offset of field: ImGuiDockNode::SelectedTabId"]
        [::std::mem::offset_of!(ImGuiDockNode, SelectedTabId) - 188usize];
    ["Offset of field: ImGuiDockNode::WantCloseTabId"]
        [::std::mem::offset_of!(ImGuiDockNode, WantCloseTabId) - 192usize];
    ["Offset of field: ImGuiDockNode::RefViewportId"]
        [::std::mem::offset_of!(ImGuiDockNode, RefViewportId) - 196usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN13ImGuiDockNodeC1Ej"]
    pub fn ImGuiDockNode_ImGuiDockNode(this: *mut ImGuiDockNode, id: ImGuiID);
}
extern "C" {
    #[link_name = "\u{1}_ZN13ImGuiDockNodeD1Ev"]
    pub fn ImGuiDockNode_ImGuiDockNode_destructor(this: *mut ImGuiDockNode);
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForPos_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForPos_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForSize_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForSize_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuthorityForViewport_raw(this: *const Self) -> ImGuiDataAuthority {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuthorityForViewport_raw(this: *mut Self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsFocused_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsFocused_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsBgDrawnThisFrame_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsBgDrawnThisFrame_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCloseButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCloseButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasWindowMenuButton_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasWindowMenuButton_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HasCentralNodeChild_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_HasCentralNodeChild_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantCloseAll_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantCloseAll_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantLockSizeOnce_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantLockSizeOnce_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantMouseMove_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantMouseMove_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarUpdate_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarUpdate_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WantHiddenTabBarToggle_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_WantHiddenTabBarToggle_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn new(id: ImGuiID) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiDockNode_ImGuiDockNode(__bindgen_tmp.as_mut_ptr(), id);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiDockNode_ImGuiDockNode_destructor(self)
    }
}
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabFocused: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabSelected: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabSelectedOverline:
    ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabDimmed: ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabDimmedSelected:
    ImGuiWindowDockStyleCol = 6;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabDimmedSelectedOverline:
    ImGuiWindowDockStyleCol = 7;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 8;
pub type ImGuiWindowDockStyleCol = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowDockStyle"][::std::mem::size_of::<ImGuiWindowDockStyle>() - 32usize];
    ["Alignment of ImGuiWindowDockStyle"][::std::mem::align_of::<ImGuiWindowDockStyle>() - 4usize];
    ["Offset of field: ImGuiWindowDockStyle::Colors"]
        [::std::mem::offset_of!(ImGuiWindowDockStyle, Colors) - 0usize];
};
#[repr(C)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector<ImGuiDockRequest>,
    pub NodesSettings: ImVector<ImGuiDockNodeSettings>,
    pub WantFullRebuild: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDockContext"][::std::mem::size_of::<ImGuiDockContext>() - 56usize];
    ["Alignment of ImGuiDockContext"][::std::mem::align_of::<ImGuiDockContext>() - 8usize];
    ["Offset of field: ImGuiDockContext::Nodes"]
        [::std::mem::offset_of!(ImGuiDockContext, Nodes) - 0usize];
    ["Offset of field: ImGuiDockContext::Requests"]
        [::std::mem::offset_of!(ImGuiDockContext, Requests) - 16usize];
    ["Offset of field: ImGuiDockContext::NodesSettings"]
        [::std::mem::offset_of!(ImGuiDockContext, NodesSettings) - 32usize];
    ["Offset of field: ImGuiDockContext::WantFullRebuild"]
        [::std::mem::offset_of!(ImGuiDockContext, WantFullRebuild) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiViewportP {
    pub _base: ImGuiViewport,
    pub Window: *mut ImGuiWindow,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFocusedStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub LastSize: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub LastFocusedHadNavWindow: bool,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub BgFgDrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub BgFgDrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkInsetMin: ImVec2,
    pub WorkInsetMax: ImVec2,
    pub BuildWorkInsetMin: ImVec2,
    pub BuildWorkInsetMax: ImVec2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiViewportP"][::std::mem::size_of::<ImGuiViewportP>() - 328usize];
    ["Alignment of ImGuiViewportP"][::std::mem::align_of::<ImGuiViewportP>() - 8usize];
    ["Offset of field: ImGuiViewportP::Window"]
        [::std::mem::offset_of!(ImGuiViewportP, Window) - 96usize];
    ["Offset of field: ImGuiViewportP::Idx"]
        [::std::mem::offset_of!(ImGuiViewportP, Idx) - 104usize];
    ["Offset of field: ImGuiViewportP::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFrameActive) - 108usize];
    ["Offset of field: ImGuiViewportP::LastFocusedStampCount"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFocusedStampCount) - 112usize];
    ["Offset of field: ImGuiViewportP::LastNameHash"]
        [::std::mem::offset_of!(ImGuiViewportP, LastNameHash) - 116usize];
    ["Offset of field: ImGuiViewportP::LastPos"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPos) - 120usize];
    ["Offset of field: ImGuiViewportP::LastSize"]
        [::std::mem::offset_of!(ImGuiViewportP, LastSize) - 128usize];
    ["Offset of field: ImGuiViewportP::Alpha"]
        [::std::mem::offset_of!(ImGuiViewportP, Alpha) - 136usize];
    ["Offset of field: ImGuiViewportP::LastAlpha"]
        [::std::mem::offset_of!(ImGuiViewportP, LastAlpha) - 140usize];
    ["Offset of field: ImGuiViewportP::LastFocusedHadNavWindow"]
        [::std::mem::offset_of!(ImGuiViewportP, LastFocusedHadNavWindow) - 144usize];
    ["Offset of field: ImGuiViewportP::PlatformMonitor"]
        [::std::mem::offset_of!(ImGuiViewportP, PlatformMonitor) - 146usize];
    ["Offset of field: ImGuiViewportP::BgFgDrawListsLastFrame"]
        [::std::mem::offset_of!(ImGuiViewportP, BgFgDrawListsLastFrame) - 148usize];
    ["Offset of field: ImGuiViewportP::BgFgDrawLists"]
        [::std::mem::offset_of!(ImGuiViewportP, BgFgDrawLists) - 160usize];
    ["Offset of field: ImGuiViewportP::DrawDataP"]
        [::std::mem::offset_of!(ImGuiViewportP, DrawDataP) - 176usize];
    ["Offset of field: ImGuiViewportP::DrawDataBuilder"]
        [::std::mem::offset_of!(ImGuiViewportP, DrawDataBuilder) - 240usize];
    ["Offset of field: ImGuiViewportP::LastPlatformPos"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPlatformPos) - 272usize];
    ["Offset of field: ImGuiViewportP::LastPlatformSize"]
        [::std::mem::offset_of!(ImGuiViewportP, LastPlatformSize) - 280usize];
    ["Offset of field: ImGuiViewportP::LastRendererSize"]
        [::std::mem::offset_of!(ImGuiViewportP, LastRendererSize) - 288usize];
    ["Offset of field: ImGuiViewportP::WorkInsetMin"]
        [::std::mem::offset_of!(ImGuiViewportP, WorkInsetMin) - 296usize];
    ["Offset of field: ImGuiViewportP::WorkInsetMax"]
        [::std::mem::offset_of!(ImGuiViewportP, WorkInsetMax) - 304usize];
    ["Offset of field: ImGuiViewportP::BuildWorkInsetMin"]
        [::std::mem::offset_of!(ImGuiViewportP, BuildWorkInsetMin) - 312usize];
    ["Offset of field: ImGuiViewportP::BuildWorkInsetMax"]
        [::std::mem::offset_of!(ImGuiViewportP, BuildWorkInsetMax) - 320usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub IsChild: bool,
    pub WantApply: bool,
    pub WantDelete: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowSettings"][::std::mem::size_of::<ImGuiWindowSettings>() - 36usize];
    ["Alignment of ImGuiWindowSettings"][::std::mem::align_of::<ImGuiWindowSettings>() - 4usize];
    ["Offset of field: ImGuiWindowSettings::ID"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ID) - 0usize];
    ["Offset of field: ImGuiWindowSettings::Pos"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Pos) - 4usize];
    ["Offset of field: ImGuiWindowSettings::Size"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Size) - 8usize];
    ["Offset of field: ImGuiWindowSettings::ViewportPos"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ViewportPos) - 12usize];
    ["Offset of field: ImGuiWindowSettings::ViewportId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ViewportId) - 16usize];
    ["Offset of field: ImGuiWindowSettings::DockId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, DockId) - 20usize];
    ["Offset of field: ImGuiWindowSettings::ClassId"]
        [::std::mem::offset_of!(ImGuiWindowSettings, ClassId) - 24usize];
    ["Offset of field: ImGuiWindowSettings::DockOrder"]
        [::std::mem::offset_of!(ImGuiWindowSettings, DockOrder) - 28usize];
    ["Offset of field: ImGuiWindowSettings::Collapsed"]
        [::std::mem::offset_of!(ImGuiWindowSettings, Collapsed) - 30usize];
    ["Offset of field: ImGuiWindowSettings::IsChild"]
        [::std::mem::offset_of!(ImGuiWindowSettings, IsChild) - 31usize];
    ["Offset of field: ImGuiWindowSettings::WantApply"]
        [::std::mem::offset_of!(ImGuiWindowSettings, WantApply) - 32usize];
    ["Offset of field: ImGuiWindowSettings::WantDelete"]
        [::std::mem::offset_of!(ImGuiWindowSettings, WantDelete) - 33usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiSettingsHandler"][::std::mem::size_of::<ImGuiSettingsHandler>() - 72usize];
    ["Alignment of ImGuiSettingsHandler"][::std::mem::align_of::<ImGuiSettingsHandler>() - 8usize];
    ["Offset of field: ImGuiSettingsHandler::TypeName"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, TypeName) - 0usize];
    ["Offset of field: ImGuiSettingsHandler::TypeHash"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, TypeHash) - 8usize];
    ["Offset of field: ImGuiSettingsHandler::ClearAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ClearAllFn) - 16usize];
    ["Offset of field: ImGuiSettingsHandler::ReadInitFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadInitFn) - 24usize];
    ["Offset of field: ImGuiSettingsHandler::ReadOpenFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadOpenFn) - 32usize];
    ["Offset of field: ImGuiSettingsHandler::ReadLineFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ReadLineFn) - 40usize];
    ["Offset of field: ImGuiSettingsHandler::ApplyAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, ApplyAllFn) - 48usize];
    ["Offset of field: ImGuiSettingsHandler::WriteAllFn"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, WriteAllFn) - 56usize];
    ["Offset of field: ImGuiSettingsHandler::UserData"]
        [::std::mem::offset_of!(ImGuiSettingsHandler, UserData) - 64usize];
};
pub const ImGuiLocKey_ImGuiLocKey_VersionStr: ImGuiLocKey = 0;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeOne: ImGuiLocKey = 1;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeAllFit: ImGuiLocKey = 2;
pub const ImGuiLocKey_ImGuiLocKey_TableSizeAllDefault: ImGuiLocKey = 3;
pub const ImGuiLocKey_ImGuiLocKey_TableResetOrder: ImGuiLocKey = 4;
pub const ImGuiLocKey_ImGuiLocKey_WindowingMainMenuBar: ImGuiLocKey = 5;
pub const ImGuiLocKey_ImGuiLocKey_WindowingPopup: ImGuiLocKey = 6;
pub const ImGuiLocKey_ImGuiLocKey_WindowingUntitled: ImGuiLocKey = 7;
pub const ImGuiLocKey_ImGuiLocKey_OpenLink_s: ImGuiLocKey = 8;
pub const ImGuiLocKey_ImGuiLocKey_CopyLink: ImGuiLocKey = 9;
pub const ImGuiLocKey_ImGuiLocKey_DockingHideTabBar: ImGuiLocKey = 10;
pub const ImGuiLocKey_ImGuiLocKey_DockingHoldShiftToDock: ImGuiLocKey = 11;
pub const ImGuiLocKey_ImGuiLocKey_DockingDragToUndockOrMoveNode: ImGuiLocKey = 12;
pub const ImGuiLocKey_ImGuiLocKey_COUNT: ImGuiLocKey = 13;
pub type ImGuiLocKey = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLocEntry {
    pub Key: ImGuiLocKey,
    pub Text: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiLocEntry"][::std::mem::size_of::<ImGuiLocEntry>() - 16usize];
    ["Alignment of ImGuiLocEntry"][::std::mem::align_of::<ImGuiLocEntry>() - 8usize];
    ["Offset of field: ImGuiLocEntry::Key"][::std::mem::offset_of!(ImGuiLocEntry, Key) - 0usize];
    ["Offset of field: ImGuiLocEntry::Text"][::std::mem::offset_of!(ImGuiLocEntry, Text) - 8usize];
};
pub type ImGuiErrorCallback = ::std::option::Option<
    extern "C" fn(
        ctx: *mut ImGuiContext,
        user_data: *mut ::std::os::raw::c_void,
        msg: *const ::std::os::raw::c_char,
    ),
>;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_None: ImGuiDebugLogFlags_ = 0;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventError: ImGuiDebugLogFlags_ = 1;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventActiveId: ImGuiDebugLogFlags_ = 2;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventFocus: ImGuiDebugLogFlags_ = 4;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventPopup: ImGuiDebugLogFlags_ = 8;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventNav: ImGuiDebugLogFlags_ = 16;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventClipper: ImGuiDebugLogFlags_ = 32;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventSelection: ImGuiDebugLogFlags_ = 64;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventIO: ImGuiDebugLogFlags_ = 128;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventFont: ImGuiDebugLogFlags_ = 256;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventInputRouting: ImGuiDebugLogFlags_ = 512;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventDocking: ImGuiDebugLogFlags_ = 1024;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventViewport: ImGuiDebugLogFlags_ = 2048;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventMask_: ImGuiDebugLogFlags_ = 4095;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_OutputToTTY: ImGuiDebugLogFlags_ = 1048576;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_OutputToTestEngine: ImGuiDebugLogFlags_ = 2097152;
pub type ImGuiDebugLogFlags_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocEntry {
    pub FrameCount: ::std::os::raw::c_int,
    pub AllocCount: ImS16,
    pub FreeCount: ImS16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDebugAllocEntry"][::std::mem::size_of::<ImGuiDebugAllocEntry>() - 8usize];
    ["Alignment of ImGuiDebugAllocEntry"][::std::mem::align_of::<ImGuiDebugAllocEntry>() - 4usize];
    ["Offset of field: ImGuiDebugAllocEntry::FrameCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, FrameCount) - 0usize];
    ["Offset of field: ImGuiDebugAllocEntry::AllocCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, AllocCount) - 4usize];
    ["Offset of field: ImGuiDebugAllocEntry::FreeCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocEntry, FreeCount) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDebugAllocInfo {
    pub TotalAllocCount: ::std::os::raw::c_int,
    pub TotalFreeCount: ::std::os::raw::c_int,
    pub LastEntriesIdx: ImS16,
    pub LastEntriesBuf: [ImGuiDebugAllocEntry; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiDebugAllocInfo"][::std::mem::size_of::<ImGuiDebugAllocInfo>() - 60usize];
    ["Alignment of ImGuiDebugAllocInfo"][::std::mem::align_of::<ImGuiDebugAllocInfo>() - 4usize];
    ["Offset of field: ImGuiDebugAllocInfo::TotalAllocCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, TotalAllocCount) - 0usize];
    ["Offset of field: ImGuiDebugAllocInfo::TotalFreeCount"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, TotalFreeCount) - 4usize];
    ["Offset of field: ImGuiDebugAllocInfo::LastEntriesIdx"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, LastEntriesIdx) - 8usize];
    ["Offset of field: ImGuiDebugAllocInfo::LastEntriesBuf"]
        [::std::mem::offset_of!(ImGuiDebugAllocInfo, LastEntriesBuf) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowIDStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowTextEncodingViewer: bool,
    pub ShowAtlasTintedWithTextColor: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
    pub HighlightMonitorIdx: ::std::os::raw::c_int,
    pub HighlightViewportID: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiMetricsConfig"][::std::mem::size_of::<ImGuiMetricsConfig>() - 28usize];
    ["Alignment of ImGuiMetricsConfig"][::std::mem::align_of::<ImGuiMetricsConfig>() - 4usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDebugLog"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDebugLog) - 0usize];
    ["Offset of field: ImGuiMetricsConfig::ShowIDStackTool"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowIDStackTool) - 1usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsRects"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsRects) - 2usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsBeginOrder"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsBeginOrder) - 3usize];
    ["Offset of field: ImGuiMetricsConfig::ShowTablesRects"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowTablesRects) - 4usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDrawCmdMesh"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDrawCmdMesh) - 5usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDrawCmdBoundingBoxes"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDrawCmdBoundingBoxes) - 6usize];
    ["Offset of field: ImGuiMetricsConfig::ShowTextEncodingViewer"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowTextEncodingViewer) - 7usize];
    ["Offset of field: ImGuiMetricsConfig::ShowAtlasTintedWithTextColor"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowAtlasTintedWithTextColor) - 8usize];
    ["Offset of field: ImGuiMetricsConfig::ShowDockingNodes"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowDockingNodes) - 9usize];
    ["Offset of field: ImGuiMetricsConfig::ShowWindowsRectsType"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowWindowsRectsType) - 12usize];
    ["Offset of field: ImGuiMetricsConfig::ShowTablesRectsType"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, ShowTablesRectsType) - 16usize];
    ["Offset of field: ImGuiMetricsConfig::HighlightMonitorIdx"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, HighlightMonitorIdx) - 20usize];
    ["Offset of field: ImGuiMetricsConfig::HighlightViewportID"]
        [::std::mem::offset_of!(ImGuiMetricsConfig, HighlightViewportID) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub Desc: [::std::os::raw::c_char; 57usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiStackLevelInfo"][::std::mem::size_of::<ImGuiStackLevelInfo>() - 64usize];
    ["Alignment of ImGuiStackLevelInfo"][::std::mem::align_of::<ImGuiStackLevelInfo>() - 4usize];
    ["Offset of field: ImGuiStackLevelInfo::ID"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, ID) - 0usize];
    ["Offset of field: ImGuiStackLevelInfo::QueryFrameCount"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, QueryFrameCount) - 4usize];
    ["Offset of field: ImGuiStackLevelInfo::QuerySuccess"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, QuerySuccess) - 5usize];
    ["Offset of field: ImGuiStackLevelInfo::Desc"]
        [::std::mem::offset_of!(ImGuiStackLevelInfo, Desc) - 7usize];
};
impl ImGuiStackLevelInfo {
    #[inline]
    pub fn DataType(&self) -> ImGuiDataType {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_DataType(&mut self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DataType_raw(this: *const Self) -> ImGuiDataType {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DataType_raw(this: *mut Self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(DataType: ImGuiDataType) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let DataType: u32 = unsafe { ::std::mem::transmute(DataType) };
            DataType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiIDStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryId: ImGuiID,
    pub Results: ImVector<ImGuiStackLevelInfo>,
    pub CopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiIDStackTool"][::std::mem::size_of::<ImGuiIDStackTool>() - 40usize];
    ["Alignment of ImGuiIDStackTool"][::std::mem::align_of::<ImGuiIDStackTool>() - 8usize];
    ["Offset of field: ImGuiIDStackTool::LastActiveFrame"]
        [::std::mem::offset_of!(ImGuiIDStackTool, LastActiveFrame) - 0usize];
    ["Offset of field: ImGuiIDStackTool::StackLevel"]
        [::std::mem::offset_of!(ImGuiIDStackTool, StackLevel) - 4usize];
    ["Offset of field: ImGuiIDStackTool::QueryId"]
        [::std::mem::offset_of!(ImGuiIDStackTool, QueryId) - 8usize];
    ["Offset of field: ImGuiIDStackTool::Results"]
        [::std::mem::offset_of!(ImGuiIDStackTool, Results) - 16usize];
    ["Offset of field: ImGuiIDStackTool::CopyToClipboardOnCtrlC"]
        [::std::mem::offset_of!(ImGuiIDStackTool, CopyToClipboardOnCtrlC) - 32usize];
    ["Offset of field: ImGuiIDStackTool::CopyToClipboardLastTime"]
        [::std::mem::offset_of!(ImGuiIDStackTool, CopyToClipboardLastTime) - 36usize];
};
pub type ImGuiContextHookCallback = ::std::option::Option<
    extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiContextHook"][::std::mem::size_of::<ImGuiContextHook>() - 32usize];
    ["Alignment of ImGuiContextHook"][::std::mem::align_of::<ImGuiContextHook>() - 8usize];
    ["Offset of field: ImGuiContextHook::HookId"]
        [::std::mem::offset_of!(ImGuiContextHook, HookId) - 0usize];
    ["Offset of field: ImGuiContextHook::Type"]
        [::std::mem::offset_of!(ImGuiContextHook, Type) - 4usize];
    ["Offset of field: ImGuiContextHook::Owner"]
        [::std::mem::offset_of!(ImGuiContextHook, Owner) - 8usize];
    ["Offset of field: ImGuiContextHook::Callback"]
        [::std::mem::offset_of!(ImGuiContextHook, Callback) - 16usize];
    ["Offset of field: ImGuiContextHook::UserData"]
        [::std::mem::offset_of!(ImGuiContextHook, UserData) - 24usize];
};
#[repr(C)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub FontScale: f32,
    pub CurrentDpiScale: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinEndChildID: ImGuiID,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub ContextName: [::std::os::raw::c_char; 16usize],
    pub InputEventsQueue: ImVector<ImGuiInputEvent>,
    pub InputEventsTrail: ImVector<ImGuiInputEvent>,
    pub InputEventsNextMouseSource: ImGuiMouseSource,
    pub InputEventsNextEventId: ImU32,
    pub Windows: ImVector<*mut ImGuiWindow>,
    pub WindowsFocusOrder: ImVector<*mut ImGuiWindow>,
    pub WindowsTempSortBuffer: ImVector<*mut ImGuiWindow>,
    pub CurrentWindowStack: ImVector<ImGuiWindowStackData>,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub WindowsBorderHoverPadding: f32,
    pub DebugBreakInWindow: ImGuiID,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub HoveredWindowBeforeClear: *mut ImGuiWindow,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowStartFrame: ::std::os::raw::c_int,
    pub WheelingWindowScrolledFrame: ::std::os::raw::c_int,
    pub WheelingWindowReleaseTimer: f32,
    pub WheelingWindowWheelRemainder: ImVec2,
    pub WheelingAxisAvg: ImVec2,
    pub DebugDrawIdConflicts: ImGuiID,
    pub DebugHookIdInfo: ImGuiID,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdPreviousFrameItemCount: ::std::os::raw::c_int,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdIsDisabled: bool,
    pub ItemUnclipByLog: bool,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdFromShortcut: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub DeactivatedItemData: ImGuiDeactivatedItemData,
    pub ActiveIdValueOnActivation: ImGuiDataTypeStorage,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub LastKeyModsChangeTime: f64,
    pub LastKeyModsChangeFromNoneTime: f64,
    pub LastKeyboardKeyPressTime: f64,
    pub KeysMayBeCharInput: ImBitArrayForNamedKeys,
    pub KeysOwnerData: [ImGuiKeyOwnerData; 154usize],
    pub KeysRoutingTable: ImGuiKeyRoutingTable,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingAllKeyboardKeys: bool,
    pub DebugBreakInShortcutRouting: ImGuiKeyChord,
    pub CurrentFocusScopeId: ImGuiID,
    pub CurrentItemFlags: ImGuiItemFlags,
    pub DebugLocateId: ImGuiID,
    pub NextItemData: ImGuiNextItemData,
    pub LastItemData: ImGuiLastItemData,
    pub NextWindowData: ImGuiNextWindowData,
    pub DebugShowGroupRects: bool,
    pub DebugFlashStyleColorIdx: ImGuiCol,
    pub ColorStack: ImVector<ImGuiColorMod>,
    pub StyleVarStack: ImVector<ImGuiStyleMod>,
    pub FontStack: ImVector<*mut ImFont>,
    pub FocusScopeStack: ImVector<ImGuiFocusScopeData>,
    pub ItemFlagsStack: ImVector<ImGuiItemFlags>,
    pub GroupStack: ImVector<ImGuiGroupData>,
    pub OpenPopupStack: ImVector<ImGuiPopupData>,
    pub BeginPopupStack: ImVector<ImGuiPopupData>,
    pub TreeNodeStack: ImVector<ImGuiTreeNodeStackData>,
    pub Viewports: ImVector<*mut ImGuiViewportP>,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub PlatformMonitorsFullWorkRect: ImRect,
    pub ViewportCreatedCount: ::std::os::raw::c_int,
    pub PlatformWindowsCreatedCount: ::std::os::raw::c_int,
    pub ViewportFocusedStampCount: ::std::os::raw::c_int,
    pub NavCursorVisible: bool,
    pub NavHighlightItemUnderNav: bool,
    pub NavMousePosDirty: bool,
    pub NavIdIsAlive: bool,
    pub NavId: ImGuiID,
    pub NavWindow: *mut ImGuiWindow,
    pub NavFocusScopeId: ImGuiID,
    pub NavLayer: ImGuiNavLayer,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavActivateFlags: ImGuiActivateFlags,
    pub NavFocusRoute: ImVector<ImGuiFocusScopeData>,
    pub NavHighlightActivatedId: ImGuiID,
    pub NavHighlightActivatedTimer: f32,
    pub NavNextActivateId: ImGuiID,
    pub NavNextActivateFlags: ImGuiActivateFlags,
    pub NavInputSource: ImGuiInputSource,
    pub NavLastValidSelectionUserData: ImGuiSelectionUserData,
    pub NavCursorHideFrames: ImS8,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResult: ImGuiNavItemData,
    pub NavMoveSubmitted: bool,
    pub NavMoveScoringItems: bool,
    pub NavMoveForwardToNextFrame: bool,
    pub NavMoveFlags: ImGuiNavMoveFlags,
    pub NavMoveScrollFlags: ImGuiScrollFlags,
    pub NavMoveKeyMods: ImGuiKeyChord,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirForDebug: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavScoringRect: ImRect,
    pub NavScoringNoClipRect: ImRect,
    pub NavScoringDebugCount: ::std::os::raw::c_int,
    pub NavTabbingDir: ::std::os::raw::c_int,
    pub NavTabbingCounter: ::std::os::raw::c_int,
    pub NavMoveResultLocal: ImGuiNavItemData,
    pub NavMoveResultLocalVisible: ImGuiNavItemData,
    pub NavMoveResultOther: ImGuiNavItemData,
    pub NavTabbingResultFirst: ImGuiNavItemData,
    pub NavJustMovedFromFocusScopeId: ImGuiID,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyChord,
    pub NavJustMovedToIsTabbing: bool,
    pub NavJustMovedToHasSelectionData: bool,
    pub ConfigNavWindowingKeyNext: ImGuiKeyChord,
    pub ConfigNavWindowingKeyPrev: ImGuiKeyChord,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub NavWindowingToggleKey: ImGuiKey,
    pub NavWindowingAccumDeltaPos: ImVec2,
    pub NavWindowingAccumDeltaSize: ImVec2,
    pub DimBgRatio: f32,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetClipRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector<::std::os::raw::c_uchar>,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub ClipperTempDataStacked: ::std::os::raw::c_int,
    pub ClipperTempData: ImVector<ImGuiListClipperData>,
    pub CurrentTable: *mut ImGuiTable,
    pub DebugBreakInTable: ImGuiID,
    pub TablesTempDataStacked: ::std::os::raw::c_int,
    pub TablesTempData: ImVector<ImGuiTableTempData>,
    pub Tables: ImPool<ImGuiTable>,
    pub TablesLastTimeActive: ImVector<f32>,
    pub DrawChannelsTempMergeBuffer: ImVector<ImDrawChannel>,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool<ImGuiTabBar>,
    pub CurrentTabBarStack: ImVector<ImGuiPtrOrIndex>,
    pub ShrinkWidthBuffer: ImVector<ImGuiShrinkWidthItem>,
    pub BoxSelectState: ImGuiBoxSelectState,
    pub CurrentMultiSelect: *mut ImGuiMultiSelectTempData,
    pub MultiSelectTempDataStacked: ::std::os::raw::c_int,
    pub MultiSelectTempData: ImVector<ImGuiMultiSelectTempData>,
    pub MultiSelectStorage: ImPool<ImGuiMultiSelectState>,
    pub HoverItemDelayId: ImGuiID,
    pub HoverItemDelayIdPreviousFrame: ImGuiID,
    pub HoverItemDelayTimer: f32,
    pub HoverItemDelayClearTimer: f32,
    pub HoverItemUnlockedStationaryId: ImGuiID,
    pub HoverWindowUnlockedStationaryId: ImGuiID,
    pub MouseCursor: ImGuiMouseCursor,
    pub MouseStationaryTimer: f32,
    pub MouseLastValidPos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub DataTypeZeroValue: ImGuiDataTypeStorage,
    pub BeginMenuDepth: ::std::os::raw::c_int,
    pub BeginComboDepth: ::std::os::raw::c_int,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditCurrentID: ImGuiID,
    pub ColorEditSavedID: ImGuiID,
    pub ColorEditSavedHue: f32,
    pub ColorEditSavedSat: f32,
    pub ColorEditSavedColor: ImU32,
    pub ColorPickerRef: ImVec4,
    pub ComboPreviewData: ImGuiComboPreviewData,
    pub WindowResizeBorderExpectedRect: ImRect,
    pub WindowResizeRelativeMode: bool,
    pub ScrollbarSeekMode: ::std::os::raw::c_short,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub SliderGrabClickOffset: f32,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub DisabledAlphaBackup: f32,
    pub DisabledStackSize: ::std::os::raw::c_short,
    pub TooltipOverrideCount: ::std::os::raw::c_short,
    pub TooltipPreviousWindow: *mut ImGuiWindow,
    pub ClipboardHandlerData: ImVector<::std::os::raw::c_char>,
    pub MenusIdSubmittedThisFrame: ImVector<ImGuiID>,
    pub TypingSelectState: ImGuiTypingSelectState,
    pub PlatformImeData: ImGuiPlatformImeData,
    pub PlatformImeDataPrev: ImGuiPlatformImeData,
    pub PlatformImeViewport: ImGuiID,
    pub DockContext: ImGuiDockContext,
    pub DockNodeWindowMenuHandler: ::std::option::Option<
        extern "C" fn(
            ctx: *mut ImGuiContext,
            node: *mut ImGuiDockNode,
            tab_bar: *mut ImGuiTabBar,
        ),
    >,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector<ImGuiSettingsHandler>,
    pub SettingsWindows: ImChunkStream,
    pub SettingsTables: ImChunkStream,
    pub Hooks: ImVector<ImGuiContextHook>,
    pub HookIdNext: ImGuiID,
    pub LocalizationTable: [*const ::std::os::raw::c_char; 13usize],
    pub LogEnabled: bool,
    pub LogFlags: ImGuiLogFlags,
    pub LogWindow: *mut ImGuiWindow,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::std::os::raw::c_char,
    pub LogNextSuffix: *const ::std::os::raw::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub ErrorCallback: ImGuiErrorCallback,
    pub ErrorCallbackUserData: *mut ::std::os::raw::c_void,
    pub ErrorTooltipLockedPos: ImVec2,
    pub ErrorFirst: bool,
    pub ErrorCountCurrentFrame: ::std::os::raw::c_int,
    pub StackSizesInNewFrame: ImGuiErrorRecoveryState,
    pub StackSizesInBeginForCurrentWindow: *mut ImGuiErrorRecoveryState,
    pub DebugDrawIdConflictsCount: ::std::os::raw::c_int,
    pub DebugLogFlags: ImGuiDebugLogFlags,
    pub DebugLogBuf: ImGuiTextBuffer,
    pub DebugLogIndex: ImGuiTextIndex,
    pub DebugLogSkippedErrors: ::std::os::raw::c_int,
    pub DebugLogAutoDisableFlags: ImGuiDebugLogFlags,
    pub DebugLogAutoDisableFrames: ImU8,
    pub DebugLocateFrames: ImU8,
    pub DebugBreakInLocateId: bool,
    pub DebugBreakKeyChord: ImGuiKeyChord,
    pub DebugBeginReturnValueCullDepth: ImS8,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerMouseButton: ImU8,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugFlashStyleColorTime: f32,
    pub DebugFlashStyleColorBackup: ImVec4,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub DebugIDStackTool: ImGuiIDStackTool,
    pub DebugAllocInfo: ImGuiDebugAllocInfo,
    pub DebugHoveredDockNode: *mut ImGuiDockNode,
    pub FramerateSecPerFrame: [f32; 60usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameCount: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: ImVector<::std::os::raw::c_char>,
    pub TempKeychordName: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiContext"][::std::mem::size_of::<ImGuiContext>() - 11104usize];
    ["Alignment of ImGuiContext"][::std::mem::align_of::<ImGuiContext>() - 8usize];
    ["Offset of field: ImGuiContext::Initialized"]
        [::std::mem::offset_of!(ImGuiContext, Initialized) - 0usize];
    ["Offset of field: ImGuiContext::FontAtlasOwnedByContext"]
        [::std::mem::offset_of!(ImGuiContext, FontAtlasOwnedByContext) - 1usize];
    ["Offset of field: ImGuiContext::IO"][::std::mem::offset_of!(ImGuiContext, IO) - 8usize];
    ["Offset of field: ImGuiContext::PlatformIO"]
        [::std::mem::offset_of!(ImGuiContext, PlatformIO) - 3080usize];
    ["Offset of field: ImGuiContext::Style"]
        [::std::mem::offset_of!(ImGuiContext, Style) - 3376usize];
    ["Offset of field: ImGuiContext::ConfigFlagsCurrFrame"]
        [::std::mem::offset_of!(ImGuiContext, ConfigFlagsCurrFrame) - 4576usize];
    ["Offset of field: ImGuiContext::ConfigFlagsLastFrame"]
        [::std::mem::offset_of!(ImGuiContext, ConfigFlagsLastFrame) - 4580usize];
    ["Offset of field: ImGuiContext::Font"][::std::mem::offset_of!(ImGuiContext, Font) - 4584usize];
    ["Offset of field: ImGuiContext::FontSize"]
        [::std::mem::offset_of!(ImGuiContext, FontSize) - 4592usize];
    ["Offset of field: ImGuiContext::FontBaseSize"]
        [::std::mem::offset_of!(ImGuiContext, FontBaseSize) - 4596usize];
    ["Offset of field: ImGuiContext::FontScale"]
        [::std::mem::offset_of!(ImGuiContext, FontScale) - 4600usize];
    ["Offset of field: ImGuiContext::CurrentDpiScale"]
        [::std::mem::offset_of!(ImGuiContext, CurrentDpiScale) - 4604usize];
    ["Offset of field: ImGuiContext::DrawListSharedData"]
        [::std::mem::offset_of!(ImGuiContext, DrawListSharedData) - 4608usize];
    ["Offset of field: ImGuiContext::Time"][::std::mem::offset_of!(ImGuiContext, Time) - 5144usize];
    ["Offset of field: ImGuiContext::FrameCount"]
        [::std::mem::offset_of!(ImGuiContext, FrameCount) - 5152usize];
    ["Offset of field: ImGuiContext::FrameCountEnded"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountEnded) - 5156usize];
    ["Offset of field: ImGuiContext::FrameCountPlatformEnded"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountPlatformEnded) - 5160usize];
    ["Offset of field: ImGuiContext::FrameCountRendered"]
        [::std::mem::offset_of!(ImGuiContext, FrameCountRendered) - 5164usize];
    ["Offset of field: ImGuiContext::WithinEndChildID"]
        [::std::mem::offset_of!(ImGuiContext, WithinEndChildID) - 5168usize];
    ["Offset of field: ImGuiContext::WithinFrameScope"]
        [::std::mem::offset_of!(ImGuiContext, WithinFrameScope) - 5172usize];
    ["Offset of field: ImGuiContext::WithinFrameScopeWithImplicitWindow"]
        [::std::mem::offset_of!(ImGuiContext, WithinFrameScopeWithImplicitWindow) - 5173usize];
    ["Offset of field: ImGuiContext::GcCompactAll"]
        [::std::mem::offset_of!(ImGuiContext, GcCompactAll) - 5174usize];
    ["Offset of field: ImGuiContext::TestEngineHookItems"]
        [::std::mem::offset_of!(ImGuiContext, TestEngineHookItems) - 5175usize];
    ["Offset of field: ImGuiContext::TestEngine"]
        [::std::mem::offset_of!(ImGuiContext, TestEngine) - 5176usize];
    ["Offset of field: ImGuiContext::ContextName"]
        [::std::mem::offset_of!(ImGuiContext, ContextName) - 5184usize];
    ["Offset of field: ImGuiContext::InputEventsQueue"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsQueue) - 5200usize];
    ["Offset of field: ImGuiContext::InputEventsTrail"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsTrail) - 5216usize];
    ["Offset of field: ImGuiContext::InputEventsNextMouseSource"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsNextMouseSource) - 5232usize];
    ["Offset of field: ImGuiContext::InputEventsNextEventId"]
        [::std::mem::offset_of!(ImGuiContext, InputEventsNextEventId) - 5236usize];
    ["Offset of field: ImGuiContext::Windows"]
        [::std::mem::offset_of!(ImGuiContext, Windows) - 5240usize];
    ["Offset of field: ImGuiContext::WindowsFocusOrder"]
        [::std::mem::offset_of!(ImGuiContext, WindowsFocusOrder) - 5256usize];
    ["Offset of field: ImGuiContext::WindowsTempSortBuffer"]
        [::std::mem::offset_of!(ImGuiContext, WindowsTempSortBuffer) - 5272usize];
    ["Offset of field: ImGuiContext::CurrentWindowStack"]
        [::std::mem::offset_of!(ImGuiContext, CurrentWindowStack) - 5288usize];
    ["Offset of field: ImGuiContext::WindowsById"]
        [::std::mem::offset_of!(ImGuiContext, WindowsById) - 5304usize];
    ["Offset of field: ImGuiContext::WindowsActiveCount"]
        [::std::mem::offset_of!(ImGuiContext, WindowsActiveCount) - 5320usize];
    ["Offset of field: ImGuiContext::WindowsBorderHoverPadding"]
        [::std::mem::offset_of!(ImGuiContext, WindowsBorderHoverPadding) - 5324usize];
    ["Offset of field: ImGuiContext::DebugBreakInWindow"]
        [::std::mem::offset_of!(ImGuiContext, DebugBreakInWindow) - 5328usize];
    ["Offset of field: ImGuiContext::CurrentWindow"]
        [::std::mem::offset_of!(ImGuiContext, CurrentWindow) - 5336usize];
    ["Offset of field: ImGuiContext::HoveredWindow"]
        [::std::mem::offset_of!(ImGuiContext, HoveredWindow) - 5344usize];
    ["Offset of field: ImGuiContext::HoveredWindowUnderMovingWindow"]
        [::std::mem::offset_of!(ImGuiContext, HoveredWindowUnderMovingWindow) - 5352usize];
    ["Offset of field: ImGuiContext::HoveredWindowBeforeClear"]
        [::std::mem::offset_of!(ImGuiContext, HoveredWindowBeforeClear) - 5360usize];
    ["Offset of field: ImGuiContext::MovingWindow"]
        [::std::mem::offset_of!(ImGuiContext, MovingWindow) - 5368usize];
    ["Offset of field: ImGuiContext::WheelingWindow"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindow) - 5376usize];
    ["Offset of field: ImGuiContext::WheelingWindowRefMousePos"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowRefMousePos) - 5384usize];
    ["Offset of field: ImGuiContext::WheelingWindowStartFrame"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowStartFrame) - 5392usize];
    ["Offset of field: ImGuiContext::WheelingWindowScrolledFrame"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowScrolledFrame) - 5396usize];
    ["Offset of field: ImGuiContext::WheelingWindowReleaseTimer"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowReleaseTimer) - 5400usize];
    ["Offset of field: ImGuiContext::WheelingWindowWheelRemainder"]
        [::std::mem::offset_of!(ImGuiContext, WheelingWindowWheelRemainder) - 5404usize];
    ["Offset of field: ImGuiContext::WheelingAxisAvg"]
        [::std::mem::offset_of!(ImGuiContext, WheelingAxisAvg) - 5412usize];
    ["Offset of field: ImGuiContext::DebugDrawIdConflicts"]
        [::std::mem::offset_of!(ImGuiContext, DebugDrawIdConflicts) - 5420usize];
    ["Offset of field: ImGuiContext::DebugHookIdInfo"]
        [::std::mem::offset_of!(ImGuiContext, DebugHookIdInfo) - 5424usize];
    ["Offset of field: ImGuiContext::HoveredId"]
        [::std::mem::offset_of!(ImGuiContext, HoveredId) - 5428usize];
    ["Offset of field: ImGuiContext::HoveredIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdPreviousFrame) - 5432usize];
    ["Offset of field: ImGuiContext::HoveredIdPreviousFrameItemCount"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdPreviousFrameItemCount) - 5436usize];
    ["Offset of field: ImGuiContext::HoveredIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdTimer) - 5440usize];
    ["Offset of field: ImGuiContext::HoveredIdNotActiveTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdNotActiveTimer) - 5444usize];
    ["Offset of field: ImGuiContext::HoveredIdAllowOverlap"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdAllowOverlap) - 5448usize];
    ["Offset of field: ImGuiContext::HoveredIdIsDisabled"]
        [::std::mem::offset_of!(ImGuiContext, HoveredIdIsDisabled) - 5449usize];
    ["Offset of field: ImGuiContext::ItemUnclipByLog"]
        [::std::mem::offset_of!(ImGuiContext, ItemUnclipByLog) - 5450usize];
    ["Offset of field: ImGuiContext::ActiveId"]
        [::std::mem::offset_of!(ImGuiContext, ActiveId) - 5452usize];
    ["Offset of field: ImGuiContext::ActiveIdIsAlive"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdIsAlive) - 5456usize];
    ["Offset of field: ImGuiContext::ActiveIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdTimer) - 5460usize];
    ["Offset of field: ImGuiContext::ActiveIdIsJustActivated"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdIsJustActivated) - 5464usize];
    ["Offset of field: ImGuiContext::ActiveIdAllowOverlap"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdAllowOverlap) - 5465usize];
    ["Offset of field: ImGuiContext::ActiveIdNoClearOnFocusLoss"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdNoClearOnFocusLoss) - 5466usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenPressedBefore"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenPressedBefore) - 5467usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenEditedBefore"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenEditedBefore) - 5468usize];
    ["Offset of field: ImGuiContext::ActiveIdHasBeenEditedThisFrame"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdHasBeenEditedThisFrame) - 5469usize];
    ["Offset of field: ImGuiContext::ActiveIdFromShortcut"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdFromShortcut) - 5470usize];
    ["Offset of field: ImGuiContext::ActiveIdClickOffset"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdClickOffset) - 5472usize];
    ["Offset of field: ImGuiContext::ActiveIdWindow"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdWindow) - 5480usize];
    ["Offset of field: ImGuiContext::ActiveIdSource"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdSource) - 5488usize];
    ["Offset of field: ImGuiContext::ActiveIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdPreviousFrame) - 5492usize];
    ["Offset of field: ImGuiContext::DeactivatedItemData"]
        [::std::mem::offset_of!(ImGuiContext, DeactivatedItemData) - 5496usize];
    ["Offset of field: ImGuiContext::ActiveIdValueOnActivation"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdValueOnActivation) - 5508usize];
    ["Offset of field: ImGuiContext::LastActiveId"]
        [::std::mem::offset_of!(ImGuiContext, LastActiveId) - 5516usize];
    ["Offset of field: ImGuiContext::LastActiveIdTimer"]
        [::std::mem::offset_of!(ImGuiContext, LastActiveIdTimer) - 5520usize];
    ["Offset of field: ImGuiContext::LastKeyModsChangeTime"]
        [::std::mem::offset_of!(ImGuiContext, LastKeyModsChangeTime) - 5528usize];
    ["Offset of field: ImGuiContext::LastKeyModsChangeFromNoneTime"]
        [::std::mem::offset_of!(ImGuiContext, LastKeyModsChangeFromNoneTime) - 5536usize];
    ["Offset of field: ImGuiContext::LastKeyboardKeyPressTime"]
        [::std::mem::offset_of!(ImGuiContext, LastKeyboardKeyPressTime) - 5544usize];
    ["Offset of field: ImGuiContext::KeysMayBeCharInput"]
        [::std::mem::offset_of!(ImGuiContext, KeysMayBeCharInput) - 5552usize];
    ["Offset of field: ImGuiContext::KeysOwnerData"]
        [::std::mem::offset_of!(ImGuiContext, KeysOwnerData) - 5572usize];
    ["Offset of field: ImGuiContext::KeysRoutingTable"]
        [::std::mem::offset_of!(ImGuiContext, KeysRoutingTable) - 7424usize];
    ["Offset of field: ImGuiContext::ActiveIdUsingNavDirMask"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdUsingNavDirMask) - 7768usize];
    ["Offset of field: ImGuiContext::ActiveIdUsingAllKeyboardKeys"]
        [::std::mem::offset_of!(ImGuiContext, ActiveIdUsingAllKeyboardKeys) - 7772usize];
    ["Offset of field: ImGuiContext::DebugBreakInShortcutRouting"]
        [::std::mem::offset_of!(ImGuiContext, DebugBreakInShortcutRouting) - 7776usize];
    ["Offset of field: ImGuiContext::CurrentFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, CurrentFocusScopeId) - 7780usize];
    ["Offset of field: ImGuiContext::CurrentItemFlags"]
        [::std::mem::offset_of!(ImGuiContext, CurrentItemFlags) - 7784usize];
    ["Offset of field: ImGuiContext::DebugLocateId"]
        [::std::mem::offset_of!(ImGuiContext, DebugLocateId) - 7788usize];
    ["Offset of field: ImGuiContext::NextItemData"]
        [::std::mem::offset_of!(ImGuiContext, NextItemData) - 7792usize];
    ["Offset of field: ImGuiContext::LastItemData"]
        [::std::mem::offset_of!(ImGuiContext, LastItemData) - 7848usize];
    ["Offset of field: ImGuiContext::NextWindowData"]
        [::std::mem::offset_of!(ImGuiContext, NextWindowData) - 7928usize];
    ["Offset of field: ImGuiContext::DebugShowGroupRects"]
        [::std::mem::offset_of!(ImGuiContext, DebugShowGroupRects) - 8088usize];
    ["Offset of field: ImGuiContext::DebugFlashStyleColorIdx"]
        [::std::mem::offset_of!(ImGuiContext, DebugFlashStyleColorIdx) - 8092usize];
    ["Offset of field: ImGuiContext::ColorStack"]
        [::std::mem::offset_of!(ImGuiContext, ColorStack) - 8096usize];
    ["Offset of field: ImGuiContext::StyleVarStack"]
        [::std::mem::offset_of!(ImGuiContext, StyleVarStack) - 8112usize];
    ["Offset of field: ImGuiContext::FontStack"]
        [::std::mem::offset_of!(ImGuiContext, FontStack) - 8128usize];
    ["Offset of field: ImGuiContext::FocusScopeStack"]
        [::std::mem::offset_of!(ImGuiContext, FocusScopeStack) - 8144usize];
    ["Offset of field: ImGuiContext::ItemFlagsStack"]
        [::std::mem::offset_of!(ImGuiContext, ItemFlagsStack) - 8160usize];
    ["Offset of field: ImGuiContext::GroupStack"]
        [::std::mem::offset_of!(ImGuiContext, GroupStack) - 8176usize];
    ["Offset of field: ImGuiContext::OpenPopupStack"]
        [::std::mem::offset_of!(ImGuiContext, OpenPopupStack) - 8192usize];
    ["Offset of field: ImGuiContext::BeginPopupStack"]
        [::std::mem::offset_of!(ImGuiContext, BeginPopupStack) - 8208usize];
    ["Offset of field: ImGuiContext::TreeNodeStack"]
        [::std::mem::offset_of!(ImGuiContext, TreeNodeStack) - 8224usize];
    ["Offset of field: ImGuiContext::Viewports"]
        [::std::mem::offset_of!(ImGuiContext, Viewports) - 8240usize];
    ["Offset of field: ImGuiContext::CurrentViewport"]
        [::std::mem::offset_of!(ImGuiContext, CurrentViewport) - 8256usize];
    ["Offset of field: ImGuiContext::MouseViewport"]
        [::std::mem::offset_of!(ImGuiContext, MouseViewport) - 8264usize];
    ["Offset of field: ImGuiContext::MouseLastHoveredViewport"]
        [::std::mem::offset_of!(ImGuiContext, MouseLastHoveredViewport) - 8272usize];
    ["Offset of field: ImGuiContext::PlatformLastFocusedViewportId"]
        [::std::mem::offset_of!(ImGuiContext, PlatformLastFocusedViewportId) - 8280usize];
    ["Offset of field: ImGuiContext::FallbackMonitor"]
        [::std::mem::offset_of!(ImGuiContext, FallbackMonitor) - 8288usize];
    ["Offset of field: ImGuiContext::PlatformMonitorsFullWorkRect"]
        [::std::mem::offset_of!(ImGuiContext, PlatformMonitorsFullWorkRect) - 8336usize];
    ["Offset of field: ImGuiContext::ViewportCreatedCount"]
        [::std::mem::offset_of!(ImGuiContext, ViewportCreatedCount) - 8352usize];
    ["Offset of field: ImGuiContext::PlatformWindowsCreatedCount"]
        [::std::mem::offset_of!(ImGuiContext, PlatformWindowsCreatedCount) - 8356usize];
    ["Offset of field: ImGuiContext::ViewportFocusedStampCount"]
        [::std::mem::offset_of!(ImGuiContext, ViewportFocusedStampCount) - 8360usize];
    ["Offset of field: ImGuiContext::NavCursorVisible"]
        [::std::mem::offset_of!(ImGuiContext, NavCursorVisible) - 8364usize];
    ["Offset of field: ImGuiContext::NavHighlightItemUnderNav"]
        [::std::mem::offset_of!(ImGuiContext, NavHighlightItemUnderNav) - 8365usize];
    ["Offset of field: ImGuiContext::NavMousePosDirty"]
        [::std::mem::offset_of!(ImGuiContext, NavMousePosDirty) - 8366usize];
    ["Offset of field: ImGuiContext::NavIdIsAlive"]
        [::std::mem::offset_of!(ImGuiContext, NavIdIsAlive) - 8367usize];
    ["Offset of field: ImGuiContext::NavId"]
        [::std::mem::offset_of!(ImGuiContext, NavId) - 8368usize];
    ["Offset of field: ImGuiContext::NavWindow"]
        [::std::mem::offset_of!(ImGuiContext, NavWindow) - 8376usize];
    ["Offset of field: ImGuiContext::NavFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, NavFocusScopeId) - 8384usize];
    ["Offset of field: ImGuiContext::NavLayer"]
        [::std::mem::offset_of!(ImGuiContext, NavLayer) - 8388usize];
    ["Offset of field: ImGuiContext::NavActivateId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateId) - 8392usize];
    ["Offset of field: ImGuiContext::NavActivateDownId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateDownId) - 8396usize];
    ["Offset of field: ImGuiContext::NavActivatePressedId"]
        [::std::mem::offset_of!(ImGuiContext, NavActivatePressedId) - 8400usize];
    ["Offset of field: ImGuiContext::NavActivateFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavActivateFlags) - 8404usize];
    ["Offset of field: ImGuiContext::NavFocusRoute"]
        [::std::mem::offset_of!(ImGuiContext, NavFocusRoute) - 8408usize];
    ["Offset of field: ImGuiContext::NavHighlightActivatedId"]
        [::std::mem::offset_of!(ImGuiContext, NavHighlightActivatedId) - 8424usize];
    ["Offset of field: ImGuiContext::NavHighlightActivatedTimer"]
        [::std::mem::offset_of!(ImGuiContext, NavHighlightActivatedTimer) - 8428usize];
    ["Offset of field: ImGuiContext::NavNextActivateId"]
        [::std::mem::offset_of!(ImGuiContext, NavNextActivateId) - 8432usize];
    ["Offset of field: ImGuiContext::NavNextActivateFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavNextActivateFlags) - 8436usize];
    ["Offset of field: ImGuiContext::NavInputSource"]
        [::std::mem::offset_of!(ImGuiContext, NavInputSource) - 8440usize];
    ["Offset of field: ImGuiContext::NavLastValidSelectionUserData"]
        [::std::mem::offset_of!(ImGuiContext, NavLastValidSelectionUserData) - 8448usize];
    ["Offset of field: ImGuiContext::NavCursorHideFrames"]
        [::std::mem::offset_of!(ImGuiContext, NavCursorHideFrames) - 8456usize];
    ["Offset of field: ImGuiContext::NavAnyRequest"]
        [::std::mem::offset_of!(ImGuiContext, NavAnyRequest) - 8457usize];
    ["Offset of field: ImGuiContext::NavInitRequest"]
        [::std::mem::offset_of!(ImGuiContext, NavInitRequest) - 8458usize];
    ["Offset of field: ImGuiContext::NavInitRequestFromMove"]
        [::std::mem::offset_of!(ImGuiContext, NavInitRequestFromMove) - 8459usize];
    ["Offset of field: ImGuiContext::NavInitResult"]
        [::std::mem::offset_of!(ImGuiContext, NavInitResult) - 8464usize];
    ["Offset of field: ImGuiContext::NavMoveSubmitted"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveSubmitted) - 8520usize];
    ["Offset of field: ImGuiContext::NavMoveScoringItems"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveScoringItems) - 8521usize];
    ["Offset of field: ImGuiContext::NavMoveForwardToNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveForwardToNextFrame) - 8522usize];
    ["Offset of field: ImGuiContext::NavMoveFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveFlags) - 8524usize];
    ["Offset of field: ImGuiContext::NavMoveScrollFlags"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveScrollFlags) - 8528usize];
    ["Offset of field: ImGuiContext::NavMoveKeyMods"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveKeyMods) - 8532usize];
    ["Offset of field: ImGuiContext::NavMoveDir"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveDir) - 8536usize];
    ["Offset of field: ImGuiContext::NavMoveDirForDebug"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveDirForDebug) - 8540usize];
    ["Offset of field: ImGuiContext::NavMoveClipDir"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveClipDir) - 8544usize];
    ["Offset of field: ImGuiContext::NavScoringRect"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringRect) - 8548usize];
    ["Offset of field: ImGuiContext::NavScoringNoClipRect"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringNoClipRect) - 8564usize];
    ["Offset of field: ImGuiContext::NavScoringDebugCount"]
        [::std::mem::offset_of!(ImGuiContext, NavScoringDebugCount) - 8580usize];
    ["Offset of field: ImGuiContext::NavTabbingDir"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingDir) - 8584usize];
    ["Offset of field: ImGuiContext::NavTabbingCounter"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingCounter) - 8588usize];
    ["Offset of field: ImGuiContext::NavMoveResultLocal"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultLocal) - 8592usize];
    ["Offset of field: ImGuiContext::NavMoveResultLocalVisible"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultLocalVisible) - 8648usize];
    ["Offset of field: ImGuiContext::NavMoveResultOther"]
        [::std::mem::offset_of!(ImGuiContext, NavMoveResultOther) - 8704usize];
    ["Offset of field: ImGuiContext::NavTabbingResultFirst"]
        [::std::mem::offset_of!(ImGuiContext, NavTabbingResultFirst) - 8760usize];
    ["Offset of field: ImGuiContext::NavJustMovedFromFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedFromFocusScopeId) - 8816usize];
    ["Offset of field: ImGuiContext::NavJustMovedToId"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToId) - 8820usize];
    ["Offset of field: ImGuiContext::NavJustMovedToFocusScopeId"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToFocusScopeId) - 8824usize];
    ["Offset of field: ImGuiContext::NavJustMovedToKeyMods"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToKeyMods) - 8828usize];
    ["Offset of field: ImGuiContext::NavJustMovedToIsTabbing"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToIsTabbing) - 8832usize];
    ["Offset of field: ImGuiContext::NavJustMovedToHasSelectionData"]
        [::std::mem::offset_of!(ImGuiContext, NavJustMovedToHasSelectionData) - 8833usize];
    ["Offset of field: ImGuiContext::ConfigNavWindowingKeyNext"]
        [::std::mem::offset_of!(ImGuiContext, ConfigNavWindowingKeyNext) - 8836usize];
    ["Offset of field: ImGuiContext::ConfigNavWindowingKeyPrev"]
        [::std::mem::offset_of!(ImGuiContext, ConfigNavWindowingKeyPrev) - 8840usize];
    ["Offset of field: ImGuiContext::NavWindowingTarget"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTarget) - 8848usize];
    ["Offset of field: ImGuiContext::NavWindowingTargetAnim"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTargetAnim) - 8856usize];
    ["Offset of field: ImGuiContext::NavWindowingListWindow"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingListWindow) - 8864usize];
    ["Offset of field: ImGuiContext::NavWindowingTimer"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingTimer) - 8872usize];
    ["Offset of field: ImGuiContext::NavWindowingHighlightAlpha"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingHighlightAlpha) - 8876usize];
    ["Offset of field: ImGuiContext::NavWindowingToggleLayer"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingToggleLayer) - 8880usize];
    ["Offset of field: ImGuiContext::NavWindowingToggleKey"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingToggleKey) - 8884usize];
    ["Offset of field: ImGuiContext::NavWindowingAccumDeltaPos"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingAccumDeltaPos) - 8888usize];
    ["Offset of field: ImGuiContext::NavWindowingAccumDeltaSize"]
        [::std::mem::offset_of!(ImGuiContext, NavWindowingAccumDeltaSize) - 8896usize];
    ["Offset of field: ImGuiContext::DimBgRatio"]
        [::std::mem::offset_of!(ImGuiContext, DimBgRatio) - 8904usize];
    ["Offset of field: ImGuiContext::DragDropActive"]
        [::std::mem::offset_of!(ImGuiContext, DragDropActive) - 8908usize];
    ["Offset of field: ImGuiContext::DragDropWithinSource"]
        [::std::mem::offset_of!(ImGuiContext, DragDropWithinSource) - 8909usize];
    ["Offset of field: ImGuiContext::DragDropWithinTarget"]
        [::std::mem::offset_of!(ImGuiContext, DragDropWithinTarget) - 8910usize];
    ["Offset of field: ImGuiContext::DragDropSourceFlags"]
        [::std::mem::offset_of!(ImGuiContext, DragDropSourceFlags) - 8912usize];
    ["Offset of field: ImGuiContext::DragDropSourceFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, DragDropSourceFrameCount) - 8916usize];
    ["Offset of field: ImGuiContext::DragDropMouseButton"]
        [::std::mem::offset_of!(ImGuiContext, DragDropMouseButton) - 8920usize];
    ["Offset of field: ImGuiContext::DragDropPayload"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayload) - 8928usize];
    ["Offset of field: ImGuiContext::DragDropTargetRect"]
        [::std::mem::offset_of!(ImGuiContext, DragDropTargetRect) - 8992usize];
    ["Offset of field: ImGuiContext::DragDropTargetClipRect"]
        [::std::mem::offset_of!(ImGuiContext, DragDropTargetClipRect) - 9008usize];
    ["Offset of field: ImGuiContext::DragDropTargetId"]
        [::std::mem::offset_of!(ImGuiContext, DragDropTargetId) - 9024usize];
    ["Offset of field: ImGuiContext::DragDropAcceptFlags"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptFlags) - 9028usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdCurrRectSurface"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdCurrRectSurface) - 9032usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdCurr"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdCurr) - 9036usize];
    ["Offset of field: ImGuiContext::DragDropAcceptIdPrev"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptIdPrev) - 9040usize];
    ["Offset of field: ImGuiContext::DragDropAcceptFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, DragDropAcceptFrameCount) - 9044usize];
    ["Offset of field: ImGuiContext::DragDropHoldJustPressedId"]
        [::std::mem::offset_of!(ImGuiContext, DragDropHoldJustPressedId) - 9048usize];
    ["Offset of field: ImGuiContext::DragDropPayloadBufHeap"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayloadBufHeap) - 9056usize];
    ["Offset of field: ImGuiContext::DragDropPayloadBufLocal"]
        [::std::mem::offset_of!(ImGuiContext, DragDropPayloadBufLocal) - 9072usize];
    ["Offset of field: ImGuiContext::ClipperTempDataStacked"]
        [::std::mem::offset_of!(ImGuiContext, ClipperTempDataStacked) - 9088usize];
    ["Offset of field: ImGuiContext::ClipperTempData"]
        [::std::mem::offset_of!(ImGuiContext, ClipperTempData) - 9096usize];
    ["Offset of field: ImGuiContext::CurrentTable"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTable) - 9112usize];
    ["Offset of field: ImGuiContext::DebugBreakInTable"]
        [::std::mem::offset_of!(ImGuiContext, DebugBreakInTable) - 9120usize];
    ["Offset of field: ImGuiContext::TablesTempDataStacked"]
        [::std::mem::offset_of!(ImGuiContext, TablesTempDataStacked) - 9124usize];
    ["Offset of field: ImGuiContext::TablesTempData"]
        [::std::mem::offset_of!(ImGuiContext, TablesTempData) - 9128usize];
    ["Offset of field: ImGuiContext::Tables"]
        [::std::mem::offset_of!(ImGuiContext, Tables) - 9144usize];
    ["Offset of field: ImGuiContext::TablesLastTimeActive"]
        [::std::mem::offset_of!(ImGuiContext, TablesLastTimeActive) - 9184usize];
    ["Offset of field: ImGuiContext::DrawChannelsTempMergeBuffer"]
        [::std::mem::offset_of!(ImGuiContext, DrawChannelsTempMergeBuffer) - 9200usize];
    ["Offset of field: ImGuiContext::CurrentTabBar"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTabBar) - 9216usize];
    ["Offset of field: ImGuiContext::TabBars"]
        [::std::mem::offset_of!(ImGuiContext, TabBars) - 9224usize];
    ["Offset of field: ImGuiContext::CurrentTabBarStack"]
        [::std::mem::offset_of!(ImGuiContext, CurrentTabBarStack) - 9264usize];
    ["Offset of field: ImGuiContext::ShrinkWidthBuffer"]
        [::std::mem::offset_of!(ImGuiContext, ShrinkWidthBuffer) - 9280usize];
    ["Offset of field: ImGuiContext::BoxSelectState"]
        [::std::mem::offset_of!(ImGuiContext, BoxSelectState) - 9296usize];
    ["Offset of field: ImGuiContext::CurrentMultiSelect"]
        [::std::mem::offset_of!(ImGuiContext, CurrentMultiSelect) - 9400usize];
    ["Offset of field: ImGuiContext::MultiSelectTempDataStacked"]
        [::std::mem::offset_of!(ImGuiContext, MultiSelectTempDataStacked) - 9408usize];
    ["Offset of field: ImGuiContext::MultiSelectTempData"]
        [::std::mem::offset_of!(ImGuiContext, MultiSelectTempData) - 9416usize];
    ["Offset of field: ImGuiContext::MultiSelectStorage"]
        [::std::mem::offset_of!(ImGuiContext, MultiSelectStorage) - 9432usize];
    ["Offset of field: ImGuiContext::HoverItemDelayId"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayId) - 9472usize];
    ["Offset of field: ImGuiContext::HoverItemDelayIdPreviousFrame"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayIdPreviousFrame) - 9476usize];
    ["Offset of field: ImGuiContext::HoverItemDelayTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayTimer) - 9480usize];
    ["Offset of field: ImGuiContext::HoverItemDelayClearTimer"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemDelayClearTimer) - 9484usize];
    ["Offset of field: ImGuiContext::HoverItemUnlockedStationaryId"]
        [::std::mem::offset_of!(ImGuiContext, HoverItemUnlockedStationaryId) - 9488usize];
    ["Offset of field: ImGuiContext::HoverWindowUnlockedStationaryId"]
        [::std::mem::offset_of!(ImGuiContext, HoverWindowUnlockedStationaryId) - 9492usize];
    ["Offset of field: ImGuiContext::MouseCursor"]
        [::std::mem::offset_of!(ImGuiContext, MouseCursor) - 9496usize];
    ["Offset of field: ImGuiContext::MouseStationaryTimer"]
        [::std::mem::offset_of!(ImGuiContext, MouseStationaryTimer) - 9500usize];
    ["Offset of field: ImGuiContext::MouseLastValidPos"]
        [::std::mem::offset_of!(ImGuiContext, MouseLastValidPos) - 9504usize];
    ["Offset of field: ImGuiContext::InputTextState"]
        [::std::mem::offset_of!(ImGuiContext, InputTextState) - 9512usize];
    ["Offset of field: ImGuiContext::InputTextDeactivatedState"]
        [::std::mem::offset_of!(ImGuiContext, InputTextDeactivatedState) - 9632usize];
    ["Offset of field: ImGuiContext::InputTextPasswordFont"]
        [::std::mem::offset_of!(ImGuiContext, InputTextPasswordFont) - 9656usize];
    ["Offset of field: ImGuiContext::TempInputId"]
        [::std::mem::offset_of!(ImGuiContext, TempInputId) - 9776usize];
    ["Offset of field: ImGuiContext::DataTypeZeroValue"]
        [::std::mem::offset_of!(ImGuiContext, DataTypeZeroValue) - 9780usize];
    ["Offset of field: ImGuiContext::BeginMenuDepth"]
        [::std::mem::offset_of!(ImGuiContext, BeginMenuDepth) - 9788usize];
    ["Offset of field: ImGuiContext::BeginComboDepth"]
        [::std::mem::offset_of!(ImGuiContext, BeginComboDepth) - 9792usize];
    ["Offset of field: ImGuiContext::ColorEditOptions"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditOptions) - 9796usize];
    ["Offset of field: ImGuiContext::ColorEditCurrentID"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditCurrentID) - 9800usize];
    ["Offset of field: ImGuiContext::ColorEditSavedID"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedID) - 9804usize];
    ["Offset of field: ImGuiContext::ColorEditSavedHue"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedHue) - 9808usize];
    ["Offset of field: ImGuiContext::ColorEditSavedSat"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedSat) - 9812usize];
    ["Offset of field: ImGuiContext::ColorEditSavedColor"]
        [::std::mem::offset_of!(ImGuiContext, ColorEditSavedColor) - 9816usize];
    ["Offset of field: ImGuiContext::ColorPickerRef"]
        [::std::mem::offset_of!(ImGuiContext, ColorPickerRef) - 9820usize];
    ["Offset of field: ImGuiContext::ComboPreviewData"]
        [::std::mem::offset_of!(ImGuiContext, ComboPreviewData) - 9836usize];
    ["Offset of field: ImGuiContext::WindowResizeBorderExpectedRect"]
        [::std::mem::offset_of!(ImGuiContext, WindowResizeBorderExpectedRect) - 9884usize];
    ["Offset of field: ImGuiContext::WindowResizeRelativeMode"]
        [::std::mem::offset_of!(ImGuiContext, WindowResizeRelativeMode) - 9900usize];
    ["Offset of field: ImGuiContext::ScrollbarSeekMode"]
        [::std::mem::offset_of!(ImGuiContext, ScrollbarSeekMode) - 9902usize];
    ["Offset of field: ImGuiContext::ScrollbarClickDeltaToGrabCenter"]
        [::std::mem::offset_of!(ImGuiContext, ScrollbarClickDeltaToGrabCenter) - 9904usize];
    ["Offset of field: ImGuiContext::SliderGrabClickOffset"]
        [::std::mem::offset_of!(ImGuiContext, SliderGrabClickOffset) - 9908usize];
    ["Offset of field: ImGuiContext::SliderCurrentAccum"]
        [::std::mem::offset_of!(ImGuiContext, SliderCurrentAccum) - 9912usize];
    ["Offset of field: ImGuiContext::SliderCurrentAccumDirty"]
        [::std::mem::offset_of!(ImGuiContext, SliderCurrentAccumDirty) - 9916usize];
    ["Offset of field: ImGuiContext::DragCurrentAccumDirty"]
        [::std::mem::offset_of!(ImGuiContext, DragCurrentAccumDirty) - 9917usize];
    ["Offset of field: ImGuiContext::DragCurrentAccum"]
        [::std::mem::offset_of!(ImGuiContext, DragCurrentAccum) - 9920usize];
    ["Offset of field: ImGuiContext::DragSpeedDefaultRatio"]
        [::std::mem::offset_of!(ImGuiContext, DragSpeedDefaultRatio) - 9924usize];
    ["Offset of field: ImGuiContext::DisabledAlphaBackup"]
        [::std::mem::offset_of!(ImGuiContext, DisabledAlphaBackup) - 9928usize];
    ["Offset of field: ImGuiContext::DisabledStackSize"]
        [::std::mem::offset_of!(ImGuiContext, DisabledStackSize) - 9932usize];
    ["Offset of field: ImGuiContext::TooltipOverrideCount"]
        [::std::mem::offset_of!(ImGuiContext, TooltipOverrideCount) - 9934usize];
    ["Offset of field: ImGuiContext::TooltipPreviousWindow"]
        [::std::mem::offset_of!(ImGuiContext, TooltipPreviousWindow) - 9936usize];
    ["Offset of field: ImGuiContext::ClipboardHandlerData"]
        [::std::mem::offset_of!(ImGuiContext, ClipboardHandlerData) - 9944usize];
    ["Offset of field: ImGuiContext::MenusIdSubmittedThisFrame"]
        [::std::mem::offset_of!(ImGuiContext, MenusIdSubmittedThisFrame) - 9960usize];
    ["Offset of field: ImGuiContext::TypingSelectState"]
        [::std::mem::offset_of!(ImGuiContext, TypingSelectState) - 9976usize];
    ["Offset of field: ImGuiContext::PlatformImeData"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeData) - 10080usize];
    ["Offset of field: ImGuiContext::PlatformImeDataPrev"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeDataPrev) - 10096usize];
    ["Offset of field: ImGuiContext::PlatformImeViewport"]
        [::std::mem::offset_of!(ImGuiContext, PlatformImeViewport) - 10112usize];
    ["Offset of field: ImGuiContext::DockContext"]
        [::std::mem::offset_of!(ImGuiContext, DockContext) - 10120usize];
    ["Offset of field: ImGuiContext::DockNodeWindowMenuHandler"]
        [::std::mem::offset_of!(ImGuiContext, DockNodeWindowMenuHandler) - 10176usize];
    ["Offset of field: ImGuiContext::SettingsLoaded"]
        [::std::mem::offset_of!(ImGuiContext, SettingsLoaded) - 10184usize];
    ["Offset of field: ImGuiContext::SettingsDirtyTimer"]
        [::std::mem::offset_of!(ImGuiContext, SettingsDirtyTimer) - 10188usize];
    ["Offset of field: ImGuiContext::SettingsIniData"]
        [::std::mem::offset_of!(ImGuiContext, SettingsIniData) - 10192usize];
    ["Offset of field: ImGuiContext::SettingsHandlers"]
        [::std::mem::offset_of!(ImGuiContext, SettingsHandlers) - 10208usize];
    ["Offset of field: ImGuiContext::SettingsWindows"]
        [::std::mem::offset_of!(ImGuiContext, SettingsWindows) - 10224usize];
    ["Offset of field: ImGuiContext::SettingsTables"]
        [::std::mem::offset_of!(ImGuiContext, SettingsTables) - 10240usize];
    ["Offset of field: ImGuiContext::Hooks"]
        [::std::mem::offset_of!(ImGuiContext, Hooks) - 10256usize];
    ["Offset of field: ImGuiContext::HookIdNext"]
        [::std::mem::offset_of!(ImGuiContext, HookIdNext) - 10272usize];
    ["Offset of field: ImGuiContext::LocalizationTable"]
        [::std::mem::offset_of!(ImGuiContext, LocalizationTable) - 10280usize];
    ["Offset of field: ImGuiContext::LogEnabled"]
        [::std::mem::offset_of!(ImGuiContext, LogEnabled) - 10384usize];
    ["Offset of field: ImGuiContext::LogFlags"]
        [::std::mem::offset_of!(ImGuiContext, LogFlags) - 10388usize];
    ["Offset of field: ImGuiContext::LogWindow"]
        [::std::mem::offset_of!(ImGuiContext, LogWindow) - 10392usize];
    ["Offset of field: ImGuiContext::LogFile"]
        [::std::mem::offset_of!(ImGuiContext, LogFile) - 10400usize];
    ["Offset of field: ImGuiContext::LogBuffer"]
        [::std::mem::offset_of!(ImGuiContext, LogBuffer) - 10408usize];
    ["Offset of field: ImGuiContext::LogNextPrefix"]
        [::std::mem::offset_of!(ImGuiContext, LogNextPrefix) - 10424usize];
    ["Offset of field: ImGuiContext::LogNextSuffix"]
        [::std::mem::offset_of!(ImGuiContext, LogNextSuffix) - 10432usize];
    ["Offset of field: ImGuiContext::LogLinePosY"]
        [::std::mem::offset_of!(ImGuiContext, LogLinePosY) - 10440usize];
    ["Offset of field: ImGuiContext::LogLineFirstItem"]
        [::std::mem::offset_of!(ImGuiContext, LogLineFirstItem) - 10444usize];
    ["Offset of field: ImGuiContext::LogDepthRef"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthRef) - 10448usize];
    ["Offset of field: ImGuiContext::LogDepthToExpand"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthToExpand) - 10452usize];
    ["Offset of field: ImGuiContext::LogDepthToExpandDefault"]
        [::std::mem::offset_of!(ImGuiContext, LogDepthToExpandDefault) - 10456usize];
    ["Offset of field: ImGuiContext::ErrorCallback"]
        [::std::mem::offset_of!(ImGuiContext, ErrorCallback) - 10464usize];
    ["Offset of field: ImGuiContext::ErrorCallbackUserData"]
        [::std::mem::offset_of!(ImGuiContext, ErrorCallbackUserData) - 10472usize];
    ["Offset of field: ImGuiContext::ErrorTooltipLockedPos"]
        [::std::mem::offset_of!(ImGuiContext, ErrorTooltipLockedPos) - 10480usize];
    ["Offset of field: ImGuiContext::ErrorFirst"]
        [::std::mem::offset_of!(ImGuiContext, ErrorFirst) - 10488usize];
    ["Offset of field: ImGuiContext::ErrorCountCurrentFrame"]
        [::std::mem::offset_of!(ImGuiContext, ErrorCountCurrentFrame) - 10492usize];
    ["Offset of field: ImGuiContext::StackSizesInNewFrame"]
        [::std::mem::offset_of!(ImGuiContext, StackSizesInNewFrame) - 10496usize];
    ["Offset of field: ImGuiContext::StackSizesInBeginForCurrentWindow"]
        [::std::mem::offset_of!(ImGuiContext, StackSizesInBeginForCurrentWindow) - 10520usize];
    ["Offset of field: ImGuiContext::DebugDrawIdConflictsCount"]
        [::std::mem::offset_of!(ImGuiContext, DebugDrawIdConflictsCount) - 10528usize];
    ["Offset of field: ImGuiContext::DebugLogFlags"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogFlags) - 10532usize];
    ["Offset of field: ImGuiContext::DebugLogBuf"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogBuf) - 10536usize];
    ["Offset of field: ImGuiContext::DebugLogIndex"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogIndex) - 10552usize];
    ["Offset of field: ImGuiContext::DebugLogSkippedErrors"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogSkippedErrors) - 10576usize];
    ["Offset of field: ImGuiContext::DebugLogAutoDisableFlags"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogAutoDisableFlags) - 10580usize];
    ["Offset of field: ImGuiContext::DebugLogAutoDisableFrames"]
        [::std::mem::offset_of!(ImGuiContext, DebugLogAutoDisableFrames) - 10584usize];
    ["Offset of field: ImGuiContext::DebugLocateFrames"]
        [::std::mem::offset_of!(ImGuiContext, DebugLocateFrames) - 10585usize];
    ["Offset of field: ImGuiContext::DebugBreakInLocateId"]
        [::std::mem::offset_of!(ImGuiContext, DebugBreakInLocateId) - 10586usize];
    ["Offset of field: ImGuiContext::DebugBreakKeyChord"]
        [::std::mem::offset_of!(ImGuiContext, DebugBreakKeyChord) - 10588usize];
    ["Offset of field: ImGuiContext::DebugBeginReturnValueCullDepth"]
        [::std::mem::offset_of!(ImGuiContext, DebugBeginReturnValueCullDepth) - 10592usize];
    ["Offset of field: ImGuiContext::DebugItemPickerActive"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerActive) - 10593usize];
    ["Offset of field: ImGuiContext::DebugItemPickerMouseButton"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerMouseButton) - 10594usize];
    ["Offset of field: ImGuiContext::DebugItemPickerBreakId"]
        [::std::mem::offset_of!(ImGuiContext, DebugItemPickerBreakId) - 10596usize];
    ["Offset of field: ImGuiContext::DebugFlashStyleColorTime"]
        [::std::mem::offset_of!(ImGuiContext, DebugFlashStyleColorTime) - 10600usize];
    ["Offset of field: ImGuiContext::DebugFlashStyleColorBackup"]
        [::std::mem::offset_of!(ImGuiContext, DebugFlashStyleColorBackup) - 10604usize];
    ["Offset of field: ImGuiContext::DebugMetricsConfig"]
        [::std::mem::offset_of!(ImGuiContext, DebugMetricsConfig) - 10620usize];
    ["Offset of field: ImGuiContext::DebugIDStackTool"]
        [::std::mem::offset_of!(ImGuiContext, DebugIDStackTool) - 10648usize];
    ["Offset of field: ImGuiContext::DebugAllocInfo"]
        [::std::mem::offset_of!(ImGuiContext, DebugAllocInfo) - 10688usize];
    ["Offset of field: ImGuiContext::DebugHoveredDockNode"]
        [::std::mem::offset_of!(ImGuiContext, DebugHoveredDockNode) - 10752usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrame"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrame) - 10760usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameIdx"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameIdx) - 11000usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameCount"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameCount) - 11004usize];
    ["Offset of field: ImGuiContext::FramerateSecPerFrameAccum"]
        [::std::mem::offset_of!(ImGuiContext, FramerateSecPerFrameAccum) - 11008usize];
    ["Offset of field: ImGuiContext::WantCaptureMouseNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantCaptureMouseNextFrame) - 11012usize];
    ["Offset of field: ImGuiContext::WantCaptureKeyboardNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantCaptureKeyboardNextFrame) - 11016usize];
    ["Offset of field: ImGuiContext::WantTextInputNextFrame"]
        [::std::mem::offset_of!(ImGuiContext, WantTextInputNextFrame) - 11020usize];
    ["Offset of field: ImGuiContext::TempBuffer"]
        [::std::mem::offset_of!(ImGuiContext, TempBuffer) - 11024usize];
    ["Offset of field: ImGuiContext::TempKeychordName"]
        [::std::mem::offset_of!(ImGuiContext, TempKeychordName) - 11040usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN12ImGuiContextC1EP11ImFontAtlas"]
    pub fn ImGuiContext_ImGuiContext(this: *mut ImGuiContext, shared_font_atlas: *mut ImFontAtlas);
}
impl ImGuiContext {
    #[inline]
    pub fn ActiveIdMouseButton(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ActiveIdMouseButton(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ActiveIdMouseButton_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ActiveIdMouseButton_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ActiveIdMouseButton: ::std::os::raw::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let ActiveIdMouseButton: u32 = unsafe { ::std::mem::transmute(ActiveIdMouseButton) };
            ActiveIdMouseButton as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn new(shared_font_atlas: *mut ImFontAtlas) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiContext_ImGuiContext(__bindgen_tmp.as_mut_ptr(), shared_font_atlas);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub IsSetPos: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavIsScrollPushableX: bool,
    pub NavHideHighlightOneFrame: bool,
    pub NavWindowHasScrollY: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeHasStackDataDepthMask: ImU32,
    pub ChildWindows: ImVector<*mut ImGuiWindow>,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ModalDimBgColor: ImU32,
    pub WindowItemStatusFlags: ImGuiItemStatusFlags,
    pub ChildItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector<f32>,
    pub TextWrapPosStack: ImVector<f32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindowTempData"][::std::mem::size_of::<ImGuiWindowTempData>() - 264usize];
    ["Alignment of ImGuiWindowTempData"][::std::mem::align_of::<ImGuiWindowTempData>() - 8usize];
    ["Offset of field: ImGuiWindowTempData::CursorPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorPos) - 0usize];
    ["Offset of field: ImGuiWindowTempData::CursorPosPrevLine"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorPosPrevLine) - 8usize];
    ["Offset of field: ImGuiWindowTempData::CursorStartPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorStartPos) - 16usize];
    ["Offset of field: ImGuiWindowTempData::CursorMaxPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorMaxPos) - 24usize];
    ["Offset of field: ImGuiWindowTempData::IdealMaxPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IdealMaxPos) - 32usize];
    ["Offset of field: ImGuiWindowTempData::CurrLineSize"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrLineSize) - 40usize];
    ["Offset of field: ImGuiWindowTempData::PrevLineSize"]
        [::std::mem::offset_of!(ImGuiWindowTempData, PrevLineSize) - 48usize];
    ["Offset of field: ImGuiWindowTempData::CurrLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrLineTextBaseOffset) - 56usize];
    ["Offset of field: ImGuiWindowTempData::PrevLineTextBaseOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, PrevLineTextBaseOffset) - 60usize];
    ["Offset of field: ImGuiWindowTempData::IsSameLine"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IsSameLine) - 64usize];
    ["Offset of field: ImGuiWindowTempData::IsSetPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, IsSetPos) - 65usize];
    ["Offset of field: ImGuiWindowTempData::Indent"]
        [::std::mem::offset_of!(ImGuiWindowTempData, Indent) - 68usize];
    ["Offset of field: ImGuiWindowTempData::ColumnsOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ColumnsOffset) - 72usize];
    ["Offset of field: ImGuiWindowTempData::GroupOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, GroupOffset) - 76usize];
    ["Offset of field: ImGuiWindowTempData::CursorStartPosLossyness"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CursorStartPosLossyness) - 80usize];
    ["Offset of field: ImGuiWindowTempData::NavLayerCurrent"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayerCurrent) - 88usize];
    ["Offset of field: ImGuiWindowTempData::NavLayersActiveMask"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayersActiveMask) - 92usize];
    ["Offset of field: ImGuiWindowTempData::NavLayersActiveMaskNext"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavLayersActiveMaskNext) - 94usize];
    ["Offset of field: ImGuiWindowTempData::NavIsScrollPushableX"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavIsScrollPushableX) - 96usize];
    ["Offset of field: ImGuiWindowTempData::NavHideHighlightOneFrame"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavHideHighlightOneFrame) - 97usize];
    ["Offset of field: ImGuiWindowTempData::NavWindowHasScrollY"]
        [::std::mem::offset_of!(ImGuiWindowTempData, NavWindowHasScrollY) - 98usize];
    ["Offset of field: ImGuiWindowTempData::MenuBarAppending"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuBarAppending) - 99usize];
    ["Offset of field: ImGuiWindowTempData::MenuBarOffset"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuBarOffset) - 100usize];
    ["Offset of field: ImGuiWindowTempData::MenuColumns"]
        [::std::mem::offset_of!(ImGuiWindowTempData, MenuColumns) - 108usize];
    ["Offset of field: ImGuiWindowTempData::TreeDepth"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TreeDepth) - 136usize];
    ["Offset of field: ImGuiWindowTempData::TreeHasStackDataDepthMask"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TreeHasStackDataDepthMask) - 140usize];
    ["Offset of field: ImGuiWindowTempData::ChildWindows"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ChildWindows) - 144usize];
    ["Offset of field: ImGuiWindowTempData::StateStorage"]
        [::std::mem::offset_of!(ImGuiWindowTempData, StateStorage) - 160usize];
    ["Offset of field: ImGuiWindowTempData::CurrentColumns"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrentColumns) - 168usize];
    ["Offset of field: ImGuiWindowTempData::CurrentTableIdx"]
        [::std::mem::offset_of!(ImGuiWindowTempData, CurrentTableIdx) - 176usize];
    ["Offset of field: ImGuiWindowTempData::LayoutType"]
        [::std::mem::offset_of!(ImGuiWindowTempData, LayoutType) - 180usize];
    ["Offset of field: ImGuiWindowTempData::ParentLayoutType"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ParentLayoutType) - 184usize];
    ["Offset of field: ImGuiWindowTempData::ModalDimBgColor"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ModalDimBgColor) - 188usize];
    ["Offset of field: ImGuiWindowTempData::WindowItemStatusFlags"]
        [::std::mem::offset_of!(ImGuiWindowTempData, WindowItemStatusFlags) - 192usize];
    ["Offset of field: ImGuiWindowTempData::ChildItemStatusFlags"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ChildItemStatusFlags) - 196usize];
    ["Offset of field: ImGuiWindowTempData::DockTabItemStatusFlags"]
        [::std::mem::offset_of!(ImGuiWindowTempData, DockTabItemStatusFlags) - 200usize];
    ["Offset of field: ImGuiWindowTempData::DockTabItemRect"]
        [::std::mem::offset_of!(ImGuiWindowTempData, DockTabItemRect) - 204usize];
    ["Offset of field: ImGuiWindowTempData::ItemWidth"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ItemWidth) - 220usize];
    ["Offset of field: ImGuiWindowTempData::TextWrapPos"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TextWrapPos) - 224usize];
    ["Offset of field: ImGuiWindowTempData::ItemWidthStack"]
        [::std::mem::offset_of!(ImGuiWindowTempData, ItemWidthStack) - 232usize];
    ["Offset of field: ImGuiWindowTempData::TextWrapPosStack"]
        [::std::mem::offset_of!(ImGuiWindowTempData, TextWrapPosStack) - 248usize];
};
#[repr(C)]
pub struct ImGuiWindow {
    pub Ctx: *mut ImGuiContext,
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub ChildFlags: ImGuiChildFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub TitleBarHeight: f32,
    pub MenuBarHeight: f32,
    pub DecoOuterSizeX1: f32,
    pub DecoOuterSizeY1: f32,
    pub DecoOuterSizeX2: f32,
    pub DecoOuterSizeY2: f32,
    pub DecoInnerSizeX1: f32,
    pub DecoInnerSizeY1: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub PopupId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub SkipRefresh: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHovered: ::std::os::raw::c_schar,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginCountPreviousFrame: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector<ImGuiID>,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector<ImGuiOldColumns>,
    pub FontWindowScale: f32,
    pub FontWindowScaleParents: f32,
    pub FontDpiScale: f32,
    pub FontRefSize: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub ParentWindowForFocusRoute: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub NavPreferredScoringPosRel: [ImVec2; 2usize],
    pub NavRootFocusScopeId: ImGuiID,
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiWindow"][::std::mem::size_of::<ImGuiWindow>() - 1208usize];
    ["Alignment of ImGuiWindow"][::std::mem::align_of::<ImGuiWindow>() - 8usize];
    ["Offset of field: ImGuiWindow::Ctx"][::std::mem::offset_of!(ImGuiWindow, Ctx) - 0usize];
    ["Offset of field: ImGuiWindow::Name"][::std::mem::offset_of!(ImGuiWindow, Name) - 8usize];
    ["Offset of field: ImGuiWindow::ID"][::std::mem::offset_of!(ImGuiWindow, ID) - 16usize];
    ["Offset of field: ImGuiWindow::Flags"][::std::mem::offset_of!(ImGuiWindow, Flags) - 20usize];
    ["Offset of field: ImGuiWindow::FlagsPreviousFrame"]
        [::std::mem::offset_of!(ImGuiWindow, FlagsPreviousFrame) - 24usize];
    ["Offset of field: ImGuiWindow::ChildFlags"]
        [::std::mem::offset_of!(ImGuiWindow, ChildFlags) - 28usize];
    ["Offset of field: ImGuiWindow::WindowClass"]
        [::std::mem::offset_of!(ImGuiWindow, WindowClass) - 32usize];
    ["Offset of field: ImGuiWindow::Viewport"]
        [::std::mem::offset_of!(ImGuiWindow, Viewport) - 64usize];
    ["Offset of field: ImGuiWindow::ViewportId"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportId) - 72usize];
    ["Offset of field: ImGuiWindow::ViewportPos"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportPos) - 76usize];
    ["Offset of field: ImGuiWindow::ViewportAllowPlatformMonitorExtend"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportAllowPlatformMonitorExtend) - 84usize];
    ["Offset of field: ImGuiWindow::Pos"][::std::mem::offset_of!(ImGuiWindow, Pos) - 88usize];
    ["Offset of field: ImGuiWindow::Size"][::std::mem::offset_of!(ImGuiWindow, Size) - 96usize];
    ["Offset of field: ImGuiWindow::SizeFull"]
        [::std::mem::offset_of!(ImGuiWindow, SizeFull) - 104usize];
    ["Offset of field: ImGuiWindow::ContentSize"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSize) - 112usize];
    ["Offset of field: ImGuiWindow::ContentSizeIdeal"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSizeIdeal) - 120usize];
    ["Offset of field: ImGuiWindow::ContentSizeExplicit"]
        [::std::mem::offset_of!(ImGuiWindow, ContentSizeExplicit) - 128usize];
    ["Offset of field: ImGuiWindow::WindowPadding"]
        [::std::mem::offset_of!(ImGuiWindow, WindowPadding) - 136usize];
    ["Offset of field: ImGuiWindow::WindowRounding"]
        [::std::mem::offset_of!(ImGuiWindow, WindowRounding) - 144usize];
    ["Offset of field: ImGuiWindow::WindowBorderSize"]
        [::std::mem::offset_of!(ImGuiWindow, WindowBorderSize) - 148usize];
    ["Offset of field: ImGuiWindow::TitleBarHeight"]
        [::std::mem::offset_of!(ImGuiWindow, TitleBarHeight) - 152usize];
    ["Offset of field: ImGuiWindow::MenuBarHeight"]
        [::std::mem::offset_of!(ImGuiWindow, MenuBarHeight) - 156usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeX1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeX1) - 160usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeY1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeY1) - 164usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeX2"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeX2) - 168usize];
    ["Offset of field: ImGuiWindow::DecoOuterSizeY2"]
        [::std::mem::offset_of!(ImGuiWindow, DecoOuterSizeY2) - 172usize];
    ["Offset of field: ImGuiWindow::DecoInnerSizeX1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoInnerSizeX1) - 176usize];
    ["Offset of field: ImGuiWindow::DecoInnerSizeY1"]
        [::std::mem::offset_of!(ImGuiWindow, DecoInnerSizeY1) - 180usize];
    ["Offset of field: ImGuiWindow::NameBufLen"]
        [::std::mem::offset_of!(ImGuiWindow, NameBufLen) - 184usize];
    ["Offset of field: ImGuiWindow::MoveId"]
        [::std::mem::offset_of!(ImGuiWindow, MoveId) - 188usize];
    ["Offset of field: ImGuiWindow::TabId"][::std::mem::offset_of!(ImGuiWindow, TabId) - 192usize];
    ["Offset of field: ImGuiWindow::ChildId"]
        [::std::mem::offset_of!(ImGuiWindow, ChildId) - 196usize];
    ["Offset of field: ImGuiWindow::PopupId"]
        [::std::mem::offset_of!(ImGuiWindow, PopupId) - 200usize];
    ["Offset of field: ImGuiWindow::Scroll"]
        [::std::mem::offset_of!(ImGuiWindow, Scroll) - 204usize];
    ["Offset of field: ImGuiWindow::ScrollMax"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollMax) - 212usize];
    ["Offset of field: ImGuiWindow::ScrollTarget"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTarget) - 220usize];
    ["Offset of field: ImGuiWindow::ScrollTargetCenterRatio"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTargetCenterRatio) - 228usize];
    ["Offset of field: ImGuiWindow::ScrollTargetEdgeSnapDist"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollTargetEdgeSnapDist) - 236usize];
    ["Offset of field: ImGuiWindow::ScrollbarSizes"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarSizes) - 244usize];
    ["Offset of field: ImGuiWindow::ScrollbarX"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarX) - 252usize];
    ["Offset of field: ImGuiWindow::ScrollbarY"]
        [::std::mem::offset_of!(ImGuiWindow, ScrollbarY) - 253usize];
    ["Offset of field: ImGuiWindow::ViewportOwned"]
        [::std::mem::offset_of!(ImGuiWindow, ViewportOwned) - 254usize];
    ["Offset of field: ImGuiWindow::Active"]
        [::std::mem::offset_of!(ImGuiWindow, Active) - 255usize];
    ["Offset of field: ImGuiWindow::WasActive"]
        [::std::mem::offset_of!(ImGuiWindow, WasActive) - 256usize];
    ["Offset of field: ImGuiWindow::WriteAccessed"]
        [::std::mem::offset_of!(ImGuiWindow, WriteAccessed) - 257usize];
    ["Offset of field: ImGuiWindow::Collapsed"]
        [::std::mem::offset_of!(ImGuiWindow, Collapsed) - 258usize];
    ["Offset of field: ImGuiWindow::WantCollapseToggle"]
        [::std::mem::offset_of!(ImGuiWindow, WantCollapseToggle) - 259usize];
    ["Offset of field: ImGuiWindow::SkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, SkipItems) - 260usize];
    ["Offset of field: ImGuiWindow::SkipRefresh"]
        [::std::mem::offset_of!(ImGuiWindow, SkipRefresh) - 261usize];
    ["Offset of field: ImGuiWindow::Appearing"]
        [::std::mem::offset_of!(ImGuiWindow, Appearing) - 262usize];
    ["Offset of field: ImGuiWindow::Hidden"]
        [::std::mem::offset_of!(ImGuiWindow, Hidden) - 263usize];
    ["Offset of field: ImGuiWindow::IsFallbackWindow"]
        [::std::mem::offset_of!(ImGuiWindow, IsFallbackWindow) - 264usize];
    ["Offset of field: ImGuiWindow::IsExplicitChild"]
        [::std::mem::offset_of!(ImGuiWindow, IsExplicitChild) - 265usize];
    ["Offset of field: ImGuiWindow::HasCloseButton"]
        [::std::mem::offset_of!(ImGuiWindow, HasCloseButton) - 266usize];
    ["Offset of field: ImGuiWindow::ResizeBorderHovered"]
        [::std::mem::offset_of!(ImGuiWindow, ResizeBorderHovered) - 267usize];
    ["Offset of field: ImGuiWindow::ResizeBorderHeld"]
        [::std::mem::offset_of!(ImGuiWindow, ResizeBorderHeld) - 268usize];
    ["Offset of field: ImGuiWindow::BeginCount"]
        [::std::mem::offset_of!(ImGuiWindow, BeginCount) - 270usize];
    ["Offset of field: ImGuiWindow::BeginCountPreviousFrame"]
        [::std::mem::offset_of!(ImGuiWindow, BeginCountPreviousFrame) - 272usize];
    ["Offset of field: ImGuiWindow::BeginOrderWithinParent"]
        [::std::mem::offset_of!(ImGuiWindow, BeginOrderWithinParent) - 274usize];
    ["Offset of field: ImGuiWindow::BeginOrderWithinContext"]
        [::std::mem::offset_of!(ImGuiWindow, BeginOrderWithinContext) - 276usize];
    ["Offset of field: ImGuiWindow::FocusOrder"]
        [::std::mem::offset_of!(ImGuiWindow, FocusOrder) - 278usize];
    ["Offset of field: ImGuiWindow::AutoFitFramesX"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitFramesX) - 280usize];
    ["Offset of field: ImGuiWindow::AutoFitFramesY"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitFramesY) - 281usize];
    ["Offset of field: ImGuiWindow::AutoFitOnlyGrows"]
        [::std::mem::offset_of!(ImGuiWindow, AutoFitOnlyGrows) - 282usize];
    ["Offset of field: ImGuiWindow::AutoPosLastDirection"]
        [::std::mem::offset_of!(ImGuiWindow, AutoPosLastDirection) - 284usize];
    ["Offset of field: ImGuiWindow::HiddenFramesCanSkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesCanSkipItems) - 288usize];
    ["Offset of field: ImGuiWindow::HiddenFramesCannotSkipItems"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesCannotSkipItems) - 289usize];
    ["Offset of field: ImGuiWindow::HiddenFramesForRenderOnly"]
        [::std::mem::offset_of!(ImGuiWindow, HiddenFramesForRenderOnly) - 290usize];
    ["Offset of field: ImGuiWindow::DisableInputsFrames"]
        [::std::mem::offset_of!(ImGuiWindow, DisableInputsFrames) - 291usize];
    ["Offset of field: ImGuiWindow::SetWindowPosVal"]
        [::std::mem::offset_of!(ImGuiWindow, SetWindowPosVal) - 296usize];
    ["Offset of field: ImGuiWindow::SetWindowPosPivot"]
        [::std::mem::offset_of!(ImGuiWindow, SetWindowPosPivot) - 304usize];
    ["Offset of field: ImGuiWindow::IDStack"]
        [::std::mem::offset_of!(ImGuiWindow, IDStack) - 312usize];
    ["Offset of field: ImGuiWindow::DC"][::std::mem::offset_of!(ImGuiWindow, DC) - 328usize];
    ["Offset of field: ImGuiWindow::OuterRectClipped"]
        [::std::mem::offset_of!(ImGuiWindow, OuterRectClipped) - 592usize];
    ["Offset of field: ImGuiWindow::InnerRect"]
        [::std::mem::offset_of!(ImGuiWindow, InnerRect) - 608usize];
    ["Offset of field: ImGuiWindow::InnerClipRect"]
        [::std::mem::offset_of!(ImGuiWindow, InnerClipRect) - 624usize];
    ["Offset of field: ImGuiWindow::WorkRect"]
        [::std::mem::offset_of!(ImGuiWindow, WorkRect) - 640usize];
    ["Offset of field: ImGuiWindow::ParentWorkRect"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWorkRect) - 656usize];
    ["Offset of field: ImGuiWindow::ClipRect"]
        [::std::mem::offset_of!(ImGuiWindow, ClipRect) - 672usize];
    ["Offset of field: ImGuiWindow::ContentRegionRect"]
        [::std::mem::offset_of!(ImGuiWindow, ContentRegionRect) - 688usize];
    ["Offset of field: ImGuiWindow::HitTestHoleSize"]
        [::std::mem::offset_of!(ImGuiWindow, HitTestHoleSize) - 704usize];
    ["Offset of field: ImGuiWindow::HitTestHoleOffset"]
        [::std::mem::offset_of!(ImGuiWindow, HitTestHoleOffset) - 708usize];
    ["Offset of field: ImGuiWindow::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiWindow, LastFrameActive) - 712usize];
    ["Offset of field: ImGuiWindow::LastFrameJustFocused"]
        [::std::mem::offset_of!(ImGuiWindow, LastFrameJustFocused) - 716usize];
    ["Offset of field: ImGuiWindow::LastTimeActive"]
        [::std::mem::offset_of!(ImGuiWindow, LastTimeActive) - 720usize];
    ["Offset of field: ImGuiWindow::ItemWidthDefault"]
        [::std::mem::offset_of!(ImGuiWindow, ItemWidthDefault) - 724usize];
    ["Offset of field: ImGuiWindow::StateStorage"]
        [::std::mem::offset_of!(ImGuiWindow, StateStorage) - 728usize];
    ["Offset of field: ImGuiWindow::ColumnsStorage"]
        [::std::mem::offset_of!(ImGuiWindow, ColumnsStorage) - 744usize];
    ["Offset of field: ImGuiWindow::FontWindowScale"]
        [::std::mem::offset_of!(ImGuiWindow, FontWindowScale) - 760usize];
    ["Offset of field: ImGuiWindow::FontWindowScaleParents"]
        [::std::mem::offset_of!(ImGuiWindow, FontWindowScaleParents) - 764usize];
    ["Offset of field: ImGuiWindow::FontDpiScale"]
        [::std::mem::offset_of!(ImGuiWindow, FontDpiScale) - 768usize];
    ["Offset of field: ImGuiWindow::FontRefSize"]
        [::std::mem::offset_of!(ImGuiWindow, FontRefSize) - 772usize];
    ["Offset of field: ImGuiWindow::SettingsOffset"]
        [::std::mem::offset_of!(ImGuiWindow, SettingsOffset) - 776usize];
    ["Offset of field: ImGuiWindow::DrawList"]
        [::std::mem::offset_of!(ImGuiWindow, DrawList) - 784usize];
    ["Offset of field: ImGuiWindow::DrawListInst"]
        [::std::mem::offset_of!(ImGuiWindow, DrawListInst) - 792usize];
    ["Offset of field: ImGuiWindow::ParentWindow"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWindow) - 1008usize];
    ["Offset of field: ImGuiWindow::ParentWindowInBeginStack"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWindowInBeginStack) - 1016usize];
    ["Offset of field: ImGuiWindow::RootWindow"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindow) - 1024usize];
    ["Offset of field: ImGuiWindow::RootWindowPopupTree"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowPopupTree) - 1032usize];
    ["Offset of field: ImGuiWindow::RootWindowDockTree"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowDockTree) - 1040usize];
    ["Offset of field: ImGuiWindow::RootWindowForTitleBarHighlight"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowForTitleBarHighlight) - 1048usize];
    ["Offset of field: ImGuiWindow::RootWindowForNav"]
        [::std::mem::offset_of!(ImGuiWindow, RootWindowForNav) - 1056usize];
    ["Offset of field: ImGuiWindow::ParentWindowForFocusRoute"]
        [::std::mem::offset_of!(ImGuiWindow, ParentWindowForFocusRoute) - 1064usize];
    ["Offset of field: ImGuiWindow::NavLastChildNavWindow"]
        [::std::mem::offset_of!(ImGuiWindow, NavLastChildNavWindow) - 1072usize];
    ["Offset of field: ImGuiWindow::NavLastIds"]
        [::std::mem::offset_of!(ImGuiWindow, NavLastIds) - 1080usize];
    ["Offset of field: ImGuiWindow::NavRectRel"]
        [::std::mem::offset_of!(ImGuiWindow, NavRectRel) - 1088usize];
    ["Offset of field: ImGuiWindow::NavPreferredScoringPosRel"]
        [::std::mem::offset_of!(ImGuiWindow, NavPreferredScoringPosRel) - 1120usize];
    ["Offset of field: ImGuiWindow::NavRootFocusScopeId"]
        [::std::mem::offset_of!(ImGuiWindow, NavRootFocusScopeId) - 1136usize];
    ["Offset of field: ImGuiWindow::MemoryDrawListIdxCapacity"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryDrawListIdxCapacity) - 1140usize];
    ["Offset of field: ImGuiWindow::MemoryDrawListVtxCapacity"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryDrawListVtxCapacity) - 1144usize];
    ["Offset of field: ImGuiWindow::MemoryCompacted"]
        [::std::mem::offset_of!(ImGuiWindow, MemoryCompacted) - 1148usize];
    ["Offset of field: ImGuiWindow::DockOrder"]
        [::std::mem::offset_of!(ImGuiWindow, DockOrder) - 1150usize];
    ["Offset of field: ImGuiWindow::DockStyle"]
        [::std::mem::offset_of!(ImGuiWindow, DockStyle) - 1152usize];
    ["Offset of field: ImGuiWindow::DockNode"]
        [::std::mem::offset_of!(ImGuiWindow, DockNode) - 1184usize];
    ["Offset of field: ImGuiWindow::DockNodeAsHost"]
        [::std::mem::offset_of!(ImGuiWindow, DockNodeAsHost) - 1192usize];
    ["Offset of field: ImGuiWindow::DockId"]
        [::std::mem::offset_of!(ImGuiWindow, DockId) - 1200usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindow5GetIDEPKcS1_"]
    pub fn ImGuiWindow_GetID(
        this: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindow5GetIDEPKv"]
    pub fn ImGuiWindow_GetID1(
        this: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindow5GetIDEi"]
    pub fn ImGuiWindow_GetID2(this: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindow12GetIDFromPosERK6ImVec2"]
    pub fn ImGuiWindow_GetIDFromPos(this: *mut ImGuiWindow, p_abs: *const ImVec2) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect"]
    pub fn ImGuiWindow_GetIDFromRectangle(this: *mut ImGuiWindow, r_abs: *const ImRect) -> ImGuiID;
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindowC1EP12ImGuiContextPKc"]
    pub fn ImGuiWindow_ImGuiWindow(
        this: *mut ImGuiWindow,
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiWindowD1Ev"]
    pub fn ImGuiWindow_ImGuiWindow_destructor(this: *mut ImGuiWindow);
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowPosAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowPosAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowSizeAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowSizeAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowCollapsedAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowCollapsedAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetWindowDockAllowFlags_raw(this: *const Self) -> ImGuiCond {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetWindowDockAllowFlags_raw(this: *mut Self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockIsActive_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockIsActive_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockNodeIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockNodeIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabIsVisible_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabIsVisible_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DockTabWantClose_raw(this: *const Self) -> bool {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DockTabWantClose_raw(this: *mut Self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn GetID(
        &mut self,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID {
        ImGuiWindow_GetID(self, str_, str_end)
    }
    #[inline]
    pub unsafe fn GetID1(&mut self, ptr: *const ::std::os::raw::c_void) -> ImGuiID {
        ImGuiWindow_GetID1(self, ptr)
    }
    #[inline]
    pub unsafe fn GetID2(&mut self, n: ::std::os::raw::c_int) -> ImGuiID {
        ImGuiWindow_GetID2(self, n)
    }
    #[inline]
    pub unsafe fn GetIDFromPos(&mut self, p_abs: *const ImVec2) -> ImGuiID {
        ImGuiWindow_GetIDFromPos(self, p_abs)
    }
    #[inline]
    pub unsafe fn GetIDFromRectangle(&mut self, r_abs: *const ImRect) -> ImGuiID {
        ImGuiWindow_GetIDFromRectangle(self, r_abs)
    }
    #[inline]
    pub unsafe fn new(context: *mut ImGuiContext, name: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiWindow_ImGuiWindow(__bindgen_tmp.as_mut_ptr(), context, name);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ImGuiWindow_ImGuiWindow_destructor(self)
    }
}
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ =
    4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_uint;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_SectionMask_: ImGuiTabItemFlagsPrivate_ = 192;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ =
    1048576;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Invisible: ImGuiTabItemFlagsPrivate_ =
    4194304;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 8388608;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTabItem"][::std::mem::size_of::<ImGuiTabItem>() - 56usize];
    ["Alignment of ImGuiTabItem"][::std::mem::align_of::<ImGuiTabItem>() - 8usize];
    ["Offset of field: ImGuiTabItem::ID"][::std::mem::offset_of!(ImGuiTabItem, ID) - 0usize];
    ["Offset of field: ImGuiTabItem::Flags"][::std::mem::offset_of!(ImGuiTabItem, Flags) - 4usize];
    ["Offset of field: ImGuiTabItem::Window"]
        [::std::mem::offset_of!(ImGuiTabItem, Window) - 8usize];
    ["Offset of field: ImGuiTabItem::LastFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabItem, LastFrameVisible) - 16usize];
    ["Offset of field: ImGuiTabItem::LastFrameSelected"]
        [::std::mem::offset_of!(ImGuiTabItem, LastFrameSelected) - 20usize];
    ["Offset of field: ImGuiTabItem::Offset"]
        [::std::mem::offset_of!(ImGuiTabItem, Offset) - 24usize];
    ["Offset of field: ImGuiTabItem::Width"][::std::mem::offset_of!(ImGuiTabItem, Width) - 28usize];
    ["Offset of field: ImGuiTabItem::ContentWidth"]
        [::std::mem::offset_of!(ImGuiTabItem, ContentWidth) - 32usize];
    ["Offset of field: ImGuiTabItem::RequestedWidth"]
        [::std::mem::offset_of!(ImGuiTabItem, RequestedWidth) - 36usize];
    ["Offset of field: ImGuiTabItem::NameOffset"]
        [::std::mem::offset_of!(ImGuiTabItem, NameOffset) - 40usize];
    ["Offset of field: ImGuiTabItem::BeginOrder"]
        [::std::mem::offset_of!(ImGuiTabItem, BeginOrder) - 44usize];
    ["Offset of field: ImGuiTabItem::IndexDuringLayout"]
        [::std::mem::offset_of!(ImGuiTabItem, IndexDuringLayout) - 46usize];
    ["Offset of field: ImGuiTabItem::WantClose"]
        [::std::mem::offset_of!(ImGuiTabItem, WantClose) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTabBar {
    pub Window: *mut ImGuiWindow,
    pub Tabs: ImVector<ImGuiTabItem>,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub SeparatorMinX: f32,
    pub SeparatorMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTabBar"][::std::mem::size_of::<ImGuiTabBar>() - 168usize];
    ["Alignment of ImGuiTabBar"][::std::mem::align_of::<ImGuiTabBar>() - 8usize];
    ["Offset of field: ImGuiTabBar::Window"][::std::mem::offset_of!(ImGuiTabBar, Window) - 0usize];
    ["Offset of field: ImGuiTabBar::Tabs"][::std::mem::offset_of!(ImGuiTabBar, Tabs) - 8usize];
    ["Offset of field: ImGuiTabBar::Flags"][::std::mem::offset_of!(ImGuiTabBar, Flags) - 24usize];
    ["Offset of field: ImGuiTabBar::ID"][::std::mem::offset_of!(ImGuiTabBar, ID) - 28usize];
    ["Offset of field: ImGuiTabBar::SelectedTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, SelectedTabId) - 32usize];
    ["Offset of field: ImGuiTabBar::NextSelectedTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, NextSelectedTabId) - 36usize];
    ["Offset of field: ImGuiTabBar::VisibleTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, VisibleTabId) - 40usize];
    ["Offset of field: ImGuiTabBar::CurrFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabBar, CurrFrameVisible) - 44usize];
    ["Offset of field: ImGuiTabBar::PrevFrameVisible"]
        [::std::mem::offset_of!(ImGuiTabBar, PrevFrameVisible) - 48usize];
    ["Offset of field: ImGuiTabBar::BarRect"]
        [::std::mem::offset_of!(ImGuiTabBar, BarRect) - 52usize];
    ["Offset of field: ImGuiTabBar::CurrTabsContentsHeight"]
        [::std::mem::offset_of!(ImGuiTabBar, CurrTabsContentsHeight) - 68usize];
    ["Offset of field: ImGuiTabBar::PrevTabsContentsHeight"]
        [::std::mem::offset_of!(ImGuiTabBar, PrevTabsContentsHeight) - 72usize];
    ["Offset of field: ImGuiTabBar::WidthAllTabs"]
        [::std::mem::offset_of!(ImGuiTabBar, WidthAllTabs) - 76usize];
    ["Offset of field: ImGuiTabBar::WidthAllTabsIdeal"]
        [::std::mem::offset_of!(ImGuiTabBar, WidthAllTabsIdeal) - 80usize];
    ["Offset of field: ImGuiTabBar::ScrollingAnim"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingAnim) - 84usize];
    ["Offset of field: ImGuiTabBar::ScrollingTarget"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingTarget) - 88usize];
    ["Offset of field: ImGuiTabBar::ScrollingTargetDistToVisibility"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingTargetDistToVisibility) - 92usize];
    ["Offset of field: ImGuiTabBar::ScrollingSpeed"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingSpeed) - 96usize];
    ["Offset of field: ImGuiTabBar::ScrollingRectMinX"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingRectMinX) - 100usize];
    ["Offset of field: ImGuiTabBar::ScrollingRectMaxX"]
        [::std::mem::offset_of!(ImGuiTabBar, ScrollingRectMaxX) - 104usize];
    ["Offset of field: ImGuiTabBar::SeparatorMinX"]
        [::std::mem::offset_of!(ImGuiTabBar, SeparatorMinX) - 108usize];
    ["Offset of field: ImGuiTabBar::SeparatorMaxX"]
        [::std::mem::offset_of!(ImGuiTabBar, SeparatorMaxX) - 112usize];
    ["Offset of field: ImGuiTabBar::ReorderRequestTabId"]
        [::std::mem::offset_of!(ImGuiTabBar, ReorderRequestTabId) - 116usize];
    ["Offset of field: ImGuiTabBar::ReorderRequestOffset"]
        [::std::mem::offset_of!(ImGuiTabBar, ReorderRequestOffset) - 120usize];
    ["Offset of field: ImGuiTabBar::BeginCount"]
        [::std::mem::offset_of!(ImGuiTabBar, BeginCount) - 122usize];
    ["Offset of field: ImGuiTabBar::WantLayout"]
        [::std::mem::offset_of!(ImGuiTabBar, WantLayout) - 123usize];
    ["Offset of field: ImGuiTabBar::VisibleTabWasSubmitted"]
        [::std::mem::offset_of!(ImGuiTabBar, VisibleTabWasSubmitted) - 124usize];
    ["Offset of field: ImGuiTabBar::TabsAddedNew"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsAddedNew) - 125usize];
    ["Offset of field: ImGuiTabBar::TabsActiveCount"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsActiveCount) - 126usize];
    ["Offset of field: ImGuiTabBar::LastTabItemIdx"]
        [::std::mem::offset_of!(ImGuiTabBar, LastTabItemIdx) - 128usize];
    ["Offset of field: ImGuiTabBar::ItemSpacingY"]
        [::std::mem::offset_of!(ImGuiTabBar, ItemSpacingY) - 132usize];
    ["Offset of field: ImGuiTabBar::FramePadding"]
        [::std::mem::offset_of!(ImGuiTabBar, FramePadding) - 136usize];
    ["Offset of field: ImGuiTabBar::BackupCursorPos"]
        [::std::mem::offset_of!(ImGuiTabBar, BackupCursorPos) - 144usize];
    ["Offset of field: ImGuiTabBar::TabsNames"]
        [::std::mem::offset_of!(ImGuiTabBar, TabsNames) - 152usize];
};
extern "C" {
    #[link_name = "\u{1}_ZN11ImGuiTabBarC1Ev"]
    pub fn ImGuiTabBar_ImGuiTabBar(this: *mut ImGuiTabBar);
}
impl ImGuiTabBar {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ImGuiTabBar_ImGuiTabBar(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
pub type ImGuiTableColumnIdx = ImS16;
pub type ImGuiTableDrawChannelIdx = ImU16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub WidthMax: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumn"][::std::mem::size_of::<ImGuiTableColumn>() - 116usize];
    ["Alignment of ImGuiTableColumn"][::std::mem::align_of::<ImGuiTableColumn>() - 4usize];
    ["Offset of field: ImGuiTableColumn::Flags"]
        [::std::mem::offset_of!(ImGuiTableColumn, Flags) - 0usize];
    ["Offset of field: ImGuiTableColumn::WidthGiven"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthGiven) - 4usize];
    ["Offset of field: ImGuiTableColumn::MinX"]
        [::std::mem::offset_of!(ImGuiTableColumn, MinX) - 8usize];
    ["Offset of field: ImGuiTableColumn::MaxX"]
        [::std::mem::offset_of!(ImGuiTableColumn, MaxX) - 12usize];
    ["Offset of field: ImGuiTableColumn::WidthRequest"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthRequest) - 16usize];
    ["Offset of field: ImGuiTableColumn::WidthAuto"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthAuto) - 20usize];
    ["Offset of field: ImGuiTableColumn::WidthMax"]
        [::std::mem::offset_of!(ImGuiTableColumn, WidthMax) - 24usize];
    ["Offset of field: ImGuiTableColumn::StretchWeight"]
        [::std::mem::offset_of!(ImGuiTableColumn, StretchWeight) - 28usize];
    ["Offset of field: ImGuiTableColumn::InitStretchWeightOrWidth"]
        [::std::mem::offset_of!(ImGuiTableColumn, InitStretchWeightOrWidth) - 32usize];
    ["Offset of field: ImGuiTableColumn::ClipRect"]
        [::std::mem::offset_of!(ImGuiTableColumn, ClipRect) - 36usize];
    ["Offset of field: ImGuiTableColumn::UserID"]
        [::std::mem::offset_of!(ImGuiTableColumn, UserID) - 52usize];
    ["Offset of field: ImGuiTableColumn::WorkMinX"]
        [::std::mem::offset_of!(ImGuiTableColumn, WorkMinX) - 56usize];
    ["Offset of field: ImGuiTableColumn::WorkMaxX"]
        [::std::mem::offset_of!(ImGuiTableColumn, WorkMaxX) - 60usize];
    ["Offset of field: ImGuiTableColumn::ItemWidth"]
        [::std::mem::offset_of!(ImGuiTableColumn, ItemWidth) - 64usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXFrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXFrozen) - 68usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXUnfrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXUnfrozen) - 72usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXHeadersUsed"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXHeadersUsed) - 76usize];
    ["Offset of field: ImGuiTableColumn::ContentMaxXHeadersIdeal"]
        [::std::mem::offset_of!(ImGuiTableColumn, ContentMaxXHeadersIdeal) - 80usize];
    ["Offset of field: ImGuiTableColumn::NameOffset"]
        [::std::mem::offset_of!(ImGuiTableColumn, NameOffset) - 84usize];
    ["Offset of field: ImGuiTableColumn::DisplayOrder"]
        [::std::mem::offset_of!(ImGuiTableColumn, DisplayOrder) - 86usize];
    ["Offset of field: ImGuiTableColumn::IndexWithinEnabledSet"]
        [::std::mem::offset_of!(ImGuiTableColumn, IndexWithinEnabledSet) - 88usize];
    ["Offset of field: ImGuiTableColumn::PrevEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTableColumn, PrevEnabledColumn) - 90usize];
    ["Offset of field: ImGuiTableColumn::NextEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTableColumn, NextEnabledColumn) - 92usize];
    ["Offset of field: ImGuiTableColumn::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumn, SortOrder) - 94usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelCurrent"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelCurrent) - 96usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelFrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelFrozen) - 98usize];
    ["Offset of field: ImGuiTableColumn::DrawChannelUnfrozen"]
        [::std::mem::offset_of!(ImGuiTableColumn, DrawChannelUnfrozen) - 100usize];
    ["Offset of field: ImGuiTableColumn::IsEnabled"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsEnabled) - 102usize];
    ["Offset of field: ImGuiTableColumn::IsUserEnabled"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsUserEnabled) - 103usize];
    ["Offset of field: ImGuiTableColumn::IsUserEnabledNextFrame"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsUserEnabledNextFrame) - 104usize];
    ["Offset of field: ImGuiTableColumn::IsVisibleX"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsVisibleX) - 105usize];
    ["Offset of field: ImGuiTableColumn::IsVisibleY"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsVisibleY) - 106usize];
    ["Offset of field: ImGuiTableColumn::IsRequestOutput"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsRequestOutput) - 107usize];
    ["Offset of field: ImGuiTableColumn::IsSkipItems"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsSkipItems) - 108usize];
    ["Offset of field: ImGuiTableColumn::IsPreserveWidthAuto"]
        [::std::mem::offset_of!(ImGuiTableColumn, IsPreserveWidthAuto) - 109usize];
    ["Offset of field: ImGuiTableColumn::NavLayerCurrent"]
        [::std::mem::offset_of!(ImGuiTableColumn, NavLayerCurrent) - 110usize];
    ["Offset of field: ImGuiTableColumn::AutoFitQueue"]
        [::std::mem::offset_of!(ImGuiTableColumn, AutoFitQueue) - 111usize];
    ["Offset of field: ImGuiTableColumn::CannotSkipItemsQueue"]
        [::std::mem::offset_of!(ImGuiTableColumn, CannotSkipItemsQueue) - 112usize];
    ["Offset of field: ImGuiTableColumn::SortDirectionsAvailList"]
        [::std::mem::offset_of!(ImGuiTableColumn, SortDirectionsAvailList) - 114usize];
};
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailCount_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailCount_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirectionsAvailMask_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirectionsAvailMask_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableCellData"][::std::mem::size_of::<ImGuiTableCellData>() - 8usize];
    ["Alignment of ImGuiTableCellData"][::std::mem::align_of::<ImGuiTableCellData>() - 4usize];
    ["Offset of field: ImGuiTableCellData::BgColor"]
        [::std::mem::offset_of!(ImGuiTableCellData, BgColor) - 0usize];
    ["Offset of field: ImGuiTableCellData::Column"]
        [::std::mem::offset_of!(ImGuiTableCellData, Column) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableHeaderData {
    pub Index: ImGuiTableColumnIdx,
    pub TextColor: ImU32,
    pub BgColor0: ImU32,
    pub BgColor1: ImU32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableHeaderData"][::std::mem::size_of::<ImGuiTableHeaderData>() - 16usize];
    ["Alignment of ImGuiTableHeaderData"][::std::mem::align_of::<ImGuiTableHeaderData>() - 4usize];
    ["Offset of field: ImGuiTableHeaderData::Index"]
        [::std::mem::offset_of!(ImGuiTableHeaderData, Index) - 0usize];
    ["Offset of field: ImGuiTableHeaderData::TextColor"]
        [::std::mem::offset_of!(ImGuiTableHeaderData, TextColor) - 4usize];
    ["Offset of field: ImGuiTableHeaderData::BgColor0"]
        [::std::mem::offset_of!(ImGuiTableHeaderData, BgColor0) - 8usize];
    ["Offset of field: ImGuiTableHeaderData::BgColor1"]
        [::std::mem::offset_of!(ImGuiTableHeaderData, BgColor1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableInstanceData {
    pub TableInstanceID: ImGuiID,
    pub LastOuterHeight: f32,
    pub LastTopHeadersRowHeight: f32,
    pub LastFrozenHeight: f32,
    pub HoveredRowLast: ::std::os::raw::c_int,
    pub HoveredRowNext: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableInstanceData"][::std::mem::size_of::<ImGuiTableInstanceData>() - 24usize];
    ["Alignment of ImGuiTableInstanceData"]
        [::std::mem::align_of::<ImGuiTableInstanceData>() - 4usize];
    ["Offset of field: ImGuiTableInstanceData::TableInstanceID"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, TableInstanceID) - 0usize];
    ["Offset of field: ImGuiTableInstanceData::LastOuterHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastOuterHeight) - 4usize];
    ["Offset of field: ImGuiTableInstanceData::LastTopHeadersRowHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastTopHeadersRowHeight) - 8usize];
    ["Offset of field: ImGuiTableInstanceData::LastFrozenHeight"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, LastFrozenHeight) - 12usize];
    ["Offset of field: ImGuiTableInstanceData::HoveredRowLast"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, HoveredRowLast) - 16usize];
    ["Offset of field: ImGuiTableInstanceData::HoveredRowNext"]
        [::std::mem::offset_of!(ImGuiTableInstanceData, HoveredRowNext) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan<ImGuiTableColumn>,
    pub DisplayOrderToIndex: ImSpan<ImGuiTableColumnIdx>,
    pub RowCellData: ImSpan<ImGuiTableCellData>,
    pub EnabledMaskByDisplayOrder: ImBitArrayPtr,
    pub EnabledMaskByIndex: ImBitArrayPtr,
    pub VisibleMaskByIndex: ImBitArrayPtr,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowCellPaddingY: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub AngledHeadersHeight: f32,
    pub AngledHeadersSlope: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector<ImGuiTableInstanceData>,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector<ImGuiTableColumnSortSpecs>,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub AngledHeadersCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub HighlightColumnHeader: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub NavLayer: ImS8,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub DisableDefaultContextMenu: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub IsActiveIdAliveBeforeTable: bool,
    pub IsActiveIdInTable: bool,
    pub HasScrollbarYCurr: bool,
    pub HasScrollbarYPrev: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTable"][::std::mem::size_of::<ImGuiTable>() - 592usize];
    ["Alignment of ImGuiTable"][::std::mem::align_of::<ImGuiTable>() - 8usize];
    ["Offset of field: ImGuiTable::ID"][::std::mem::offset_of!(ImGuiTable, ID) - 0usize];
    ["Offset of field: ImGuiTable::Flags"][::std::mem::offset_of!(ImGuiTable, Flags) - 4usize];
    ["Offset of field: ImGuiTable::RawData"][::std::mem::offset_of!(ImGuiTable, RawData) - 8usize];
    ["Offset of field: ImGuiTable::TempData"]
        [::std::mem::offset_of!(ImGuiTable, TempData) - 16usize];
    ["Offset of field: ImGuiTable::Columns"][::std::mem::offset_of!(ImGuiTable, Columns) - 24usize];
    ["Offset of field: ImGuiTable::DisplayOrderToIndex"]
        [::std::mem::offset_of!(ImGuiTable, DisplayOrderToIndex) - 40usize];
    ["Offset of field: ImGuiTable::RowCellData"]
        [::std::mem::offset_of!(ImGuiTable, RowCellData) - 56usize];
    ["Offset of field: ImGuiTable::EnabledMaskByDisplayOrder"]
        [::std::mem::offset_of!(ImGuiTable, EnabledMaskByDisplayOrder) - 72usize];
    ["Offset of field: ImGuiTable::EnabledMaskByIndex"]
        [::std::mem::offset_of!(ImGuiTable, EnabledMaskByIndex) - 80usize];
    ["Offset of field: ImGuiTable::VisibleMaskByIndex"]
        [::std::mem::offset_of!(ImGuiTable, VisibleMaskByIndex) - 88usize];
    ["Offset of field: ImGuiTable::SettingsLoadedFlags"]
        [::std::mem::offset_of!(ImGuiTable, SettingsLoadedFlags) - 96usize];
    ["Offset of field: ImGuiTable::SettingsOffset"]
        [::std::mem::offset_of!(ImGuiTable, SettingsOffset) - 100usize];
    ["Offset of field: ImGuiTable::LastFrameActive"]
        [::std::mem::offset_of!(ImGuiTable, LastFrameActive) - 104usize];
    ["Offset of field: ImGuiTable::ColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsCount) - 108usize];
    ["Offset of field: ImGuiTable::CurrentRow"]
        [::std::mem::offset_of!(ImGuiTable, CurrentRow) - 112usize];
    ["Offset of field: ImGuiTable::CurrentColumn"]
        [::std::mem::offset_of!(ImGuiTable, CurrentColumn) - 116usize];
    ["Offset of field: ImGuiTable::InstanceCurrent"]
        [::std::mem::offset_of!(ImGuiTable, InstanceCurrent) - 120usize];
    ["Offset of field: ImGuiTable::InstanceInteracted"]
        [::std::mem::offset_of!(ImGuiTable, InstanceInteracted) - 122usize];
    ["Offset of field: ImGuiTable::RowPosY1"]
        [::std::mem::offset_of!(ImGuiTable, RowPosY1) - 124usize];
    ["Offset of field: ImGuiTable::RowPosY2"]
        [::std::mem::offset_of!(ImGuiTable, RowPosY2) - 128usize];
    ["Offset of field: ImGuiTable::RowMinHeight"]
        [::std::mem::offset_of!(ImGuiTable, RowMinHeight) - 132usize];
    ["Offset of field: ImGuiTable::RowCellPaddingY"]
        [::std::mem::offset_of!(ImGuiTable, RowCellPaddingY) - 136usize];
    ["Offset of field: ImGuiTable::RowTextBaseline"]
        [::std::mem::offset_of!(ImGuiTable, RowTextBaseline) - 140usize];
    ["Offset of field: ImGuiTable::RowIndentOffsetX"]
        [::std::mem::offset_of!(ImGuiTable, RowIndentOffsetX) - 144usize];
    ["Offset of field: ImGuiTable::RowBgColorCounter"]
        [::std::mem::offset_of!(ImGuiTable, RowBgColorCounter) - 152usize];
    ["Offset of field: ImGuiTable::RowBgColor"]
        [::std::mem::offset_of!(ImGuiTable, RowBgColor) - 156usize];
    ["Offset of field: ImGuiTable::BorderColorStrong"]
        [::std::mem::offset_of!(ImGuiTable, BorderColorStrong) - 164usize];
    ["Offset of field: ImGuiTable::BorderColorLight"]
        [::std::mem::offset_of!(ImGuiTable, BorderColorLight) - 168usize];
    ["Offset of field: ImGuiTable::BorderX1"]
        [::std::mem::offset_of!(ImGuiTable, BorderX1) - 172usize];
    ["Offset of field: ImGuiTable::BorderX2"]
        [::std::mem::offset_of!(ImGuiTable, BorderX2) - 176usize];
    ["Offset of field: ImGuiTable::HostIndentX"]
        [::std::mem::offset_of!(ImGuiTable, HostIndentX) - 180usize];
    ["Offset of field: ImGuiTable::MinColumnWidth"]
        [::std::mem::offset_of!(ImGuiTable, MinColumnWidth) - 184usize];
    ["Offset of field: ImGuiTable::OuterPaddingX"]
        [::std::mem::offset_of!(ImGuiTable, OuterPaddingX) - 188usize];
    ["Offset of field: ImGuiTable::CellPaddingX"]
        [::std::mem::offset_of!(ImGuiTable, CellPaddingX) - 192usize];
    ["Offset of field: ImGuiTable::CellSpacingX1"]
        [::std::mem::offset_of!(ImGuiTable, CellSpacingX1) - 196usize];
    ["Offset of field: ImGuiTable::CellSpacingX2"]
        [::std::mem::offset_of!(ImGuiTable, CellSpacingX2) - 200usize];
    ["Offset of field: ImGuiTable::InnerWidth"]
        [::std::mem::offset_of!(ImGuiTable, InnerWidth) - 204usize];
    ["Offset of field: ImGuiTable::ColumnsGivenWidth"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsGivenWidth) - 208usize];
    ["Offset of field: ImGuiTable::ColumnsAutoFitWidth"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsAutoFitWidth) - 212usize];
    ["Offset of field: ImGuiTable::ColumnsStretchSumWeights"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsStretchSumWeights) - 216usize];
    ["Offset of field: ImGuiTable::ResizedColumnNextWidth"]
        [::std::mem::offset_of!(ImGuiTable, ResizedColumnNextWidth) - 220usize];
    ["Offset of field: ImGuiTable::ResizeLockMinContentsX2"]
        [::std::mem::offset_of!(ImGuiTable, ResizeLockMinContentsX2) - 224usize];
    ["Offset of field: ImGuiTable::RefScale"]
        [::std::mem::offset_of!(ImGuiTable, RefScale) - 228usize];
    ["Offset of field: ImGuiTable::AngledHeadersHeight"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersHeight) - 232usize];
    ["Offset of field: ImGuiTable::AngledHeadersSlope"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersSlope) - 236usize];
    ["Offset of field: ImGuiTable::OuterRect"]
        [::std::mem::offset_of!(ImGuiTable, OuterRect) - 240usize];
    ["Offset of field: ImGuiTable::InnerRect"]
        [::std::mem::offset_of!(ImGuiTable, InnerRect) - 256usize];
    ["Offset of field: ImGuiTable::WorkRect"]
        [::std::mem::offset_of!(ImGuiTable, WorkRect) - 272usize];
    ["Offset of field: ImGuiTable::InnerClipRect"]
        [::std::mem::offset_of!(ImGuiTable, InnerClipRect) - 288usize];
    ["Offset of field: ImGuiTable::BgClipRect"]
        [::std::mem::offset_of!(ImGuiTable, BgClipRect) - 304usize];
    ["Offset of field: ImGuiTable::Bg0ClipRectForDrawCmd"]
        [::std::mem::offset_of!(ImGuiTable, Bg0ClipRectForDrawCmd) - 320usize];
    ["Offset of field: ImGuiTable::Bg2ClipRectForDrawCmd"]
        [::std::mem::offset_of!(ImGuiTable, Bg2ClipRectForDrawCmd) - 336usize];
    ["Offset of field: ImGuiTable::HostClipRect"]
        [::std::mem::offset_of!(ImGuiTable, HostClipRect) - 352usize];
    ["Offset of field: ImGuiTable::HostBackupInnerClipRect"]
        [::std::mem::offset_of!(ImGuiTable, HostBackupInnerClipRect) - 368usize];
    ["Offset of field: ImGuiTable::OuterWindow"]
        [::std::mem::offset_of!(ImGuiTable, OuterWindow) - 384usize];
    ["Offset of field: ImGuiTable::InnerWindow"]
        [::std::mem::offset_of!(ImGuiTable, InnerWindow) - 392usize];
    ["Offset of field: ImGuiTable::ColumnsNames"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsNames) - 400usize];
    ["Offset of field: ImGuiTable::DrawSplitter"]
        [::std::mem::offset_of!(ImGuiTable, DrawSplitter) - 416usize];
    ["Offset of field: ImGuiTable::InstanceDataFirst"]
        [::std::mem::offset_of!(ImGuiTable, InstanceDataFirst) - 424usize];
    ["Offset of field: ImGuiTable::InstanceDataExtra"]
        [::std::mem::offset_of!(ImGuiTable, InstanceDataExtra) - 448usize];
    ["Offset of field: ImGuiTable::SortSpecsSingle"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsSingle) - 464usize];
    ["Offset of field: ImGuiTable::SortSpecsMulti"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsMulti) - 480usize];
    ["Offset of field: ImGuiTable::SortSpecs"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecs) - 496usize];
    ["Offset of field: ImGuiTable::SortSpecsCount"]
        [::std::mem::offset_of!(ImGuiTable, SortSpecsCount) - 512usize];
    ["Offset of field: ImGuiTable::ColumnsEnabledCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsEnabledCount) - 514usize];
    ["Offset of field: ImGuiTable::ColumnsEnabledFixedCount"]
        [::std::mem::offset_of!(ImGuiTable, ColumnsEnabledFixedCount) - 516usize];
    ["Offset of field: ImGuiTable::DeclColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, DeclColumnsCount) - 518usize];
    ["Offset of field: ImGuiTable::AngledHeadersCount"]
        [::std::mem::offset_of!(ImGuiTable, AngledHeadersCount) - 520usize];
    ["Offset of field: ImGuiTable::HoveredColumnBody"]
        [::std::mem::offset_of!(ImGuiTable, HoveredColumnBody) - 522usize];
    ["Offset of field: ImGuiTable::HoveredColumnBorder"]
        [::std::mem::offset_of!(ImGuiTable, HoveredColumnBorder) - 524usize];
    ["Offset of field: ImGuiTable::HighlightColumnHeader"]
        [::std::mem::offset_of!(ImGuiTable, HighlightColumnHeader) - 526usize];
    ["Offset of field: ImGuiTable::AutoFitSingleColumn"]
        [::std::mem::offset_of!(ImGuiTable, AutoFitSingleColumn) - 528usize];
    ["Offset of field: ImGuiTable::ResizedColumn"]
        [::std::mem::offset_of!(ImGuiTable, ResizedColumn) - 530usize];
    ["Offset of field: ImGuiTable::LastResizedColumn"]
        [::std::mem::offset_of!(ImGuiTable, LastResizedColumn) - 532usize];
    ["Offset of field: ImGuiTable::HeldHeaderColumn"]
        [::std::mem::offset_of!(ImGuiTable, HeldHeaderColumn) - 534usize];
    ["Offset of field: ImGuiTable::ReorderColumn"]
        [::std::mem::offset_of!(ImGuiTable, ReorderColumn) - 536usize];
    ["Offset of field: ImGuiTable::ReorderColumnDir"]
        [::std::mem::offset_of!(ImGuiTable, ReorderColumnDir) - 538usize];
    ["Offset of field: ImGuiTable::LeftMostEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTable, LeftMostEnabledColumn) - 540usize];
    ["Offset of field: ImGuiTable::RightMostEnabledColumn"]
        [::std::mem::offset_of!(ImGuiTable, RightMostEnabledColumn) - 542usize];
    ["Offset of field: ImGuiTable::LeftMostStretchedColumn"]
        [::std::mem::offset_of!(ImGuiTable, LeftMostStretchedColumn) - 544usize];
    ["Offset of field: ImGuiTable::RightMostStretchedColumn"]
        [::std::mem::offset_of!(ImGuiTable, RightMostStretchedColumn) - 546usize];
    ["Offset of field: ImGuiTable::ContextPopupColumn"]
        [::std::mem::offset_of!(ImGuiTable, ContextPopupColumn) - 548usize];
    ["Offset of field: ImGuiTable::FreezeRowsRequest"]
        [::std::mem::offset_of!(ImGuiTable, FreezeRowsRequest) - 550usize];
    ["Offset of field: ImGuiTable::FreezeRowsCount"]
        [::std::mem::offset_of!(ImGuiTable, FreezeRowsCount) - 552usize];
    ["Offset of field: ImGuiTable::FreezeColumnsRequest"]
        [::std::mem::offset_of!(ImGuiTable, FreezeColumnsRequest) - 554usize];
    ["Offset of field: ImGuiTable::FreezeColumnsCount"]
        [::std::mem::offset_of!(ImGuiTable, FreezeColumnsCount) - 556usize];
    ["Offset of field: ImGuiTable::RowCellDataCurrent"]
        [::std::mem::offset_of!(ImGuiTable, RowCellDataCurrent) - 558usize];
    ["Offset of field: ImGuiTable::DummyDrawChannel"]
        [::std::mem::offset_of!(ImGuiTable, DummyDrawChannel) - 560usize];
    ["Offset of field: ImGuiTable::Bg2DrawChannelCurrent"]
        [::std::mem::offset_of!(ImGuiTable, Bg2DrawChannelCurrent) - 562usize];
    ["Offset of field: ImGuiTable::Bg2DrawChannelUnfrozen"]
        [::std::mem::offset_of!(ImGuiTable, Bg2DrawChannelUnfrozen) - 564usize];
    ["Offset of field: ImGuiTable::NavLayer"]
        [::std::mem::offset_of!(ImGuiTable, NavLayer) - 566usize];
    ["Offset of field: ImGuiTable::IsLayoutLocked"]
        [::std::mem::offset_of!(ImGuiTable, IsLayoutLocked) - 567usize];
    ["Offset of field: ImGuiTable::IsInsideRow"]
        [::std::mem::offset_of!(ImGuiTable, IsInsideRow) - 568usize];
    ["Offset of field: ImGuiTable::IsInitializing"]
        [::std::mem::offset_of!(ImGuiTable, IsInitializing) - 569usize];
    ["Offset of field: ImGuiTable::IsSortSpecsDirty"]
        [::std::mem::offset_of!(ImGuiTable, IsSortSpecsDirty) - 570usize];
    ["Offset of field: ImGuiTable::IsUsingHeaders"]
        [::std::mem::offset_of!(ImGuiTable, IsUsingHeaders) - 571usize];
    ["Offset of field: ImGuiTable::IsContextPopupOpen"]
        [::std::mem::offset_of!(ImGuiTable, IsContextPopupOpen) - 572usize];
    ["Offset of field: ImGuiTable::DisableDefaultContextMenu"]
        [::std::mem::offset_of!(ImGuiTable, DisableDefaultContextMenu) - 573usize];
    ["Offset of field: ImGuiTable::IsSettingsRequestLoad"]
        [::std::mem::offset_of!(ImGuiTable, IsSettingsRequestLoad) - 574usize];
    ["Offset of field: ImGuiTable::IsSettingsDirty"]
        [::std::mem::offset_of!(ImGuiTable, IsSettingsDirty) - 575usize];
    ["Offset of field: ImGuiTable::IsDefaultDisplayOrder"]
        [::std::mem::offset_of!(ImGuiTable, IsDefaultDisplayOrder) - 576usize];
    ["Offset of field: ImGuiTable::IsResetAllRequest"]
        [::std::mem::offset_of!(ImGuiTable, IsResetAllRequest) - 577usize];
    ["Offset of field: ImGuiTable::IsResetDisplayOrderRequest"]
        [::std::mem::offset_of!(ImGuiTable, IsResetDisplayOrderRequest) - 578usize];
    ["Offset of field: ImGuiTable::IsUnfrozenRows"]
        [::std::mem::offset_of!(ImGuiTable, IsUnfrozenRows) - 579usize];
    ["Offset of field: ImGuiTable::IsDefaultSizingPolicy"]
        [::std::mem::offset_of!(ImGuiTable, IsDefaultSizingPolicy) - 580usize];
    ["Offset of field: ImGuiTable::IsActiveIdAliveBeforeTable"]
        [::std::mem::offset_of!(ImGuiTable, IsActiveIdAliveBeforeTable) - 581usize];
    ["Offset of field: ImGuiTable::IsActiveIdInTable"]
        [::std::mem::offset_of!(ImGuiTable, IsActiveIdInTable) - 582usize];
    ["Offset of field: ImGuiTable::HasScrollbarYCurr"]
        [::std::mem::offset_of!(ImGuiTable, HasScrollbarYCurr) - 583usize];
    ["Offset of field: ImGuiTable::HasScrollbarYPrev"]
        [::std::mem::offset_of!(ImGuiTable, HasScrollbarYPrev) - 584usize];
    ["Offset of field: ImGuiTable::MemoryCompacted"]
        [::std::mem::offset_of!(ImGuiTable, MemoryCompacted) - 585usize];
    ["Offset of field: ImGuiTable::HostSkipItems"]
        [::std::mem::offset_of!(ImGuiTable, HostSkipItems) - 586usize];
};
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LastRowFlags_raw(this: *const Self) -> ImGuiTableRowFlags {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LastRowFlags_raw(this: *mut Self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub AngledHeadersExtraWidth: f32,
    pub AngledHeadersRequests: ImVector<ImGuiTableHeaderData>,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableTempData"][::std::mem::size_of::<ImGuiTableTempData>() - 136usize];
    ["Alignment of ImGuiTableTempData"][::std::mem::align_of::<ImGuiTableTempData>() - 8usize];
    ["Offset of field: ImGuiTableTempData::TableIndex"]
        [::std::mem::offset_of!(ImGuiTableTempData, TableIndex) - 0usize];
    ["Offset of field: ImGuiTableTempData::LastTimeActive"]
        [::std::mem::offset_of!(ImGuiTableTempData, LastTimeActive) - 4usize];
    ["Offset of field: ImGuiTableTempData::AngledHeadersExtraWidth"]
        [::std::mem::offset_of!(ImGuiTableTempData, AngledHeadersExtraWidth) - 8usize];
    ["Offset of field: ImGuiTableTempData::AngledHeadersRequests"]
        [::std::mem::offset_of!(ImGuiTableTempData, AngledHeadersRequests) - 16usize];
    ["Offset of field: ImGuiTableTempData::UserOuterSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, UserOuterSize) - 32usize];
    ["Offset of field: ImGuiTableTempData::DrawSplitter"]
        [::std::mem::offset_of!(ImGuiTableTempData, DrawSplitter) - 40usize];
    ["Offset of field: ImGuiTableTempData::HostBackupWorkRect"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupWorkRect) - 64usize];
    ["Offset of field: ImGuiTableTempData::HostBackupParentWorkRect"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupParentWorkRect) - 80usize];
    ["Offset of field: ImGuiTableTempData::HostBackupPrevLineSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupPrevLineSize) - 96usize];
    ["Offset of field: ImGuiTableTempData::HostBackupCurrLineSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupCurrLineSize) - 104usize];
    ["Offset of field: ImGuiTableTempData::HostBackupCursorMaxPos"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupCursorMaxPos) - 112usize];
    ["Offset of field: ImGuiTableTempData::HostBackupColumnsOffset"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupColumnsOffset) - 120usize];
    ["Offset of field: ImGuiTableTempData::HostBackupItemWidth"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupItemWidth) - 124usize];
    ["Offset of field: ImGuiTableTempData::HostBackupItemWidthStackSize"]
        [::std::mem::offset_of!(ImGuiTableTempData, HostBackupItemWidthStackSize) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableColumnSettings"]
        [::std::mem::size_of::<ImGuiTableColumnSettings>() - 16usize];
    ["Alignment of ImGuiTableColumnSettings"]
        [::std::mem::align_of::<ImGuiTableColumnSettings>() - 4usize];
    ["Offset of field: ImGuiTableColumnSettings::WidthOrWeight"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, WidthOrWeight) - 0usize];
    ["Offset of field: ImGuiTableColumnSettings::UserID"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, UserID) - 4usize];
    ["Offset of field: ImGuiTableColumnSettings::Index"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, Index) - 8usize];
    ["Offset of field: ImGuiTableColumnSettings::DisplayOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, DisplayOrder) - 10usize];
    ["Offset of field: ImGuiTableColumnSettings::SortOrder"]
        [::std::mem::offset_of!(ImGuiTableColumnSettings, SortOrder) - 12usize];
};
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SortDirection_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SortDirection_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImS8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImS8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsEnabled_raw(this: *const Self) -> ImS8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsEnabled_raw(this: *mut Self, val: ImS8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsStretch_raw(this: *const Self) -> ImU8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IsStretch_raw(this: *mut Self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImS8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImGuiTableSettings"][::std::mem::size_of::<ImGuiTableSettings>() - 20usize];
    ["Alignment of ImGuiTableSettings"][::std::mem::align_of::<ImGuiTableSettings>() - 4usize];
    ["Offset of field: ImGuiTableSettings::ID"]
        [::std::mem::offset_of!(ImGuiTableSettings, ID) - 0usize];
    ["Offset of field: ImGuiTableSettings::SaveFlags"]
        [::std::mem::offset_of!(ImGuiTableSettings, SaveFlags) - 4usize];
    ["Offset of field: ImGuiTableSettings::RefScale"]
        [::std::mem::offset_of!(ImGuiTableSettings, RefScale) - 8usize];
    ["Offset of field: ImGuiTableSettings::ColumnsCount"]
        [::std::mem::offset_of!(ImGuiTableSettings, ColumnsCount) - 12usize];
    ["Offset of field: ImGuiTableSettings::ColumnsCountMax"]
        [::std::mem::offset_of!(ImGuiTableSettings, ColumnsCountMax) - 14usize];
    ["Offset of field: ImGuiTableSettings::WantApply"]
        [::std::mem::offset_of!(ImGuiTableSettings, WantApply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    pub FontBuilder_Build:
        ::std::option::Option<extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImFontBuilderIO"][::std::mem::size_of::<ImFontBuilderIO>() - 8usize];
    ["Alignment of ImFontBuilderIO"][::std::mem::align_of::<ImFontBuilderIO>() - 8usize];
    ["Offset of field: ImFontBuilderIO::FontBuilder_Build"]
        [::std::mem::offset_of!(ImFontBuilderIO, FontBuilder_Build) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}_Z35ImFontAtlasGetBuilderForStbTruetypev"]
    pub fn ImFontAtlasGetBuilderForStbTruetype() -> *const ImFontBuilderIO;
}
extern "C" {
    #[link_name = "\u{1}_Z35ImFontAtlasUpdateConfigDataPointersP11ImFontAtlas"]
    pub fn ImFontAtlasUpdateConfigDataPointers(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_Z20ImFontAtlasBuildInitP11ImFontAtlas"]
    pub fn ImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_Z25ImFontAtlasBuildSetupFontP11ImFontAtlasP6ImFontP12ImFontConfigff"]
    pub fn ImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z31ImFontAtlasBuildPackCustomRectsP11ImFontAtlasPv"]
    pub fn ImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z22ImFontAtlasBuildFinishP11ImFontAtlas"]
    pub fn ImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
extern "C" {
    #[link_name = "\u{1}_Z40ImFontAtlasBuildRender8bppRectFromStringP11ImFontAtlasiiiiPKcch"]
    pub fn ImFontAtlasBuildRender8bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z41ImFontAtlasBuildRender32bppRectFromStringP11ImFontAtlasiiiiPKccj"]
    pub fn ImFontAtlasBuildRender32bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z39ImFontAtlasBuildMultiplyCalcLookupTablePhf"]
    pub fn ImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z34ImFontAtlasBuildMultiplyRectAlpha8PKhPhiiiii"]
    pub fn ImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_Z36ImFontAtlasBuildGetOversampleFactorsPK12ImFontConfigPiS2_"]
    pub fn ImFontAtlasBuildGetOversampleFactors(
        cfg: *const ImFontConfig,
        out_oversample_h: *mut ::std::os::raw::c_int,
        out_oversample_v: *mut ::std::os::raw::c_int,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::size_of::<ImVector<ImWchar>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::align_of::<ImVector<ImWchar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTextFilter_ImGuiTextRange_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTextFilter_ImGuiTextRange>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiStoragePair_close0"]
        [::std::mem::size_of::<ImVector<ImGuiStoragePair>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiStoragePair_close0"]
        [::std::mem::align_of::<ImVector<ImGuiStoragePair>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiSelectionRequest_close0"]
        [::std::mem::size_of::<ImVector<ImGuiSelectionRequest>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiSelectionRequest_close0"]
        [::std::mem::align_of::<ImVector<ImGuiSelectionRequest>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::size_of::<ImVector<ImDrawCmd>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::align_of::<ImVector<ImDrawCmd>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::size_of::<ImVector<ImDrawIdx>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::align_of::<ImVector<ImDrawIdx>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::size_of::<ImVector<ImDrawChannel>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::align_of::<ImVector<ImDrawChannel>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::size_of::<ImVector<ImDrawCmd>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawCmd_close0"]
        [::std::mem::align_of::<ImVector<ImDrawCmd>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::size_of::<ImVector<ImDrawIdx>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawIdx_close0"]
        [::std::mem::align_of::<ImVector<ImDrawIdx>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawVert_close0"]
        [::std::mem::size_of::<ImVector<ImDrawVert>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawVert_close0"]
        [::std::mem::align_of::<ImVector<ImDrawVert>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::size_of::<ImVector<ImVec2>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::align_of::<ImVector<ImVec2>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImVec4_close0"]
        [::std::mem::size_of::<ImVector<ImVec4>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImVec4_close0"]
        [::std::mem::align_of::<ImVector<ImVec4>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImTextureID_close0"]
        [::std::mem::size_of::<ImVector<ImTextureID>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImTextureID_close0"]
        [::std::mem::align_of::<ImVector<ImTextureID>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU8_close0"]
        [::std::mem::size_of::<ImVector<ImU8>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU8_close0"]
        [::std::mem::align_of::<ImVector<ImU8>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawList>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawList>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::size_of::<ImVector<ImU32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::align_of::<ImVector<ImU32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::size_of::<ImVector<ImWchar>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImWchar_close0"]
        [::std::mem::align_of::<ImVector<ImWchar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::size_of::<ImVector<*mut ImFont>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::align_of::<ImVector<*mut ImFont>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImFontAtlasCustomRect_close0"]
        [::std::mem::size_of::<ImVector<ImFontAtlasCustomRect>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImFontAtlasCustomRect_close0"]
        [::std::mem::align_of::<ImVector<ImFontAtlasCustomRect>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImFontConfig_close0"]
        [::std::mem::size_of::<ImVector<ImFontConfig>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImFontConfig_close0"]
        [::std::mem::align_of::<ImVector<ImFontConfig>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_float_close0"]
        [::std::mem::size_of::<ImVector<f32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_float_close0"]
        [::std::mem::align_of::<ImVector<f32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU16_close0"]
        [::std::mem::size_of::<ImVector<ImU16>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU16_close0"]
        [::std::mem::align_of::<ImVector<ImU16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImFontGlyph_close0"]
        [::std::mem::size_of::<ImVector<ImFontGlyph>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImFontGlyph_close0"]
        [::std::mem::align_of::<ImVector<ImFontGlyph>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiPlatformMonitor_close0"]
        [::std::mem::size_of::<ImVector<ImGuiPlatformMonitor>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiPlatformMonitor_close0"]
        [::std::mem::align_of::<ImVector<ImGuiPlatformMonitor>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiViewport_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiViewport>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiViewport_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiViewport>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::size_of::<ImVector<ImU32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImU32_close0"]
        [::std::mem::align_of::<ImVector<ImU32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_int_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_int>>() - 16usize];
    ["Align of template specialization: ImVector_open0_int_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_int>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::size_of::<ImVector<ImVec2>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImVec2_close0"]
        [::std::mem::align_of::<ImVector<ImVec2>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawList>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawList>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawList>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawList>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiKeyRoutingData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiKeyRoutingData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiKeyRoutingData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiKeyRoutingData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiKeyRoutingData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiKeyRoutingData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiKeyRoutingData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiKeyRoutingData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiListClipperRange_close0"]
        [::std::mem::size_of::<ImVector<ImGuiListClipperRange>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiListClipperRange_close0"]
        [::std::mem::align_of::<ImVector<ImGuiListClipperRange>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiOldColumnData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiOldColumnData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiOldColumnData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiOldColumnData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiDockRequest_close0"]
        [::std::mem::size_of::<ImVector<ImGuiDockRequest>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiDockRequest_close0"]
        [::std::mem::align_of::<ImVector<ImGuiDockRequest>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiDockNodeSettings_close0"]
        [::std::mem::size_of::<ImVector<ImGuiDockNodeSettings>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiDockNodeSettings_close0"]
        [::std::mem::align_of::<ImVector<ImGuiDockNodeSettings>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiStackLevelInfo_close0"]
        [::std::mem::size_of::<ImVector<ImGuiStackLevelInfo>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiStackLevelInfo_close0"]
        [::std::mem::align_of::<ImVector<ImGuiStackLevelInfo>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiInputEvent_close0"]
        [::std::mem::size_of::<ImVector<ImGuiInputEvent>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiInputEvent_close0"]
        [::std::mem::align_of::<ImVector<ImGuiInputEvent>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiInputEvent_close0"]
        [::std::mem::size_of::<ImVector<ImGuiInputEvent>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiInputEvent_close0"]
        [::std::mem::align_of::<ImVector<ImGuiInputEvent>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiWindowStackData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiWindowStackData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiWindowStackData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiWindowStackData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiColorMod_close0"]
        [::std::mem::size_of::<ImVector<ImGuiColorMod>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiColorMod_close0"]
        [::std::mem::align_of::<ImVector<ImGuiColorMod>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiStyleMod_close0"]
        [::std::mem::size_of::<ImVector<ImGuiStyleMod>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiStyleMod_close0"]
        [::std::mem::align_of::<ImVector<ImGuiStyleMod>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::size_of::<ImVector<*mut ImFont>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImFont_close0"]
        [::std::mem::align_of::<ImVector<*mut ImFont>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiFocusScopeData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiFocusScopeData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiFocusScopeData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiFocusScopeData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiItemFlags_close0"]
        [::std::mem::size_of::<ImVector<ImGuiItemFlags>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiItemFlags_close0"]
        [::std::mem::align_of::<ImVector<ImGuiItemFlags>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiGroupData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiGroupData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiGroupData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiGroupData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiPopupData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiPopupData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiPopupData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiPopupData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiPopupData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiPopupData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiPopupData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiPopupData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTreeNodeStackData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTreeNodeStackData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTreeNodeStackData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTreeNodeStackData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiViewportP_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiViewportP>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiViewportP_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiViewportP>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiFocusScopeData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiFocusScopeData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiFocusScopeData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiFocusScopeData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_unsigned_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_uchar>>() - 16usize];
    ["Align of template specialization: ImVector_open0_unsigned_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_uchar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiListClipperData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiListClipperData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiListClipperData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiListClipperData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTableTempData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTableTempData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTableTempData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTableTempData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImPool_open0_ImGuiTable_close0"]
        [::std::mem::size_of::<ImPool<ImGuiTable>>() - 40usize];
    ["Align of template specialization: ImPool_open0_ImGuiTable_close0"]
        [::std::mem::align_of::<ImPool<ImGuiTable>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_float_close0"]
        [::std::mem::size_of::<ImVector<f32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_float_close0"]
        [::std::mem::align_of::<ImVector<f32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::size_of::<ImVector<ImDrawChannel>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImDrawChannel_close0"]
        [::std::mem::align_of::<ImVector<ImDrawChannel>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImPool_open0_ImGuiTabBar_close0"]
        [::std::mem::size_of::<ImPool<ImGuiTabBar>>() - 40usize];
    ["Align of template specialization: ImPool_open0_ImGuiTabBar_close0"]
        [::std::mem::align_of::<ImPool<ImGuiTabBar>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiPtrOrIndex_close0"]
        [::std::mem::size_of::<ImVector<ImGuiPtrOrIndex>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiPtrOrIndex_close0"]
        [::std::mem::align_of::<ImVector<ImGuiPtrOrIndex>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiShrinkWidthItem_close0"]
        [::std::mem::size_of::<ImVector<ImGuiShrinkWidthItem>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiShrinkWidthItem_close0"]
        [::std::mem::align_of::<ImVector<ImGuiShrinkWidthItem>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiMultiSelectTempData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiMultiSelectTempData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiMultiSelectTempData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiMultiSelectTempData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImPool_open0_ImGuiMultiSelectState_close0"]
        [::std::mem::size_of::<ImPool<ImGuiMultiSelectState>>() - 40usize];
    ["Align of template specialization: ImPool_open0_ImGuiMultiSelectState_close0"]
        [::std::mem::align_of::<ImPool<ImGuiMultiSelectState>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::size_of::<ImVector<ImGuiID>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::align_of::<ImVector<ImGuiID>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiSettingsHandler_close0"]
        [::std::mem::size_of::<ImVector<ImGuiSettingsHandler>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiSettingsHandler_close0"]
        [::std::mem::align_of::<ImVector<ImGuiSettingsHandler>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImChunkStream_open0_ImGuiWindowSettings_close0"]
        [::std::mem::size_of::<ImChunkStream>() - 16usize];
    ["Align of template specialization: ImChunkStream_open0_ImGuiWindowSettings_close0"]
        [::std::mem::align_of::<ImChunkStream>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImChunkStream_open0_ImGuiTableSettings_close0"]
        [::std::mem::size_of::<ImChunkStream>() - 16usize];
    ["Align of template specialization: ImChunkStream_open0_ImGuiTableSettings_close0"]
        [::std::mem::align_of::<ImChunkStream>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiContextHook_close0"]
        [::std::mem::size_of::<ImVector<ImGuiContextHook>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiContextHook_close0"]
        [::std::mem::align_of::<ImVector<ImGuiContextHook>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_char_close0"]
        [::std::mem::size_of::<ImVector<::std::os::raw::c_char>>() - 16usize];
    ["Align of template specialization: ImVector_open0_char_close0"]
        [::std::mem::align_of::<ImVector<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_float_close0"]
        [::std::mem::size_of::<ImVector<f32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_float_close0"]
        [::std::mem::align_of::<ImVector<f32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_float_close0"]
        [::std::mem::size_of::<ImVector<f32>>() - 16usize];
    ["Align of template specialization: ImVector_open0_float_close0"]
        [::std::mem::align_of::<ImVector<f32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::size_of::<ImVector<ImGuiID>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::align_of::<ImVector<ImGuiID>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiOldColumns_close0"]
        [::std::mem::size_of::<ImVector<ImGuiOldColumns>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiOldColumns_close0"]
        [::std::mem::align_of::<ImVector<ImGuiOldColumns>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTabItem_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTabItem>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTabItem_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTabItem>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImSpan_open0_ImGuiTableColumn_close0"]
        [::std::mem::size_of::<ImSpan<ImGuiTableColumn>>() - 16usize];
    ["Align of template specialization: ImSpan_open0_ImGuiTableColumn_close0"]
        [::std::mem::align_of::<ImSpan<ImGuiTableColumn>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImSpan_open0_ImGuiTableColumnIdx_close0"]
        [::std::mem::size_of::<ImSpan<ImGuiTableColumnIdx>>() - 16usize];
    ["Align of template specialization: ImSpan_open0_ImGuiTableColumnIdx_close0"]
        [::std::mem::align_of::<ImSpan<ImGuiTableColumnIdx>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImSpan_open0_ImGuiTableCellData_close0"]
        [::std::mem::size_of::<ImSpan<ImGuiTableCellData>>() - 16usize];
    ["Align of template specialization: ImSpan_open0_ImGuiTableCellData_close0"]
        [::std::mem::align_of::<ImSpan<ImGuiTableCellData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTableInstanceData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTableInstanceData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTableInstanceData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTableInstanceData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTableColumnSortSpecs_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTableColumnSortSpecs>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTableColumnSortSpecs_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTableColumnSortSpecs>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiTableHeaderData_close0"]
        [::std::mem::size_of::<ImVector<ImGuiTableHeaderData>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiTableHeaderData_close0"]
        [::std::mem::align_of::<ImVector<ImGuiTableHeaderData>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::size_of::<ImVector<*mut ImDrawList>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImDrawList_close0"]
        [::std::mem::align_of::<ImVector<*mut ImDrawList>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::size_of::<ImVector<ImGuiID>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ImGuiID_close0"]
        [::std::mem::align_of::<ImVector<ImGuiID>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::size_of::<ImVector<*mut ImGuiWindow>>() - 16usize];
    ["Align of template specialization: ImVector_open0_ptr_ImGuiWindow_close0"]
        [::std::mem::align_of::<ImVector<*mut ImGuiWindow>>() - 8usize];
};
