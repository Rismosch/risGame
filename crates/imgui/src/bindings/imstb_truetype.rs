#![allow(non_camel_case_types, dead_code, non_upper_case_globals, non_snake_case, clashing_extern_declarations)]

/* automatically generated by rust-bindgen 0.71.1 */

pub const STBTT_MACSTYLE_DONTCARE: u32 = 0;
pub const STBTT_MACSTYLE_BOLD: u32 = 1;
pub const STBTT_MACSTYLE_ITALIC: u32 = 2;
pub const STBTT_MACSTYLE_UNDERSCORE: u32 = 4;
pub const STBTT_MACSTYLE_NONE: u32 = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt__buf {
    pub data: *mut ::std::os::raw::c_uchar,
    pub cursor: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt__buf"][::std::mem::size_of::<stbtt__buf>() - 16usize];
    ["Alignment of stbtt__buf"][::std::mem::align_of::<stbtt__buf>() - 8usize];
    ["Offset of field: stbtt__buf::data"][::std::mem::offset_of!(stbtt__buf, data) - 0usize];
    ["Offset of field: stbtt__buf::cursor"][::std::mem::offset_of!(stbtt__buf, cursor) - 8usize];
    ["Offset of field: stbtt__buf::size"][::std::mem::offset_of!(stbtt__buf, size) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_bakedchar {
    pub x0: ::std::os::raw::c_ushort,
    pub y0: ::std::os::raw::c_ushort,
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub xoff: f32,
    pub yoff: f32,
    pub xadvance: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_bakedchar"][::std::mem::size_of::<stbtt_bakedchar>() - 20usize];
    ["Alignment of stbtt_bakedchar"][::std::mem::align_of::<stbtt_bakedchar>() - 4usize];
    ["Offset of field: stbtt_bakedchar::x0"][::std::mem::offset_of!(stbtt_bakedchar, x0) - 0usize];
    ["Offset of field: stbtt_bakedchar::y0"][::std::mem::offset_of!(stbtt_bakedchar, y0) - 2usize];
    ["Offset of field: stbtt_bakedchar::x1"][::std::mem::offset_of!(stbtt_bakedchar, x1) - 4usize];
    ["Offset of field: stbtt_bakedchar::y1"][::std::mem::offset_of!(stbtt_bakedchar, y1) - 6usize];
    ["Offset of field: stbtt_bakedchar::xoff"]
        [::std::mem::offset_of!(stbtt_bakedchar, xoff) - 8usize];
    ["Offset of field: stbtt_bakedchar::yoff"]
        [::std::mem::offset_of!(stbtt_bakedchar, yoff) - 12usize];
    ["Offset of field: stbtt_bakedchar::xadvance"]
        [::std::mem::offset_of!(stbtt_bakedchar, xadvance) - 16usize];
};
extern "C" {
    pub fn stbtt_BakeFontBitmap(
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_int,
        pixel_height: f32,
        pixels: *mut ::std::os::raw::c_uchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        first_char: ::std::os::raw::c_int,
        num_chars: ::std::os::raw::c_int,
        chardata: *mut stbtt_bakedchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_aligned_quad {
    pub x0: f32,
    pub y0: f32,
    pub s0: f32,
    pub t0: f32,
    pub x1: f32,
    pub y1: f32,
    pub s1: f32,
    pub t1: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_aligned_quad"][::std::mem::size_of::<stbtt_aligned_quad>() - 32usize];
    ["Alignment of stbtt_aligned_quad"][::std::mem::align_of::<stbtt_aligned_quad>() - 4usize];
    ["Offset of field: stbtt_aligned_quad::x0"]
        [::std::mem::offset_of!(stbtt_aligned_quad, x0) - 0usize];
    ["Offset of field: stbtt_aligned_quad::y0"]
        [::std::mem::offset_of!(stbtt_aligned_quad, y0) - 4usize];
    ["Offset of field: stbtt_aligned_quad::s0"]
        [::std::mem::offset_of!(stbtt_aligned_quad, s0) - 8usize];
    ["Offset of field: stbtt_aligned_quad::t0"]
        [::std::mem::offset_of!(stbtt_aligned_quad, t0) - 12usize];
    ["Offset of field: stbtt_aligned_quad::x1"]
        [::std::mem::offset_of!(stbtt_aligned_quad, x1) - 16usize];
    ["Offset of field: stbtt_aligned_quad::y1"]
        [::std::mem::offset_of!(stbtt_aligned_quad, y1) - 20usize];
    ["Offset of field: stbtt_aligned_quad::s1"]
        [::std::mem::offset_of!(stbtt_aligned_quad, s1) - 24usize];
    ["Offset of field: stbtt_aligned_quad::t1"]
        [::std::mem::offset_of!(stbtt_aligned_quad, t1) - 28usize];
};
extern "C" {
    pub fn stbtt_GetBakedQuad(
        chardata: *const stbtt_bakedchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        char_index: ::std::os::raw::c_int,
        xpos: *mut f32,
        ypos: *mut f32,
        q: *mut stbtt_aligned_quad,
        opengl_fillrule: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetScaledFontVMetrics(
        fontdata: *const ::std::os::raw::c_uchar,
        index: ::std::os::raw::c_int,
        size: f32,
        ascent: *mut f32,
        descent: *mut f32,
        lineGap: *mut f32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_packedchar {
    pub x0: ::std::os::raw::c_ushort,
    pub y0: ::std::os::raw::c_ushort,
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub xoff: f32,
    pub yoff: f32,
    pub xadvance: f32,
    pub xoff2: f32,
    pub yoff2: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_packedchar"][::std::mem::size_of::<stbtt_packedchar>() - 28usize];
    ["Alignment of stbtt_packedchar"][::std::mem::align_of::<stbtt_packedchar>() - 4usize];
    ["Offset of field: stbtt_packedchar::x0"]
        [::std::mem::offset_of!(stbtt_packedchar, x0) - 0usize];
    ["Offset of field: stbtt_packedchar::y0"]
        [::std::mem::offset_of!(stbtt_packedchar, y0) - 2usize];
    ["Offset of field: stbtt_packedchar::x1"]
        [::std::mem::offset_of!(stbtt_packedchar, x1) - 4usize];
    ["Offset of field: stbtt_packedchar::y1"]
        [::std::mem::offset_of!(stbtt_packedchar, y1) - 6usize];
    ["Offset of field: stbtt_packedchar::xoff"]
        [::std::mem::offset_of!(stbtt_packedchar, xoff) - 8usize];
    ["Offset of field: stbtt_packedchar::yoff"]
        [::std::mem::offset_of!(stbtt_packedchar, yoff) - 12usize];
    ["Offset of field: stbtt_packedchar::xadvance"]
        [::std::mem::offset_of!(stbtt_packedchar, xadvance) - 16usize];
    ["Offset of field: stbtt_packedchar::xoff2"]
        [::std::mem::offset_of!(stbtt_packedchar, xoff2) - 20usize];
    ["Offset of field: stbtt_packedchar::yoff2"]
        [::std::mem::offset_of!(stbtt_packedchar, yoff2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbrp_rect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn stbtt_PackBegin(
        spc: *mut stbtt_pack_context,
        pixels: *mut ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride_in_bytes: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        alloc_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackEnd(spc: *mut stbtt_pack_context);
}
extern "C" {
    pub fn stbtt_PackFontRange(
        spc: *mut stbtt_pack_context,
        fontdata: *const ::std::os::raw::c_uchar,
        font_index: ::std::os::raw::c_int,
        font_size: f32,
        first_unicode_char_in_range: ::std::os::raw::c_int,
        num_chars_in_range: ::std::os::raw::c_int,
        chardata_for_range: *mut stbtt_packedchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_pack_range {
    pub font_size: f32,
    pub first_unicode_codepoint_in_range: ::std::os::raw::c_int,
    pub array_of_unicode_codepoints: *mut ::std::os::raw::c_int,
    pub num_chars: ::std::os::raw::c_int,
    pub chardata_for_range: *mut stbtt_packedchar,
    pub h_oversample: ::std::os::raw::c_uchar,
    pub v_oversample: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_pack_range"][::std::mem::size_of::<stbtt_pack_range>() - 40usize];
    ["Alignment of stbtt_pack_range"][::std::mem::align_of::<stbtt_pack_range>() - 8usize];
    ["Offset of field: stbtt_pack_range::font_size"]
        [::std::mem::offset_of!(stbtt_pack_range, font_size) - 0usize];
    ["Offset of field: stbtt_pack_range::first_unicode_codepoint_in_range"]
        [::std::mem::offset_of!(stbtt_pack_range, first_unicode_codepoint_in_range) - 4usize];
    ["Offset of field: stbtt_pack_range::array_of_unicode_codepoints"]
        [::std::mem::offset_of!(stbtt_pack_range, array_of_unicode_codepoints) - 8usize];
    ["Offset of field: stbtt_pack_range::num_chars"]
        [::std::mem::offset_of!(stbtt_pack_range, num_chars) - 16usize];
    ["Offset of field: stbtt_pack_range::chardata_for_range"]
        [::std::mem::offset_of!(stbtt_pack_range, chardata_for_range) - 24usize];
    ["Offset of field: stbtt_pack_range::h_oversample"]
        [::std::mem::offset_of!(stbtt_pack_range, h_oversample) - 32usize];
    ["Offset of field: stbtt_pack_range::v_oversample"]
        [::std::mem::offset_of!(stbtt_pack_range, v_oversample) - 33usize];
};
extern "C" {
    pub fn stbtt_PackFontRanges(
        spc: *mut stbtt_pack_context,
        fontdata: *const ::std::os::raw::c_uchar,
        font_index: ::std::os::raw::c_int,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackSetOversampling(
        spc: *mut stbtt_pack_context,
        h_oversample: ::std::os::raw::c_uint,
        v_oversample: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn stbtt_PackSetSkipMissingCodepoints(
        spc: *mut stbtt_pack_context,
        skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetPackedQuad(
        chardata: *const stbtt_packedchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        char_index: ::std::os::raw::c_int,
        xpos: *mut f32,
        ypos: *mut f32,
        q: *mut stbtt_aligned_quad,
        align_to_integer: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_PackFontRangesGatherRects(
        spc: *mut stbtt_pack_context,
        info: *const stbtt_fontinfo,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
        rects: *mut stbrp_rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackFontRangesPackRects(
        spc: *mut stbtt_pack_context,
        rects: *mut stbrp_rect,
        num_rects: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_PackFontRangesRenderIntoRects(
        spc: *mut stbtt_pack_context,
        info: *const stbtt_fontinfo,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
        rects: *mut stbrp_rect,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_pack_context {
    pub user_allocator_context: *mut ::std::os::raw::c_void,
    pub pack_info: *mut ::std::os::raw::c_void,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub stride_in_bytes: ::std::os::raw::c_int,
    pub padding: ::std::os::raw::c_int,
    pub skip_missing: ::std::os::raw::c_int,
    pub h_oversample: ::std::os::raw::c_uint,
    pub v_oversample: ::std::os::raw::c_uint,
    pub pixels: *mut ::std::os::raw::c_uchar,
    pub nodes: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_pack_context"][::std::mem::size_of::<stbtt_pack_context>() - 64usize];
    ["Alignment of stbtt_pack_context"][::std::mem::align_of::<stbtt_pack_context>() - 8usize];
    ["Offset of field: stbtt_pack_context::user_allocator_context"]
        [::std::mem::offset_of!(stbtt_pack_context, user_allocator_context) - 0usize];
    ["Offset of field: stbtt_pack_context::pack_info"]
        [::std::mem::offset_of!(stbtt_pack_context, pack_info) - 8usize];
    ["Offset of field: stbtt_pack_context::width"]
        [::std::mem::offset_of!(stbtt_pack_context, width) - 16usize];
    ["Offset of field: stbtt_pack_context::height"]
        [::std::mem::offset_of!(stbtt_pack_context, height) - 20usize];
    ["Offset of field: stbtt_pack_context::stride_in_bytes"]
        [::std::mem::offset_of!(stbtt_pack_context, stride_in_bytes) - 24usize];
    ["Offset of field: stbtt_pack_context::padding"]
        [::std::mem::offset_of!(stbtt_pack_context, padding) - 28usize];
    ["Offset of field: stbtt_pack_context::skip_missing"]
        [::std::mem::offset_of!(stbtt_pack_context, skip_missing) - 32usize];
    ["Offset of field: stbtt_pack_context::h_oversample"]
        [::std::mem::offset_of!(stbtt_pack_context, h_oversample) - 36usize];
    ["Offset of field: stbtt_pack_context::v_oversample"]
        [::std::mem::offset_of!(stbtt_pack_context, v_oversample) - 40usize];
    ["Offset of field: stbtt_pack_context::pixels"]
        [::std::mem::offset_of!(stbtt_pack_context, pixels) - 48usize];
    ["Offset of field: stbtt_pack_context::nodes"]
        [::std::mem::offset_of!(stbtt_pack_context, nodes) - 56usize];
};
extern "C" {
    pub fn stbtt_GetNumberOfFonts(data: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontOffsetForIndex(
        data: *const ::std::os::raw::c_uchar,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_fontinfo {
    pub userdata: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_uchar,
    pub fontstart: ::std::os::raw::c_int,
    pub numGlyphs: ::std::os::raw::c_int,
    pub loca: ::std::os::raw::c_int,
    pub head: ::std::os::raw::c_int,
    pub glyf: ::std::os::raw::c_int,
    pub hhea: ::std::os::raw::c_int,
    pub hmtx: ::std::os::raw::c_int,
    pub kern: ::std::os::raw::c_int,
    pub gpos: ::std::os::raw::c_int,
    pub svg: ::std::os::raw::c_int,
    pub index_map: ::std::os::raw::c_int,
    pub indexToLocFormat: ::std::os::raw::c_int,
    pub cff: stbtt__buf,
    pub charstrings: stbtt__buf,
    pub gsubrs: stbtt__buf,
    pub subrs: stbtt__buf,
    pub fontdicts: stbtt__buf,
    pub fdselect: stbtt__buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_fontinfo"][::std::mem::size_of::<stbtt_fontinfo>() - 160usize];
    ["Alignment of stbtt_fontinfo"][::std::mem::align_of::<stbtt_fontinfo>() - 8usize];
    ["Offset of field: stbtt_fontinfo::userdata"]
        [::std::mem::offset_of!(stbtt_fontinfo, userdata) - 0usize];
    ["Offset of field: stbtt_fontinfo::data"]
        [::std::mem::offset_of!(stbtt_fontinfo, data) - 8usize];
    ["Offset of field: stbtt_fontinfo::fontstart"]
        [::std::mem::offset_of!(stbtt_fontinfo, fontstart) - 16usize];
    ["Offset of field: stbtt_fontinfo::numGlyphs"]
        [::std::mem::offset_of!(stbtt_fontinfo, numGlyphs) - 20usize];
    ["Offset of field: stbtt_fontinfo::loca"]
        [::std::mem::offset_of!(stbtt_fontinfo, loca) - 24usize];
    ["Offset of field: stbtt_fontinfo::head"]
        [::std::mem::offset_of!(stbtt_fontinfo, head) - 28usize];
    ["Offset of field: stbtt_fontinfo::glyf"]
        [::std::mem::offset_of!(stbtt_fontinfo, glyf) - 32usize];
    ["Offset of field: stbtt_fontinfo::hhea"]
        [::std::mem::offset_of!(stbtt_fontinfo, hhea) - 36usize];
    ["Offset of field: stbtt_fontinfo::hmtx"]
        [::std::mem::offset_of!(stbtt_fontinfo, hmtx) - 40usize];
    ["Offset of field: stbtt_fontinfo::kern"]
        [::std::mem::offset_of!(stbtt_fontinfo, kern) - 44usize];
    ["Offset of field: stbtt_fontinfo::gpos"]
        [::std::mem::offset_of!(stbtt_fontinfo, gpos) - 48usize];
    ["Offset of field: stbtt_fontinfo::svg"][::std::mem::offset_of!(stbtt_fontinfo, svg) - 52usize];
    ["Offset of field: stbtt_fontinfo::index_map"]
        [::std::mem::offset_of!(stbtt_fontinfo, index_map) - 56usize];
    ["Offset of field: stbtt_fontinfo::indexToLocFormat"]
        [::std::mem::offset_of!(stbtt_fontinfo, indexToLocFormat) - 60usize];
    ["Offset of field: stbtt_fontinfo::cff"][::std::mem::offset_of!(stbtt_fontinfo, cff) - 64usize];
    ["Offset of field: stbtt_fontinfo::charstrings"]
        [::std::mem::offset_of!(stbtt_fontinfo, charstrings) - 80usize];
    ["Offset of field: stbtt_fontinfo::gsubrs"]
        [::std::mem::offset_of!(stbtt_fontinfo, gsubrs) - 96usize];
    ["Offset of field: stbtt_fontinfo::subrs"]
        [::std::mem::offset_of!(stbtt_fontinfo, subrs) - 112usize];
    ["Offset of field: stbtt_fontinfo::fontdicts"]
        [::std::mem::offset_of!(stbtt_fontinfo, fontdicts) - 128usize];
    ["Offset of field: stbtt_fontinfo::fdselect"]
        [::std::mem::offset_of!(stbtt_fontinfo, fdselect) - 144usize];
};
extern "C" {
    pub fn stbtt_InitFont(
        info: *mut stbtt_fontinfo,
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_FindGlyphIndex(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_ScaleForPixelHeight(info: *const stbtt_fontinfo, pixels: f32) -> f32;
}
extern "C" {
    pub fn stbtt_ScaleForMappingEmToPixels(info: *const stbtt_fontinfo, pixels: f32) -> f32;
}
extern "C" {
    pub fn stbtt_GetFontVMetrics(
        info: *const stbtt_fontinfo,
        ascent: *mut ::std::os::raw::c_int,
        descent: *mut ::std::os::raw::c_int,
        lineGap: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetFontVMetricsOS2(
        info: *const stbtt_fontinfo,
        typoAscent: *mut ::std::os::raw::c_int,
        typoDescent: *mut ::std::os::raw::c_int,
        typoLineGap: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontBoundingBox(
        info: *const stbtt_fontinfo,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointHMetrics(
        info: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        advanceWidth: *mut ::std::os::raw::c_int,
        leftSideBearing: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointKernAdvance(
        info: *const stbtt_fontinfo,
        ch1: ::std::os::raw::c_int,
        ch2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetCodepointBox(
        info: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphHMetrics(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        advanceWidth: *mut ::std::os::raw::c_int,
        leftSideBearing: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphKernAdvance(
        info: *const stbtt_fontinfo,
        glyph1: ::std::os::raw::c_int,
        glyph2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphBox(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_kerningentry {
    pub glyph1: ::std::os::raw::c_int,
    pub glyph2: ::std::os::raw::c_int,
    pub advance: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_kerningentry"][::std::mem::size_of::<stbtt_kerningentry>() - 12usize];
    ["Alignment of stbtt_kerningentry"][::std::mem::align_of::<stbtt_kerningentry>() - 4usize];
    ["Offset of field: stbtt_kerningentry::glyph1"]
        [::std::mem::offset_of!(stbtt_kerningentry, glyph1) - 0usize];
    ["Offset of field: stbtt_kerningentry::glyph2"]
        [::std::mem::offset_of!(stbtt_kerningentry, glyph2) - 4usize];
    ["Offset of field: stbtt_kerningentry::advance"]
        [::std::mem::offset_of!(stbtt_kerningentry, advance) - 8usize];
};
extern "C" {
    pub fn stbtt_GetKerningTableLength(info: *const stbtt_fontinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetKerningTable(
        info: *const stbtt_fontinfo,
        table: *mut stbtt_kerningentry,
        table_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const STBTT_vmove: _bindgen_ty_1 = 1;
pub const STBTT_vline: _bindgen_ty_1 = 2;
pub const STBTT_vcurve: _bindgen_ty_1 = 3;
pub const STBTT_vcubic: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_vertex {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub cx1: ::std::os::raw::c_short,
    pub cy1: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_uchar,
    pub padding: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt_vertex"][::std::mem::size_of::<stbtt_vertex>() - 14usize];
    ["Alignment of stbtt_vertex"][::std::mem::align_of::<stbtt_vertex>() - 2usize];
    ["Offset of field: stbtt_vertex::x"][::std::mem::offset_of!(stbtt_vertex, x) - 0usize];
    ["Offset of field: stbtt_vertex::y"][::std::mem::offset_of!(stbtt_vertex, y) - 2usize];
    ["Offset of field: stbtt_vertex::cx"][::std::mem::offset_of!(stbtt_vertex, cx) - 4usize];
    ["Offset of field: stbtt_vertex::cy"][::std::mem::offset_of!(stbtt_vertex, cy) - 6usize];
    ["Offset of field: stbtt_vertex::cx1"][::std::mem::offset_of!(stbtt_vertex, cx1) - 8usize];
    ["Offset of field: stbtt_vertex::cy1"][::std::mem::offset_of!(stbtt_vertex, cy1) - 10usize];
    ["Offset of field: stbtt_vertex::type_"][::std::mem::offset_of!(stbtt_vertex, type_) - 12usize];
    ["Offset of field: stbtt_vertex::padding"]
        [::std::mem::offset_of!(stbtt_vertex, padding) - 13usize];
};
extern "C" {
    pub fn stbtt_IsGlyphEmpty(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetCodepointShape(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
        vertices: *mut *mut stbtt_vertex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphShape(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        vertices: *mut *mut stbtt_vertex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_FreeShape(info: *const stbtt_fontinfo, vertices: *mut stbtt_vertex);
}
extern "C" {
    pub fn stbtt_FindSVGDoc(
        info: *const stbtt_fontinfo,
        gl: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetCodepointSVG(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
        svg: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphSVG(
        info: *const stbtt_fontinfo,
        gl: ::std::os::raw::c_int,
        svg: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_FreeBitmap(
        bitmap: *mut ::std::os::raw::c_uchar,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmap(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        codepoint: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapSubpixel(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        codepoint: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmap(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmapSubpixel(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmapSubpixelPrefilter(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        oversample_x: ::std::os::raw::c_int,
        oversample_y: ::std::os::raw::c_int,
        sub_x: *mut f32,
        sub_y: *mut f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapBox(
        font: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapBoxSubpixel(
        font: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmap(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        glyph: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapSubpixel(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        glyph: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmap(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmapSubpixel(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmapSubpixelPrefilter(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        oversample_x: ::std::os::raw::c_int,
        oversample_y: ::std::os::raw::c_int,
        sub_x: *mut f32,
        sub_y: *mut f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapBox(
        font: *const stbtt_fontinfo,
        glyph: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapBoxSubpixel(
        font: *const stbtt_fontinfo,
        glyph: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt__bitmap {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub pixels: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbtt__bitmap"][::std::mem::size_of::<stbtt__bitmap>() - 24usize];
    ["Alignment of stbtt__bitmap"][::std::mem::align_of::<stbtt__bitmap>() - 8usize];
    ["Offset of field: stbtt__bitmap::w"][::std::mem::offset_of!(stbtt__bitmap, w) - 0usize];
    ["Offset of field: stbtt__bitmap::h"][::std::mem::offset_of!(stbtt__bitmap, h) - 4usize];
    ["Offset of field: stbtt__bitmap::stride"]
        [::std::mem::offset_of!(stbtt__bitmap, stride) - 8usize];
    ["Offset of field: stbtt__bitmap::pixels"]
        [::std::mem::offset_of!(stbtt__bitmap, pixels) - 16usize];
};
extern "C" {
    pub fn stbtt_Rasterize(
        result: *mut stbtt__bitmap,
        flatness_in_pixels: f32,
        vertices: *mut stbtt_vertex,
        num_verts: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        x_off: ::std::os::raw::c_int,
        y_off: ::std::os::raw::c_int,
        invert: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stbtt_FreeSDF(
        bitmap: *mut ::std::os::raw::c_uchar,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphSDF(
        info: *const stbtt_fontinfo,
        scale: f32,
        glyph: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        onedge_value: ::std::os::raw::c_uchar,
        pixel_dist_scale: f32,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetCodepointSDF(
        info: *const stbtt_fontinfo,
        scale: f32,
        codepoint: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        onedge_value: ::std::os::raw::c_uchar,
        pixel_dist_scale: f32,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_FindMatchingFont(
        fontdata: *const ::std::os::raw::c_uchar,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_CompareUTF8toUTF16_bigendian(
        s1: *const ::std::os::raw::c_char,
        len1: ::std::os::raw::c_int,
        s2: *const ::std::os::raw::c_char,
        len2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontNameString(
        font: *const stbtt_fontinfo,
        length: *mut ::std::os::raw::c_int,
        platformID: ::std::os::raw::c_int,
        encodingID: ::std::os::raw::c_int,
        languageID: ::std::os::raw::c_int,
        nameID: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub const STBTT_PLATFORM_ID_UNICODE: _bindgen_ty_2 = 0;
pub const STBTT_PLATFORM_ID_MAC: _bindgen_ty_2 = 1;
pub const STBTT_PLATFORM_ID_ISO: _bindgen_ty_2 = 2;
pub const STBTT_PLATFORM_ID_MICROSOFT: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const STBTT_UNICODE_EID_UNICODE_1_0: _bindgen_ty_3 = 0;
pub const STBTT_UNICODE_EID_UNICODE_1_1: _bindgen_ty_3 = 1;
pub const STBTT_UNICODE_EID_ISO_10646: _bindgen_ty_3 = 2;
pub const STBTT_UNICODE_EID_UNICODE_2_0_BMP: _bindgen_ty_3 = 3;
pub const STBTT_UNICODE_EID_UNICODE_2_0_FULL: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const STBTT_MS_EID_SYMBOL: _bindgen_ty_4 = 0;
pub const STBTT_MS_EID_UNICODE_BMP: _bindgen_ty_4 = 1;
pub const STBTT_MS_EID_SHIFTJIS: _bindgen_ty_4 = 2;
pub const STBTT_MS_EID_UNICODE_FULL: _bindgen_ty_4 = 10;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const STBTT_MAC_EID_ROMAN: _bindgen_ty_5 = 0;
pub const STBTT_MAC_EID_ARABIC: _bindgen_ty_5 = 4;
pub const STBTT_MAC_EID_JAPANESE: _bindgen_ty_5 = 1;
pub const STBTT_MAC_EID_HEBREW: _bindgen_ty_5 = 5;
pub const STBTT_MAC_EID_CHINESE_TRAD: _bindgen_ty_5 = 2;
pub const STBTT_MAC_EID_GREEK: _bindgen_ty_5 = 6;
pub const STBTT_MAC_EID_KOREAN: _bindgen_ty_5 = 3;
pub const STBTT_MAC_EID_RUSSIAN: _bindgen_ty_5 = 7;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const STBTT_MS_LANG_ENGLISH: _bindgen_ty_6 = 1033;
pub const STBTT_MS_LANG_ITALIAN: _bindgen_ty_6 = 1040;
pub const STBTT_MS_LANG_CHINESE: _bindgen_ty_6 = 2052;
pub const STBTT_MS_LANG_JAPANESE: _bindgen_ty_6 = 1041;
pub const STBTT_MS_LANG_DUTCH: _bindgen_ty_6 = 1043;
pub const STBTT_MS_LANG_KOREAN: _bindgen_ty_6 = 1042;
pub const STBTT_MS_LANG_FRENCH: _bindgen_ty_6 = 1036;
pub const STBTT_MS_LANG_RUSSIAN: _bindgen_ty_6 = 1049;
pub const STBTT_MS_LANG_GERMAN: _bindgen_ty_6 = 1031;
pub const STBTT_MS_LANG_SPANISH: _bindgen_ty_6 = 1033;
pub const STBTT_MS_LANG_HEBREW: _bindgen_ty_6 = 1037;
pub const STBTT_MS_LANG_SWEDISH: _bindgen_ty_6 = 1053;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const STBTT_MAC_LANG_ENGLISH: _bindgen_ty_7 = 0;
pub const STBTT_MAC_LANG_JAPANESE: _bindgen_ty_7 = 11;
pub const STBTT_MAC_LANG_ARABIC: _bindgen_ty_7 = 12;
pub const STBTT_MAC_LANG_KOREAN: _bindgen_ty_7 = 23;
pub const STBTT_MAC_LANG_DUTCH: _bindgen_ty_7 = 4;
pub const STBTT_MAC_LANG_RUSSIAN: _bindgen_ty_7 = 32;
pub const STBTT_MAC_LANG_FRENCH: _bindgen_ty_7 = 1;
pub const STBTT_MAC_LANG_SPANISH: _bindgen_ty_7 = 6;
pub const STBTT_MAC_LANG_GERMAN: _bindgen_ty_7 = 2;
pub const STBTT_MAC_LANG_SWEDISH: _bindgen_ty_7 = 5;
pub const STBTT_MAC_LANG_HEBREW: _bindgen_ty_7 = 10;
pub const STBTT_MAC_LANG_CHINESE_SIMPLIFIED: _bindgen_ty_7 = 33;
pub const STBTT_MAC_LANG_ITALIAN: _bindgen_ty_7 = 3;
pub const STBTT_MAC_LANG_CHINESE_TRAD: _bindgen_ty_7 = 19;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
